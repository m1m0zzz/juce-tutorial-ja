"use strict";(self.webpackChunkjuce_tutorial_ja=self.webpackChunkjuce_tutorial_ja||[]).push([[4337],{9901:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var o=n(4848),s=n(8453),a=n(3449);n(6378);const i={title:"\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3068\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9",sidebar_position:11},c="\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3068\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9",l={id:"interface-design/tutorial_radio_buttons_checkboxes",title:"\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3068\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9",description:"\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3068\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u4f7f\u7528\u3057\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002",source:"@site/docs/interface-design/tutorial_radio_buttons_checkboxes.mdx",sourceDirName:"interface-design",slug:"/interface-design/tutorial_radio_buttons_checkboxes",permalink:"/juce-tutorial-ja/interface-design/tutorial_radio_buttons_checkboxes",draft:!1,unlisted:!1,editUrl:"https://github.com/m1m0zzz/juce-tutorial-ja/tree/main/docs/interface-design/tutorial_radio_buttons_checkboxes.mdx",tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3068\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9",sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"ComboBox\u30af\u30e9\u30b9",permalink:"/juce-tutorial-ja/interface-design/tutorial_combo_box"},next:{title:"TableListBox \u30af\u30e9\u30b9",permalink:"/juce-tutorial-ja/interface-design/tutorial_table_list_box"}},r={},d=[{value:"\u306f\u3058\u3081\u308b",id:"\u306f\u3058\u3081\u308b",level:2},{value:"Responding to toggle state changes",id:"responding-to-toggle-state-changes",level:2},{value:"Using other buttons as toggles",id:"using-other-buttons-as-toggles",level:2},{value:"Using text to display button toggle state",id:"using-text-to-display-button-toggle-state",level:2}];function h(t){const e={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3068\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3068\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9"}),"\n",(0,o.jsx)(e.p,{children:"\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u3068\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3092\u4f7f\u7528\u3057\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u9078\u629e\u53ef\u80fd\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002"}),"\n",(0,o.jsx)(e.p,{children:"\u30ec\u30d9\u30eb Beginner"}),"\n",(0,o.jsx)(e.p,{children:"\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0 Windows, macOS, Linux, iOS, Android"}),"\n",(0,o.jsxs)(e.p,{children:["\u30af\u30e9\u30b9\uff1a ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"}),", ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classButton",title:"A base class for buttons.",children:"\u30dc\u30bf\u30f3"}),", ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classLabel",title:"A component that displays a text string, and can optionally become a text editor when clicked.",children:"\u30e9\u30d9\u30eb"}),", ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classString",title:"The JUCE String class!",children:"\u30b9\u30c8\u30ea\u30f3\u30b0"})]}),"\n",(0,o.jsx)(e.h2,{id:"\u306f\u3058\u3081\u308b",children:"\u306f\u3058\u3081\u308b"}),"\n",(0,o.jsxs)(e.p,{children:["Download the demo project for this tutorial here: ",(0,o.jsx)(e.a,{href:"/tutorials/PIPs/RadioButtonsAndCheckboxesTutorial.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,o.jsx)(e.a,{href:"/tutorials/ZIPs/RadioButtonsAndCheckboxesTutorial.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,o.jsxs)(e.p,{children:["If you need help with this step, see ",(0,o.jsx)(e.a,{href:"../tutorial_new_projucer_project/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebProjucer\u30d1\u30fc\u30c81\uff1aProjucer\u3092\u59cb\u3081\u308b"}),"."]}),"\n",(0,o.jsx)(e.h1,{id:"the-demo-project",children:"The demo project"}),"\n",(0,o.jsxs)(e.p,{children:["The demo project illustrates the use of radio buttons and checkboxes in JUCE. These are normally implemented using the ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"})," class, although any JUCE ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classButton",title:"A base class for buttons.",children:"\u30dc\u30bf\u30f3"}),' component can be used as an individual toggle button or as part of a "radio group". The demo application presents some headings (using the ',(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classLabel",title:"A component that displays a text string, and can optionally become a text editor when clicked.",children:"\u30e9\u30d9\u30eb"})," class) and a series of ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"})," components:"]}),"\n",(0,o.jsx)(a.A,{src:"https://docs.juce.com/master/tutorial_radio_buttons_checkboxes_screenshot1.png",caption:"The demo application"}),"\n",(0,o.jsx)(e.h1,{id:"radio-buttons-and-checkboxes",children:"Radio buttons and checkboxes"}),"\n",(0,o.jsxs)(e.p,{children:["This tutorial examines the use of the ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classButton",title:"A base class for buttons.",children:"\u30dc\u30bf\u30f3"})," class for creating on/off style options. Normally you will use the ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"})," class for this, but as mentioned above, any button can be set up to be a toggle-type button. The standard ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"}),' component comprises a piece of text and a "bubble" to the left of the text that either contains a tick, or not. (And this appearance can be customised, if you wish, using the ',(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classLookAndFeel",title:"LookAndFeel objects define the appearance of all the JUCE widgets, and subclasses can be used to appl...",children:"\u30eb\u30c3\u30af\u30a2\u30f3\u30c9\u30d5\u30a3\u30fc\u30eb"})," class.) These two states can be seen in the screenshot in the previous section."]}),"\n",(0,o.jsxs)(e.p,{children:["In the ",(0,o.jsx)(e.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"}),' constructor, the "male" and "female" buttons are set up as follows:']}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'addAndMakeVisible (maleButton)\uff1b\n        addAndMakeVisible (femaleButton)\uff1b\n        maleButton .onClick = [this] { updateToggleState (&maleButton, "Male"); }\uff1b\n        femaleButton.onClick = [this] { updateToggleState (&femaleButton, "Female"); }\uff1b\n'})}),"\n",(0,o.jsxs)(e.p,{children:["Here you can see that ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"})," objects are configured in the same way as ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classTextButton",title:"A button that uses the standard lozenge-shaped background with a line of text on it.",children:"\u30c6\u30ad\u30b9\u30c8\u30dc\u30bf\u30f3"})," objects (as seen in ",(0,o.jsx)(e.a,{href:"../tutorial_listeners_and_broadcasters/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30ea\u30b9\u30ca\u30fc\u3068\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30bf\u30fc"}),'). To make these two toggle buttons mutually exclusive, we need to add them to the same "radio group". This will allow only one of these buttons to be toggled on at any one time (and toggling the other button on will, in turn, switch the other one off). A ',(0,o.jsx)(e.em,{children:"\u7121\u7dda\u30b0\u30eb\u30fc\u30d7ID"})," is a non-zero integer that is used to identify the group of buttons than must be mutually exclusive. In addition to this, all buttons with the same ",(0,o.jsx)(e.em,{children:"\u7121\u7dda\u30b0\u30eb\u30fc\u30d7ID"})," must be child components of the same parent component for this to work. (You would need to implement this mutually exclusive behaviour yourself if the buttons are within different parent components or different windows.)"]}),"\n",(0,o.jsxs)(e.p,{children:["We use an enumerated value (",(0,o.jsx)(e.code,{children:"\u6027\u5225\u30dc\u30bf\u30f3"}),") as our ",(0,o.jsx)(e.em,{children:"\u7121\u7dda\u30b0\u30eb\u30fc\u30d7ID"})," in this example:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"enum RadioButtonIds\n    {\n        \u6027\u5225\u30dc\u30bf\u30f3 = 1001\n    };\n"})}),"\n",(0,o.jsxs)(e.p,{children:["Then we use the ",(0,o.jsx)(e.a,{href:"classButton.html#a29adebc6ed27829f75b69c6ba40ef958",title:"Enables the button to act as a member of a mutually-exclusive group of 'radio buttons'.",children:"\u30dc\u30bf\u30f3::setRadioGroupId()"})," function to set the ",(0,o.jsx)(e.em,{children:"\u7121\u7dda\u30b0\u30eb\u30fc\u30d7ID"}),"."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"maleButton .setRadioGroupId (GenderButtons)\uff1b\n        femaleButton.setRadioGroupId (GenderButtons)\uff1b\n"})}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsxs)(e.p,{children:["Notice that the ",(0,o.jsx)(e.code,{children:"setRadioGroupId()"})," function is a member of the ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classButton",title:"A base class for buttons.",children:"\u30dc\u30bf\u30f3"})," class, not just the ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"})," class. Any button can be part of a radio group, but it probably only makes sense if that button is set up to expect to be toggled on and off (rather than simply intercept click events)."]})}),"\n",(0,o.jsxs)(e.p,{children:["The other three ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"})," objects are configured without adding them to a radio group:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'addAndMakeVisible (sportButton)\uff1b\n        addAndMakeVisible (artButton)\uff1b\n        addAndMakeVisible (filmButton)\uff1b\n        sportButton.onClick = [this] { updateToggleState (&sportButton, "Sport"); }\uff1b\n        artButton .onClick = [this] { updateToggleState (&artButton, "Art"); }\uff1b\n        filmButton .onClick = [this] { updateToggleState (&filmButton, "Film"); }\uff1b\n'})}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classButton",title:"A base class for buttons.",children:"\u30dc\u30bf\u30f3"})," objects can be removed from a radio group by calling the ",(0,o.jsx)(e.a,{href:"classButton.html#a29adebc6ed27829f75b69c6ba40ef958",title:"Enables the button to act as a member of a mutually-exclusive group of 'radio buttons'.",children:"\u30dc\u30bf\u30f3::setRadioGroupId()"})," function with a zero argument."]})}),"\n",(0,o.jsx)(e.h2,{id:"responding-to-toggle-state-changes",children:"Responding to toggle state changes"}),"\n",(0,o.jsxs)(e.p,{children:["Responding to buttons that can be toggled on or off is similar to responding to regular button clicks. We need to specify the function we want to call when the button is toggled by assigning a lambda function to the ",(0,o.jsx)(e.a,{href:"classButton.html#a30b76ab312dc7f66e67596ae20540ec2",title:"You can assign a lambda to this callback object to have it called when the button is clicked.",children:"\u30dc\u30bf\u30f3::onClick"})," helper object (as you can see in the code snippets above)."]}),"\n",(0,o.jsxs)(e.p,{children:["The difference is that we also need to check the toggle state of the button in our updateToggleState() function. To do this we can call the ",(0,o.jsx)(e.a,{href:"classButton.html#ae1723837340c174f0f212855d247b626",title:"Returns true if the button is 'on'.",children:"\u30dc\u30bf\u30f3::getToggleState()"})," function. Again this is a member of the ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classButton",title:"A base class for buttons.",children:"\u30dc\u30bf\u30f3"})," class, so this is valid for any button (but again, probably only makes sense if you expect the button to be toggled on and off, as it will return ",(0,o.jsx)(e.code,{children:"\u64ec\u4f3c"})," in other cases)."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"void updateToggleState (juce::Button* button, juce::String name)\n    {\n        auto state = button->getToggleState()\uff1b\n"})}),"\n",(0,o.jsx)(e.p,{children:"\u3053\u306e\u4f8b\u3067\u306f\u3001\u30c8\u30b0\u30eb\u306e\u5909\u66f4\u3092\u30ed\u30ac\u30fc\u306b\u30dd\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\uff1a"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'juce::String stateString = state ?"ON" : "OFF"\uff1b\n \n        juce::Logger::outputDebugString (name + " Button changed to " + stateString)\uff1b\n    }\n'})}),"\n",(0,o.jsxs)(e.p,{children:['Notice in particular, that when you toggle on either the "Male" or "Female" button that the other button turns "off" ',(0,o.jsx)(e.em,{children:"\u305d\u3057\u3066"})," this is reported by the ",(0,o.jsx)(e.code,{children:"updateToggleState()"})," function."]}),"\n",(0,o.jsxs)(e.p,{children:["Add some additional ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"}),' objects, of course you can easily add more hobbies. But you could also add more options under the gender category, for example "Prefer not to say" or "Other".']}),"\n",(0,o.jsx)(e.h2,{id:"using-other-buttons-as-toggles",children:"Using other buttons as toggles"}),"\n",(0,o.jsxs)(e.p,{children:["As hinted at above, ",(0,o.jsx)(e.em,{children:"\u3044\u305a\u308c\u3082"})," button can be used as a toggle button. To illustrate, let's convert all of the ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"})," objects in the demo project into ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classTextButton",title:"A button that uses the standard lozenge-shaped background with a line of text on it.",children:"\u30c6\u30ad\u30b9\u30c8\u30dc\u30bf\u30f3"})," objects. The obvious thing that we need to do here is change the type of the member variables to the ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classTextButton",title:"A button that uses the standard lozenge-shaped background with a line of text on it.",children:"\u30c6\u30ad\u30b9\u30c8\u30dc\u30bf\u30f3"})," class:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'juce::Label genderLabel { {}, "I identify my gender as..." }\uff1b\n    juce::ToggleButton maleButton { "\u7537\u6027" }\u3001\n                       femaleButton { "Female" }\uff1b\n \n    juce::Label hobbiesLabel { {}, "\u79c1\u306e\u8da3\u5473\u306f..."};\n    juce::ToggleButton sportButton { "Sport" }\u3001\n                       artButton { "Art" }\u3001\n                       filmButton { "Film"}\uff1b\n \n    //==============================================================================\n    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainContentComponent)\n};\n'})}),"\n",(0,o.jsxs)(e.p,{children:["But in order to make the buttons toggle-able using mouse clicks, we need to call the ",(0,o.jsx)(e.a,{href:"classButton.html#a675d6848c16e265ff334b2d51328d8d2",title:"This tells the button to automatically flip the toggle state when the button is clicked.",children:"Button::setClickingTogglesState()"})," function. To do this, add the following code anywhere within the ",(0,o.jsx)(e.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," constructor:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"maleButton .setClickingTogglesState (true)\uff1b\n        femaleButton .setClickingTogglesState (true)\uff1b\n        sportButton .setClickingTogglesState (true)\uff1b\n        artButton .setClickingTogglesState (true)\uff1b\n        filmButton .setClickingTogglesState (true)\uff1b\n"})}),"\n",(0,o.jsx)(e.p,{children:"\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u5143\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u308b\u304c\u3001\u5916\u89b3\u304c\u7570\u306a\u308b\u3082\u306e\u304c\u51fa\u6765\u4e0a\u304c\u308b\uff1a"}),"\n",(0,o.jsx)(a.A,{src:"https://docs.juce.com/master/tutorial_radio_buttons_checkboxes_screenshot2.png",caption:"Using text buttons as toggle buttons"}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsxs)(e.p,{children:["See ",(0,o.jsx)(e.a,{href:"../tutorial_colours/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebJUCE\u306e\u8272"})," for guidance on customising the colours of the text button in its on and off states."]})}),"\n",(0,o.jsx)(e.h2,{id:"using-text-to-display-button-toggle-state",children:"Using text to display button toggle state"}),"\n",(0,o.jsxs)(e.p,{children:["There may be cases where you want to change the text displayed depending on the button's toggle state, too. To do this, you can simply call the ",(0,o.jsx)(e.a,{href:"classButton.html#a96f4185a0a716d10309f1081f0af2f91",title:"Changes the button's text.",children:"Button::setButtonText()"})," function within your ",(0,o.jsx)(e.code,{children:"updateToggleState()"})," function. To try this, revise the ",(0,o.jsx)(e.code,{children:"updateToggleState()"})," function as follows:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'void updateToggleState (juce::Button* button, juce::String name)\n    {\n        auto state = button->getToggleState()\uff1b\n        juce::String stateString = state ?"ON" : "OFF"\uff1b\n        juce::String selectedString = state ?" (selected)" : ""\uff1b\n \n        juce::Logger::outputDebugString (name + " Button changed to " + stateString)\uff1b\n        button->setButtonText (name + selectedString)\uff1b\n    }\n'})}),"\n",(0,o.jsx)(e.p,{children:'\u3053\u306e\u5834\u5408\u3001\u30dc\u30bf\u30f3\u304c\u30c8\u30b0\u30eb\u30fb\u30aa\u30f3\u306e\u72b6\u614b\u3067\u3042\u308c\u3070\u3001\u901a\u5e38\u306e\u30dc\u30bf\u30f3\u30fb\u30c6\u30ad\u30b9\u30c8\u306b"(selected) "\u3068\u3044\u3046\u30c6\u30ad\u30b9\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u3042\u308b\u3002'}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsxs)(e.p,{children:["This technique will work with both ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classTextButton",title:"A button that uses the standard lozenge-shaped background with a line of text on it.",children:"\u30c6\u30ad\u30b9\u30c8\u30dc\u30bf\u30f3"})," components, as shown here, and ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"})," components."]})}),"\n",(0,o.jsx)(e.p,{children:"\u3053\u308c\u3067\u6211\u3005\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u3088\u3046\u306b\u306a\u308b\uff1a"}),"\n",(0,o.jsx)(a.A,{src:"https://docs.juce.com/master/tutorial_radio_buttons_checkboxes_screenshot3.png",caption:"Changing button text based on toggle state"}),"\n",(0,o.jsx)(e.h1,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,o.jsx)(e.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3068\u30e9\u30b8\u30aa\u30dc\u30bf\u30f3\u5f62\u5f0f\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u7279\u306b\u3001\u81ea\u5206\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306f\u305a\u3067\u3059\uff1a"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"})," objects and respond to changes in state."]}),"\n",(0,o.jsxs)(e.li,{children:["Change a ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"})," object's text, depending on its state."]}),"\n",(0,o.jsxs)(e.li,{children:["Group ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classToggleButton",title:"A button that can be toggled on/off.",children:"\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3"}),' objects to form "radio groups" when only one button within a group may be on at any one time.']}),"\n",(0,o.jsxs)(e.li,{children:["Use other ",(0,o.jsx)(e.a,{href:"https://docs.juce.com/master/classButton",title:"A base class for buttons.",children:"\u30dc\u30bf\u30f3"})," components as toggles."]}),"\n"]}),"\n",(0,o.jsx)(e.h1,{id:"\u95a2\u9023\u9805\u76ee",children:"\u95a2\u9023\u9805\u76ee"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"../tutorial_listeners_and_broadcasters/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30ea\u30b9\u30ca\u30fc\u3068\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30bf\u30fc"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"../tutorial_colours/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebJUCE\u306e\u8272"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"../tutorial_label/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebLabel\u30af\u30e9\u30b9"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"../tutorial_combo_box/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebComboBox\u30af\u30e9\u30b9"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"../tutorial_slider_values/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b9\u30e9\u30a4\u30c0\u30fc\u30af\u30e9\u30b9"})}),"\n"]})]})}function u(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,o.jsx)(e,{...t,children:(0,o.jsx)(h,{...t})}):h(t)}},3449:(t,e,n)=>{n.d(e,{A:()=>s});var o=n(4848);function s(t){let{src:e,caption:n,alt:s,width:a,height:i}=t;return(0,o.jsxs)("figure",{children:[(0,o.jsx)("img",{src:e,alt:s||n,width:a,height:i}),(0,o.jsx)("figcaption",{children:(0,o.jsx)("b",{children:n})})]})}},6378:(t,e,n)=>{n.d(e,{A:()=>s});var o=n(4848);function s(t){let{path:e}=t;return(0,o.jsx)("p",{children:(0,o.jsx)("a",{href:"https://docs.juce.com/master/"+e,children:"\ud83d\udcda Source Page"})})}},8453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>c});var o=n(6540);const s={},a=o.createContext(s);function i(t){const e=o.useContext(a);return o.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:i(t.components),o.createElement(a.Provider,{value:e},t.children)}}}]);