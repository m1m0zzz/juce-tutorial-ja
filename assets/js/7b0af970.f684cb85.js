"use strict";(self.webpackChunkjuce_tutorial_ja=self.webpackChunkjuce_tutorial_ja||[]).push([[9867],{1419:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=t(4848),a=t(8453),n=t(3449);t(6378);const r={title:"MIDI\u30c7\u30fc\u30bf\u306e\u4f5c\u6210",sidebar_position:1},o="\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebMIDI\u30c7\u30fc\u30bf\u306e\u4f5c\u6210",c={id:"midi/tutorial_midi_message",title:"MIDI\u30c7\u30fc\u30bf\u306e\u4f5c\u6210",description:"This tutorial introduces the \u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8 class, which is used for representing MIDI data. The \u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1 class is also introduced for handling buffers of MIDI messages.",source:"@site/docs/midi/tutorial_midi_message.mdx",sourceDirName:"midi",slug:"/midi/tutorial_midi_message",permalink:"/juce-tutorial-ja/midi/tutorial_midi_message",draft:!1,unlisted:!1,editUrl:"https://github.com/m1m0zzz/juce-tutorial-ja/tree/main/docs/midi/tutorial_midi_message.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"MIDI\u30c7\u30fc\u30bf\u306e\u4f5c\u6210",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"MIDI",permalink:"/juce-tutorial-ja/category/midi"},next:{title:"MIDI\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406",permalink:"/juce-tutorial-ja/midi/tutorial_handling_midi_events"}},d={},l=[{value:"\u306f\u3058\u3081\u308b",id:"\u306f\u3058\u3081\u308b",level:2},{value:"Creating MidiMessage objects",id:"creating-midimessage-objects",level:2},{value:"Parsing MidiMessage objects",id:"parsing-midimessage-objects",level:2},{value:"Adding MIDI messages to a MidiBuffer object",id:"adding-midi-messages-to-a-midibuffer-object",level:2},{value:"Iterating over a MidiBuffer object",id:"iterating-over-a-midibuffer-object",level:2}];function m(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebmidi\u30c7\u30fc\u30bf\u306e\u4f5c\u6210",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebMIDI\u30c7\u30fc\u30bf\u306e\u4f5c\u6210"})}),"\n",(0,i.jsxs)(s.p,{children:["This tutorial introduces the ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," class, which is used for representing MIDI data. The ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," class is also introduced for handling buffers of MIDI messages."]}),"\n",(0,i.jsx)(s.p,{children:"\u30ec\u30d9\u30eb\uff1a\u521d\u7d1a"}),"\n",(0,i.jsx)(s.p,{children:"\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\uff1aWindows, macOS, Linux, iOS, Android"}),"\n",(0,i.jsxs)(s.p,{children:["\u30af\u30e9\u30b9\uff1a ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"}),", ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"}),", ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classTime",title:"Holds an absolute date and time.",children:"\u6642\u9593"}),", ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classTimer",title:"Makes repeated callbacks to a virtual method at a specified time interval.",children:"\u30bf\u30a4\u30de\u30fc"})]}),"\n",(0,i.jsx)(s.h2,{id:"\u306f\u3058\u3081\u308b",children:"\u306f\u3058\u3081\u308b"}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsxs)(s.p,{children:["This tutorial assumes that you are familiar with MIDI in general. You should also be familiar with using JUCE buttons and sliders (see ",(0,i.jsx)(s.a,{href:"../tutorial_slider_values/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b9\u30e9\u30a4\u30c0\u30fc\u30af\u30e9\u30b9"})," and ",(0,i.jsx)(s.a,{href:"../tutorial_listeners_and_broadcasters/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30ea\u30b9\u30ca\u30fc\u3068\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30bf\u30fc"}),")."]})}),"\n",(0,i.jsxs)(s.p,{children:["Download the demo project for this tutorial here: ",(0,i.jsx)(s.a,{href:"/tutorials/PIPs/MidiMessageTutorial.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,i.jsx)(s.a,{href:"/tutorials/ZIPs/MidiMessageTutorial.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,i.jsxs)(s.p,{children:["If you need help with this step, see ",(0,i.jsx)(s.a,{href:"../tutorial_new_projucer_project/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebProjucer\u30d1\u30fc\u30c81\uff1aProjucer\u3092\u59cb\u3081\u308b"}),"."]}),"\n",(0,i.jsx)(s.h1,{id:"the-demo-project",children:"The demo project"}),"\n",(0,i.jsx)(s.p,{children:"\u30c7\u30e2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001MIDI\u30c1\u30e3\u30f3\u30cd\u30eb10\u306bMIDI\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e4\u3064\u306e\u30dc\u30bf\u30f3\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\u30d0\u30b9\u30c9\u30e9\u30e0\u3001\u30b9\u30cd\u30a2\u30c9\u30e9\u30e0\u3001\u30af\u30ed\u30fc\u30ba\u30c9\u30cf\u30a4\u30cf\u30c3\u30c8\u3001\u30aa\u30fc\u30d7\u30f3\u30cf\u30a4\u30cf\u30c3\u30c8\u3067\u3059\u3002\u307e\u305f\u3001\u30dc\u30ea\u30e5\u30fc\u30e0\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\uff08\u9023\u7d9a\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc7\uff09\u3092\u4f5c\u6210\u3059\u308b\u30b9\u30e9\u30a4\u30c0\u30fc\u3082\u3042\u308a\u307e\u3059\u3002\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306f\u6b21\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u3068\u304a\u308a\u3067\u3059\u3002"}),"\n",(0,i.jsx)(n.A,{src:"https://docs.juce.com/master/tutorial_midi_message_screenshot1.png",caption:"Drum pad buttons and a volume slider"}),"\n",(0,i.jsx)(s.p,{children:"\u53f3\u5074\u306e\u30d1\u30cd\u30eb\u306b\u306f\u3001\u751f\u6210\u3055\u308c\u305f MIDI \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30ea\u30b9\u30c8\u304c\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\uff08\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7 \u30f3\u306e\u8d77\u52d5\u6642\u523b\u304b\u3089\u306e\u76f8\u5bfe\u6642\u9593\uff09\u3068\u3068\u3082\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002"}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306fMIDI\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u305f\u308a\u3001\u97f3\u3092\u51fa\u3057\u305f\u308a\u305b\u305a\u3001MIDI\u30c7\u30fc\u30bf\u3092\u8868\u793a\u3059\u308b\u3060\u3051\u3067\u3059\u3002"})}),"\n",(0,i.jsx)(s.h1,{id:"the-midimessage-class",children:"The MidiMessage class"}),"\n",(0,i.jsxs)(s.p,{children:["This tutorial illustrates the code required to create some MIDI message types. It also includes some code to parse most MIDI message types. In general, the ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," class contains a range of ",(0,i.jsx)(s.code,{children:"\u9759\u7684"})," member functions for creating ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," objects (for example the ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#a24e09d2737c08842a6e4902554d2899c",title:"Creates a key-down message (using a floating-point velocity).",children:"MidiMessage::noteOn()"})," function for creating note-on messages). There are also a range of member functions for querying and accessing ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," objects (for example, the ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#a590da92c0536e23f9d3c90c99278d789",title:"Returns true if this message is a 'key-down' event.",children:"MidiMessage::isNoteOn()"})," and ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#a6a5f965e98254fb026c5a20b64edcbc1",title:"Returns the midi note number for note-on and note-off messages.",children:"MidiMessage::getNoteNumber()"})," functions)."]}),"\n",(0,i.jsx)(s.h2,{id:"creating-midimessage-objects",children:"Creating MidiMessage objects"}),"\n",(0,i.jsxs)(s.p,{children:["Have a look at the ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#pub-static-methods",children:"\u30d1\u30d6\u30ea\u30c3\u30af\u9759\u7684\u30e1\u30f3\u30d0\u30fc\u95a2\u6570"})," for the ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," class. This lists all of the functions for creating different types of MIDI message. You can also create ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," objects from the individual bytes or raw data but these ",(0,i.jsx)(s.em,{children:"\u30de\u30b9\u30c8"})," be valid MIDI messages according to the MIDI specification. (An assertion will be generated in a debug build if you create an invalid ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," object.)"]}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," objects should normally be stored as local or member variables and passed by value."]})}),"\n",(0,i.jsxs)(s.p,{children:["To create a note-on message use the ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#a24e09d2737c08842a6e4902554d2899c",title:"Creates a key-down message (using a floating-point velocity).",children:"MidiMessage::noteOn()"})," function. This needs the MIDI channel (numbered 1 .. 16), the note number (0 .. 127), and the velocity (as a ",(0,i.jsx)(s.code,{children:"uint8"})," value 0 .. 127). Alternatively, the velocity can be expressed as a ",(0,i.jsx)(s.code,{children:"\u30d5\u30ed\u30fc\u30c8"})," value which will be converted to 0 .. 127 internally (rounded to the nearest integer)."]}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsxs)(s.p,{children:["A note-on with zero velocity is actually a note-off message so note-on velocities are in the range 1 .. 127 (which makes the minimum floating-point velocity for a note-on around ",(0,i.jsx)(s.code,{children:"0.004f"}),"). There is also the ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#a8f2c46b2cf557f4e4f55174a68915587",title:"Creates a key-up message.",children:"MidiMessage::noteOff()"})," function for specifically creating note-off messages that also allows you to specify a note-off velocity (which is recognised by some synthesisers)."]})}),"\n",(0,i.jsx)(s.p,{children:"\u30c7\u30e2\u30fb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001\u30d9\u30ed\u30b7\u30c6\u30a3\u304c100\u3067\u3001\u3069\u306e\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u304b\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30ce\u30fc\u30c8\u756a\u53f7\u306e\u30ce\u30fc\u30c8\u30aa\u30f3\u30fb\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff1a"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"void setNoteNumber (int noteNumber)\n    {\n        auto message = juce::MidiMessage::noteOn (midiChannel, noteNumber, (juce::uint8) 100)\uff1b\n        message.setTimeStamp (juce::Time::getMillisecondCounterHiRes() * 0.001 - startTime)\uff1b\n        addMessageToList (message)\uff1b\n    }\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Notice that the ",(0,i.jsx)(s.code,{children:"\u30ce\u30fc\u30c8\u756a\u53f7"})," value is set by one of our buttons and gets passed to the setNoteNumber() function. We also need to cast the value ",(0,i.jsx)(s.code,{children:"100"})," to the ",(0,i.jsx)(s.code,{children:"uint8"})," type. If we don't do this then there is a compiler ambiguity regarding which of the versions of the ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#a24e09d2737c08842a6e4902554d2899c",title:"Creates a key-down message (using a floating-point velocity).",children:"MidiMessage::noteOn()"})," function should be called."]}),"\n",(0,i.jsxs)(s.p,{children:["Setting the timestamp of a ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," is optional but it's very useful for keeping track of the time that events were generated or received. The default timestamp is zero and the time units of the timestamp are not defined. In general, it is up to the application to decide what time units to use. In this simple case we are using seconds as the units by obtaining the current time using the ",(0,i.jsx)(s.a,{href:"classTime.html#a3f2fcf93d44c6b3828c82f5d4c18b0e4",title:"Returns the number of millisecs since a fixed event (usually system startup).",children:"Time::getMillisecondCounterHiRes()"})," function and multiplying by 0.001 (and subtracting the time that the application started so that this is relative to that point in time)."]}),"\n",(0,i.jsx)(s.p,{children:"\u30dc\u30ea\u30e5\u30fc\u30e0\u30fb\u30b9\u30e9\u30a4\u30c0\u30fc\u306f\u3001\u30b3\u30f3\u30c6\u30a3\u30cb\u30e5\u30a2\u30b9\u30fb\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\uff08CC\uff09\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u4f5c\u6210\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002CC7\u306f\u30dc\u30ea\u30e5\u30fc\u30e0\u30fb\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u5909\u66f4\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059\uff1a"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"volumeSlider.onValueChange = [this].\n        {\n            auto message = juce::MidiMessage::controllerEvent (midiChannel, 7, (int) volumeSlider.getValue())\uff1b\n            message.setTimeStamp (juce::Time::getMillisecondCounterHiRes() * 0.001 - startTime)\uff1b\n            addMessageToList (message)\uff1b\n        };\n"})}),"\n",(0,i.jsx)(s.h2,{id:"parsing-midimessage-objects",children:"Parsing MidiMessage objects"}),"\n",(0,i.jsxs)(s.p,{children:["Our ",(0,i.jsx)(s.code,{children:"addMessageToList()"})," function parses the timestamp and the MIDI message so that it can be displayed in the list of messages in our interface:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'void addMessageToList (const juce::MidiMessage& message)\n    {\n        auto time = message.getTimeStamp()\uff1b\n \n        auto \u6642 = ((int) (time / 3600.0)) % 24\uff1b\n        auto minutes = ((int) (time / 60.0)) % 60\uff1b\n        auto \u79d2 = ((int) time) % 60\uff1b\n        auto millis = ((int) (time * 1000.0)) % 1000\uff1b\n \n        auto timecode = juce::String::formatted ("%02d:%02d:%02d.%03d"\u3001\n                                                 \u6642\u9593\n                                                 \u5206\n                                                 \u79d2\u3001\n                                                 \u30df\u30ea)\uff1b\n \n        logMessage (timecode + " - " + getMidiMessageDescription (message))\uff1b\n    }\n'})}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"getMidiMessageDescription()"})," function actually parses the MIDI data to get a human-readable description of the message."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:'static juce::String getMidiMessageDescription (const juce::MidiMessage& m)\n    {\n        if (m.isNoteOn()) return "\u30ce\u30fc\u30c8\u30aa\u30f3" + juce::MidiMessage::getMidiNoteName (m.getNoteNumber(), true, true, 3)\uff1b\n        if (m.isNoteOff()) return "\u30ce\u30fc\u30c8\u30aa\u30d5" + juce::MidiMessage::getMidiNoteName (m.getNoteNumber(), true, true, 3)\uff1b\n        if (m.isProgramChange()) return "\u30d7\u30ed\u30b0\u30e9\u30e0\u5909\u66f4 " + juce::String (m.getProgramChangeNumber())\uff1b\n        if (m.isPitchWheel()) return "\u30d4\u30c3\u30c1\u30db\u30a4\u30fc\u30eb " + juce::String (m.getPitchWheelValue())\uff1b\n        if (m.isAftertouch()) return "\u30bf\u30c3\u30c1\u5f8c " + juce::MidiMessage::getMidiNoteName (m.getNoteNumber(), true, true, 3) + ": + juce::String (m.getAfterTouchValue())\uff1b\n        if (m.isChannelPressure()) return "\u30c1\u30e3\u30f3\u30cd\u30eb\u5727\u529b " + juce::String (m.getChannelPressureValue())\uff1b\n        if (m.isAllNotesOff()) return "\u5168\u97f3\u7b26\u30aa\u30d5"\uff1b\n        if (m.isAllSoundOff()) return "\u5168\u97f3\u30aa\u30d5"\uff1b\n        if (m.isMetaEvent()) return "\u30e1\u30bf\u30fb\u30a4\u30d9\u30f3\u30c8"\uff1b\n \n        if (m.isController())\n        {\n            juce::String name (juce::MidiMessage::getControllerName (m.getControllerNumber()))\uff1b\n \n            if (name.isEmpty())\n                name = "[" + juce::String (m.getControllerNumber()) + "]"\uff1b\n \n            return "\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9 " + name + ": " + juce::String (m.getControllerValue())\uff1b\n        }\n \n        return juce::String::toHexString (m.getRawData(), m.getRawDataSize())\uff1b\n    }\n'})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsx)(s.p,{children:'The same functionality is already available through the member function [MidiMessage::getDescription()](classMidiMessage.html#a868d95a096fad999de5ba11f9a2f6340 "Returns a human-readable description of the midi message as a string, for example "Note On C#3 Veloci..."). We do not use the ready-made implementation here but implement it ourselves to illustrate how to work with MIDI messages of different types.'})}),"\n",(0,i.jsxs)(s.p,{children:["This function attempts to parse all types of MIDI message (even though we have only looked at creating note-on and controller messages so far). Here you can see the recommended method of accessing the data in a ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," object:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:'MIDI\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30bf\u30a4\u30d7\u3092\u6c7a\u5b9a\u3059\u308b\uff08"is "\u3067\u59cb\u307e\u308b\u95a2\u6570\u306e\u3044\u305a\u308c\u304b\u3092\u4f7f\u3046\uff09\u3002'}),"\n",(0,i.jsx)(s.li,{children:"\u305d\u306e\u30bf\u30a4\u30d7\u306eMIDI\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u9069\u5207\u306a\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002"}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["We would only reach the final line of this function if the message was a system message (system exclusive, for example). You can access the raw data of any message using ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#acb371198496cdac48c2fe2a96c884913",title:"Returns a pointer to the raw midi data.",children:"MidiMessage::getRawData()"})," but generally it is easier (and more readable) to use the range of built-in functions for most purposes."]}),"\n",(0,i.jsx)(s.admonition,{type:"warning",children:(0,i.jsxs)(s.p,{children:["Using functions to access data in a ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," for messages of the wrong type will lead to errors. For example, the ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#a6a5f965e98254fb026c5a20b64edcbc1",title:"Returns the midi note number for note-on and note-off messages.",children:"MidiMessage::getNoteNumber()"})," function will return a value from any ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," object but this doesn't confirm that the message is either a note-on or note-off message. You ",(0,i.jsx)(s.em,{children:"\u30de\u30b9\u30c8"})," check first with one of the functions ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#a590da92c0536e23f9d3c90c99278d789",title:"Returns true if this message is a 'key-down' event.",children:"MidiMessage::isNoteOn()"}),", ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#af66814dee34738882ba39d8796b77be0",title:"Returns true if this message is a 'key-up' event.",children:"MidiMessage::isNoteOff()"}),", or ",(0,i.jsx)(s.a,{href:"classMidiMessage.html#a0d1c1c5927eb898dbacb832f768299bc",title:"Returns true if this message is a 'key-down' or 'key-up' event.",children:"MidiMessage::isNoteOnOrOff()"}),"."]})}),"\n",(0,i.jsxs)(s.p,{children:["Modify the ",(0,i.jsx)(s.code,{children:"getMidiMessageDescription()"})," function so that it lists the velocity of note-on messages. Check the API reference to find out which function you should use."]}),"\n",(0,i.jsx)(s.h1,{id:"the-midibuffer-class",children:"The MidiBuffer class"}),"\n",(0,i.jsxs)(s.p,{children:["One problem with our demo application is that it doesn't create note-off messages. We are just creating MIDI messages intended for percussion sounds, so this doesn't seem like a big problem. But, it's bad practice not to create note-off messages for corresponding note-on messages (with sustaining sounds it will lead to ",(0,i.jsx)(s.em,{children:"\u30b9\u30bf\u30c3\u30af"})," notes)."]}),"\n",(0,i.jsxs)(s.p,{children:["We could just add a note-off immediately following the note-on in the ",(0,i.jsx)(s.code,{children:"setNoteNumber()"})," function:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"auto message = juce::MidiMessage::noteOn (1, noteNumber, (uint8) 100)\uff1b\nmessage.setTimeStamp (juce::Time::getMillisecondCounterHiRes() * 0.001 - startTime)\uff1b\naddMessageToList (message)\uff1b\n \nauto messageOff = juce::MidiMessage::noteOff (message.getChannel(), message.getNoteNumber())\uff1b\nmessageOff.setTimeStamp (juce::Time::getMillisecondCounterHiRes() * 0.001 - startTime)\uff1b\naddMessageToList (messageOff)\uff1b\n\u5b9a\u7fa9 juce_MathsFunctions.h:40\n"})}),"\n",(0,i.jsx)(s.p,{children:"\u30ce\u30fc\u30c8\u30aa\u30d5\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\uff08\u4f8b\u3048\u3070\u30ce\u30fc\u30c8\u30aa\u30f3\u30e1\u30c3\u30bb\u30fc\u30b8\u306e0.1\u79d2\u5f8c\uff09\u3001\u3053\u308c\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30ea\u30b9\u30c8\u306b\u6295\u7a3f\u3055\u308c\u308b\u3068\u304d\u306b\u306f\u5909\u66f4\u3055\u308c\u307e\u305b\u3093\uff1a"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"auto message = juce::MidiMessage::noteOn (1, noteNumber, (uint8) 100)\uff1b\nmessage.setTimeStamp (juce::Time::getMillisecondCounterHiRes() * 0.001 - startTime)\uff1b\naddMessageToList (message)\uff1b\n \nauto messageOff = juce::MidiMessage::noteOff (message.getChannel(), message.getNoteNumber())\uff1b\nmessageOff.setTimeStamp (message.getTimeStamp() + 0.1)\uff1b\naddMessageToList (messageOff)\uff1b\n"})}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," class provides functions for iterating over buffers of MIDI messages based on their timestamps. To illustrate this we will set up a simple scheduling system where we add ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," objects with specific timestamps to a ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," object. Then we use a ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classTimer",title:"Makes repeated callbacks to a virtual method at a specified time interval.",children:"\u30bf\u30a4\u30de\u30fc"})," object that checks regularly whether any MIDI messages are due to be delivered."]}),"\n",(0,i.jsx)(s.admonition,{type:"warning",children:(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classTimer",title:"Makes repeated callbacks to a virtual method at a specified time interval.",children:"\u30bf\u30a4\u30de\u30fc"})," class is not suitable for high-precision timing. This is used to keep the example simple by keeping all function calls on the ",(0,i.jsx)(s.em,{children:"\u30e1\u30c3\u30bb\u30fc\u30b8\u30b9\u30ec\u30c3\u30c9"}),". For more robust timing you should use another thread (in most cases the audio thread is appropriate for rendering ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," objects in to audio)."]})}),"\n",(0,i.jsxs)(s.p,{children:["Add some members to our ",(0,i.jsx)(s.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," class:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"juce::MidiBuffer midiBuffer; // [1].\n    double sampleRate = 44100.0; // [2].\n    int previousSampleNumber = 0; // [3].\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["[1]: The ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," object itself."]}),"\n",(0,i.jsxs)(s.li,{children:["[2]: The ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," class uses ",(0,i.jsx)(s.em,{children:"\u30b5\u30f3\u30d7\u30eb"})," as the units for the timestamps of MIDI messages. Although we are not generating audio we need to choose something to use as the ",(0,i.jsx)(s.em,{children:"\u30b5\u30f3\u30d7\u30eb\u30ec\u30fc\u30c8"}),". We use this member to store the sample rate. (We use 44,100 since this is a common value.)"]}),"\n",(0,i.jsxs)(s.li,{children:["[3]: We need to keep track of which timestamp we have already reached within the ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"}),". We use this member to store the this timestamp in samples."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"adding-midi-messages-to-a-midibuffer-object",children:"Adding MIDI messages to a MidiBuffer object"}),"\n",(0,i.jsxs)(s.p,{children:["Instead of adding our MIDI message directly to the list of messages, we add them to our ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," object. Add this function, which calls the ",(0,i.jsx)(s.a,{href:"classMidiBuffer.html#a845368d1fa4a8b3f315e2f3508b2003a",title:"Adds an event to the buffer.",children:"MidiBuffer::addEvent()"})," function:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"void addMessageToBuffer (const juce::MidiMessage& message)\n    {\n        auto timestamp = message.getTimeStamp()\uff1b\n        auto sampleNumber = (int) (timestamp * sampleRate)\uff1b\n        midiBuffer.addEvent (message, sampleNumber)\uff1b\n    }\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Now modify the ",(0,i.jsx)(s.code,{children:"setNoteNumber()"})," function and the ",(0,i.jsx)(s.a,{href:"classSlider.html#a680d007f6a824a28a60aa05b4045e794",title:"You can assign a lambda to this callback object to have it called when the slider value is changed.",children:"\u30b9\u30e9\u30a4\u30c0\u30fc::onValueChange"})," helper object to make use of this function. This allows us to schedule MIDI message events into the future:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"void setNoteNumber (int noteNumber)\n    {\n        auto message = juce::MidiMessage::noteOn (1, noteNumber, (juce::uint8) 100)\uff1b\n        message.setTimeStamp (juce::Time::getMillisecondCounterHiRes() * 0.001 - startTime)\uff1b\n        addMessageToBuffer (message)\uff1b\n \n        auto messageOff = juce::MidiMessage::noteOff (message.getChannel(), message.getNoteNumber())\uff1b\n        messageOff.setTimeStamp (message.getTimeStamp() + 0.1)\uff1b\n        addMessageToBuffer (messageOff)\uff1b\n    }\n"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"volumeSlider.onValueChange = [this].\n        {\n            auto message = juce::MidiMessage::controllerEvent (10, 7, (int) volumeSlider.getValue())\uff1b\n            message.setTimeStamp (juce::Time::getMillisecondCounterHiRes() * 0.001 - startTime)\uff1b\n            addMessageToBuffer (message)\uff1b\n        };\n"})}),"\n",(0,i.jsx)(s.h2,{id:"iterating-over-a-midibuffer-object",children:"Iterating over a MidiBuffer object"}),"\n",(0,i.jsxs)(s.p,{children:["To read the messages from the buffer we need to implement our timer. Add the ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classTimer",title:"Makes repeated callbacks to a virtual method at a specified time interval.",children:"\u30bf\u30a4\u30de\u30fc"})," class as a base class:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"class MainContentComponent : public juce::Component\u3001\n                               private juce::Timer\n{\n"})}),"\n",(0,i.jsxs)(s.p,{children:["And implement the ",(0,i.jsx)(s.a,{href:"classTimer.html#a8adc40ca0fb4170737ba12e30481b9d8",title:"The user-defined callback routine that actually gets called periodically.",children:"\u30bf\u30a4\u30de\u30fc::\u30bf\u30a4\u30de\u30fc\u30b3\u30fc\u30eb\u30d0\u30c3\u30af()"})," function:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"void timerCallback() override\n    {\n        auto currentTime = juce::Time::getMillisecondCounterHiRes() * 0.001 - startTime\uff1b\n        auto currentSampleNumber = (int) (currentTime * sampleRate); // [4].\n \n        for (const auto metadata : midiBuffer) // [5].\n        {\n            if (metadata.samplePosition > currentSampleNumber) // [6].\n                break\uff1b\n \n            auto message = metadata.getMessage()\uff1b\n            message.setTimeStamp (metadata.samplePosition / sampleRate); // [7].\n            addMessageToList (message)\uff1b\n        }\n \n        midiBuffer.clear (previousSampleNumber, currentSampleNumber - previousSampleNumber); // [8].\n        previousSampleNumber = currentSampleNumber; // [9].\n    }\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"[4]: Calculate the current time in samples."}),"\n",(0,i.jsx)(s.li,{children:"[5]: Iterate over the messages in the buffer."}),"\n",(0,i.jsxs)(s.li,{children:["[6]: If the timestamp for the MIDI message most recently retrieved from the ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," object is in the future, then we have finished processing and we exit the ",(0,i.jsx)(s.code,{children:"while()"})," loop."]}),"\n",(0,i.jsxs)(s.li,{children:["[7]: The timestamps of the ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," objects obtained will have the timestamps based on sample numbers. Let's reset this to our seconds-based timestamp system so that it works with our ",(0,i.jsx)(s.code,{children:"addMessageToList()"})," function without having to modify it."]}),"\n",(0,i.jsxs)(s.li,{children:["[8]: The ",(0,i.jsx)(s.a,{href:"classMidiBuffer.html#a220d909954450942ecd87a945a82e7aa",title:"Removes all events from the buffer.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1::\u30af\u30ea\u30a2()"})," function clears MIDI messages from the buffer that have timestamps within a certain range. We use this to remove messages that we have just processed."]}),"\n",(0,i.jsxs)(s.li,{children:["[9]: Keep track of the time that this function executed for use the next time that the ",(0,i.jsx)(s.code,{children:"timerCallback()"})," function is called."]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["Finally, we need to start the timer in our ",(0,i.jsx)(s.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," constructor:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"setSize (800, 300)\uff1b\n        startTimer (1)\uff1b\n    }\n"})}),"\n",(0,i.jsx)(s.admonition,{type:"note",children:(0,i.jsxs)(s.p,{children:["The code for these modifications can be found in the ",(0,i.jsx)(s.code,{children:"MidiMessageTutorial_02.h"})," file of the demo project."]})}),"\n",(0,i.jsxs)(s.p,{children:["Add buttons for the crash cymbal (note number 49) and ride cymbal (note number 51). Add a slider for panning control (CC10). Space has been left for you to add these three components in the ",(0,i.jsx)(s.code,{children:"\u30ea\u30b5\u30a4\u30ba"})," function."]}),"\n",(0,i.jsx)(s.h1,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,i.jsxs)(s.p,{children:["This tutorial has introduced the ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," class and the ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," class. After reading this tutorial you should be able to:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Create ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," objects of specific types \u2014 note-on, note-off, continuous controller (control change), and so on."]}),"\n",(0,i.jsxs)(s.li,{children:["Parse a ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"})," object to discover its type and obtain useful data from it."]}),"\n",(0,i.jsxs)(s.li,{children:["Store MIDI messages in a ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," object."]}),"\n",(0,i.jsxs)(s.li,{children:["Iterate over MIDI messages in a ",(0,i.jsx)(s.a,{href:"https://docs.juce.com/master/classMidiBuffer",title:"Holds a sequence of time-stamped midi events.",children:"\u30df\u30c7\u30a3\u30d0\u30c3\u30d5\u30a1"})," object based on their timestamps."]}),"\n"]}),"\n",(0,i.jsx)(s.h1,{id:"\u95a2\u9023\u9805\u76ee",children:"\u95a2\u9023\u9805\u76ee"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../tutorial_audio_device_manager/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebAudioDeviceManager\u30af\u30e9\u30b9"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../tutorial_handling_midi_events/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\uff1aMIDI\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406"})}),"\n",(0,i.jsx)(s.li,{children:(0,i.jsx)(s.a,{href:"../tutorial_synth_using_midi_input/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebMIDI\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b"})}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},3449:(e,s,t)=>{t.d(s,{A:()=>a});var i=t(4848);function a(e){let{src:s,caption:t,alt:a,width:n,height:r}=e;return(0,i.jsxs)("figure",{children:[(0,i.jsx)("img",{src:s,alt:a||t,width:n,height:r}),(0,i.jsx)("figcaption",{children:(0,i.jsx)("b",{children:t})})]})}},6378:(e,s,t)=>{t.d(s,{A:()=>a});var i=t(4848);function a(e){let{path:s}=e;return(0,i.jsx)("p",{children:(0,i.jsx)("a",{href:`https://docs.juce.com/master/${s}.html`,children:"\ud83d\udcda Source Page"})})}},8453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>o});var i=t(6540);const a={},n=i.createContext(a);function r(e){const s=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(n.Provider,{value:s},e.children)}}}]);