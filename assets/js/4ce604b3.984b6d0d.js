"use strict";(self.webpackChunkjuce_tutorial_ja=self.webpackChunkjuce_tutorial_ja||[]).push([[8212],{7777:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var i=n(4848),r=n(8453),o=n(3449);n(6378);const s={title:"\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db",sidebar_position:5},a="\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db",l={id:"dsp/tutorial_simple_fft",title:"\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db",description:"DSP\u30e2\u30b8\u30e5\u30fc\u30eb\u306eFFT\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066\u3001\u5165\u529b\u3055\u308c\u305f\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30fc\u30bf\u3092\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u8868\u793a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3092\u4f7f\u7528\u3059\u308b\u5229\u70b9\u3092\u7406\u89e3\u3057\u307e\u3059\u3002",source:"@site/docs/dsp/tutorial_simple_fft.mdx",sourceDirName:"dsp",slug:"/dsp/tutorial_simple_fft",permalink:"/juce-tutorial-ja/dsp/tutorial_simple_fft",draft:!1,unlisted:!1,editUrl:"https://github.com/m1m0zzz/juce-tutorial-ja/tree/main/docs/dsp/tutorial_simple_fft.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"SIMDRegister\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u305f\u6700\u9069\u5316",permalink:"/juce-tutorial-ja/dsp/tutorial_simd_register_optimisation"},next:{title:"\u4fe1\u53f7\u306e\u5468\u6ce2\u6570\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u8996\u899a\u5316",permalink:"/juce-tutorial-ja/dsp/tutorial_spectrum_analyser"}},c={},d=[{value:"\u306f\u3058\u3081\u308b",id:"\u306f\u3058\u3081\u308b",level:2},{value:"FFT Initialisation",id:"fft-initialisation",level:2},{value:"Displaying the Spectrogram",id:"displaying-the-spectrogram",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db"}),"\n",(0,i.jsx)(t.p,{children:"DSP\u30e2\u30b8\u30e5\u30fc\u30eb\u306eFFT\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066\u3001\u5165\u529b\u3055\u308c\u305f\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30fc\u30bf\u3092\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u8868\u793a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3092\u4f7f\u7528\u3059\u308b\u5229\u70b9\u3092\u7406\u89e3\u3057\u307e\u3059\u3002"}),"\n",(0,i.jsx)(t.p,{children:"\u30ec\u30d9\u30eb\uff1a\u4e2d\u7d1a"}),"\n",(0,i.jsx)(t.p,{children:"\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\uff1aWindows, macOS, Linux"}),"\n",(0,i.jsxs)(t.p,{children:["\u30af\u30e9\u30b9\uff1a ",(0,i.jsx)(t.a,{href:"https://docs.juce.com/master/classdsp_1_1FFT",title:"Performs a fast fourier transform.",children:"dsp::FFT"}),", ",(0,i.jsx)(t.a,{href:"https://docs.juce.com/master/classImage",title:"Holds a fixed-size bitmap.",children:"\u753b\u50cf"}),", ",(0,i.jsx)(t.a,{href:"https://docs.juce.com/master/classColour",title:"Represents a colour, also including a transparency value.",children:"\u30ab\u30e9\u30fc"}),", ",(0,i.jsx)(t.a,{href:"https://docs.juce.com/master/classFloatVectorOperations",title:"A collection of simple vector operations on arrays of floating point numbers, accelerated with SIMD i...",children:"FloatVectorOperations"})]}),"\n",(0,i.jsx)(t.h2,{id:"\u306f\u3058\u3081\u308b",children:"\u306f\u3058\u3081\u308b"}),"\n",(0,i.jsxs)(t.p,{children:["Download the demo project for this tutorial here: ",(0,i.jsx)(t.a,{href:"/tutorials/PIPs/SimpleFFTTutorial.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,i.jsx)(t.a,{href:"/tutorials/ZIPs/SimpleFFTTutorial.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"\u304a\u4f7f\u3044\u306e\u30aa\u30da\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0\u304c\u3001\u30de\u30a4\u30af\u3078\u306e\u30a2\u30af\u30bb\u30b9\u8a31\u53ef\u3092\u8981\u6c42\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\uff08\u73fe\u5728\u3001iOS\u3001Android\u3001macOS Mojave\uff09\u3001Projucer\u306e\u95a2\u9023\u3059\u308b\u30a8\u30af\u30b9\u30dd\u30fc\u30bf\u30fc\u306e\u4e0b\u306b\u5bfe\u5fdc\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u518d\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002"})}),"\n",(0,i.jsxs)(t.p,{children:["If you need help with this step, see ",(0,i.jsx)(t.a,{href:"../tutorial_new_projucer_project/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebProjucer\u30d1\u30fc\u30c81\uff1aProjucer\u3092\u59cb\u3081\u308b"}),"."]}),"\n",(0,i.jsx)(t.h1,{id:"the-demo-project",children:"The demo project"}),"\n",(0,i.jsx)(t.p,{children:"\u5b8c\u6210\u3059\u308b\u3068\u3001\u3053\u306e\u30c7\u30e2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001\u5165\u529b\u3055\u308c\u305f\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30fc\u30bf\u3092\u3001\u6642\u9593\uff08x\u8ef8\uff09\u3001\u5468\u6ce2\u6570\uff08y\u8ef8\uff09\u3001\u632f\u5e45\uff08\u8272\uff09\u306e3\u6b21\u5143\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u8868\u793a\u3057\u307e\u3059\u3002\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u308b\u5024\u306f1\u79d2\u9593\u306b60\u56de\u66f4\u65b0\u3055\u308c\u3001\u3069\u306e\u6642\u9593\u67a0\u3067\u3082\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(o.A,{src:"https://docs.juce.com/master/tutorial_simple_fft_screenshot1.png",caption:"The demo project window"}),":::note"]}),"\n",(0,i.jsxs)(t.p,{children:["The code presented here is broadly similar to the ",(0,i.jsx)(t.strong,{children:"\u30b7\u30f3\u30d7\u30eb\u306aFFTE\u306e\u4f8b"})," from the JUCE Examples."]}),"\n",(0,i.jsx)(t.p,{children:":::"}),"\n",(0,i.jsx)(t.h1,{id:"the-fast-fourier-transform",children:"The Fast Fourier Transform"}),"\n",(0,i.jsx)(t.p,{children:"\u6642\u9593\u9818\u57df\u307e\u305f\u306f\u7a7a\u9593\u9818\u57df\u306e\u4fe1\u53f7\u306f\u3001\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u3068\u547c\u3070\u308c\u308b\u5909\u63db\u5f0f\u3092\u7528\u3044\u3066\u5468\u6ce2\u6570\u9818\u57df\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u5909\u63db\u95a2\u6570\u306e\u4e00\u822c\u7684\u306a\u52b9\u7387\u7684\u5b9f\u88c5\u306f\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db\uff08FFT\uff09\u3067\u3001JUCE DSP\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u542b\u307e\u308c\u3066\u304a\u308a\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002"}),"\n",(0,i.jsx)(t.p,{children:"FFT\u306f\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u4fe1\u53f7\u3092\u5468\u6ce2\u6570\u306b\u5206\u89e3\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u5468\u6ce2\u6570\u306e\u5927\u304d\u3055\u3068\u4f4d\u76f8\u60c5\u5831\u3092\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u9006\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u4fe1\u53f7\u3092\u5143\u306e\u30c9\u30e1\u30a4\u30f3\u306b\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306a\u3069\u500b\u3005\u306e\u5468\u6ce2\u6570\u6210\u5206\u3092\u51e6\u7406\u3059\u308b\u306e\u306b\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002"}),"\n",(0,i.jsx)(t.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u5b9f\u969b\u306e\u51fa\u529b\u51e6\u7406\u3092\u884c\u308f\u305a\u306b\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30fc\u30bf\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3060\u3051\u3092\u6271\u3044\u307e\u3059\u306e\u3067\u3001\u9006FFT\u3067\u306f\u306a\u304f\u9806FFT\u306b\u7126\u70b9\u3092\u5f53\u3066\u307e\u3059\u3002"}),"\n",(0,i.jsx)(t.h1,{id:"processing-audio-data",children:"Processing Audio Data"}),"\n",(0,i.jsx)(t.p,{children:"\u73fe\u5728\u3001\u79c1\u305f\u3061\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u5165\u529b\u3055\u308c\u308b\u30aa\u30fc\u30c7\u30a3\u30aa\u4fe1\u53f7\u3092\u8868\u793a\u3082\u51e6\u7406\u3082\u3057\u306a\u3044\u306e\u3067\u3001FFT\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002"}),"\n",(0,i.jsx)(t.h2,{id:"fft-initialisation",children:"FFT Initialisation"}),"\n",(0,i.jsxs)(t.p,{children:["In the ",(0,i.jsx)(t.code,{children:"\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u30fb\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," class, start by defining some useful constants for the FFT implementation:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"static constexpr auto fftOrder = 10; // [1\uff3d\n    static constexpr auto fftSize = 1 << fftOrder; // [2].\n \nprivate\uff1a\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"[1]: The FFT order designates the size of the FFT window and the number of points on which it will operate corresponds to 2 to the power of the order. In this case, let's use an order of 10 which will produce an FFT with 2 ^ 10 = 1024 points."}),"\n",(0,i.jsx)(t.li,{children:"[2]: To calculate the corresponding FFT size, we use the left bit shift operator which produces 1024 as binary number 10000000000."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"\u6b21\u306b\u3001FFT\u5b9f\u88c5\u306b\u5fc5\u8981\u306a\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30fb\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5ba3\u8a00\u3059\u308b\uff1a"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"    juce::dsp::FFT forwardFFT;                          // [3]\n    juce::Image spectrogramImage;\n \n    std::array fifo;                    // [4]\n    std::arrayfftData; // [5\uff3d\n    int fifoIndex = 0; // [6].\n    bool nextFFTBlockReady = false; // [7].\n \n    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SpectrogramComponent)\n};\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["[3]: Declare a ",(0,i.jsx)(t.a,{href:"https://docs.juce.com/master/classdsp_1_1FFT",title:"Performs a fast fourier transform.",children:"dsp::FFT"})," object to perform the forward FFT on."]}),"\n",(0,i.jsx)(t.li,{children:"[4]: The fifo float array of size 1024 will contain our incoming audio data in samples."}),"\n",(0,i.jsx)(t.li,{children:"[5]: The fftData float array of size 2048 will contain the results of our FFT calculations."}),"\n",(0,i.jsx)(t.li,{children:"[6]: This temporary index keeps count of the amount of samples in the fifo."}),"\n",(0,i.jsx)(t.li,{children:"[7]: This temporary boolean tells us whether the next FFT block is ready to be rendered."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"\u3067\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30e1\u30f3\u30d0\u521d\u671f\u5316\u30ea\u30b9\u30c8\u3067\u3053\u308c\u3089\u306e\u5909\u6570\u3092\u521d\u671f\u5316\u3057\u3066\u307f\u3088\u3046\uff1a"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8()\n        : forwardFFT (fftOrder)\u3001\n          spectrogramImage (juce::Image::RGB, 512, 512, true)\n    {\n"})}),"\n",(0,i.jsx)(t.p,{children:"FFT\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u3053\u306e\u6642\u70b9\u3067\u6b63\u3057\u3044\u6b21\u6570\u3067\u660e\u793a\u7684\u306b\u521d\u671f\u5316\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002"}),"\n",(0,i.jsxs)(t.p,{children:["In the overriden ",(0,i.jsx)(t.code,{children:"getNextAudioBlock()"})," function, we simply push all the samples contained in our current audio buffer block to the fifo to be processed at a later time:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"void getNextAudioBlock (const juce::AudioSourceChannelInfo& bufferToFill) override\n    {\n        if (bufferToFill.buffer->getNumChannels() > 0)\n        {\n            auto* channelData = bufferToFill.buffer->getReadPointer (0, bufferToFill.startSample)\uff1b\n \n            for (auto i = 0; i < bufferToFill.numSamples; ++i)\n                pushNextSampleIntoFifo (channelData[i])\uff1b\n        }\n    }\n"})}),"\n",(0,i.jsxs)(t.p,{children:["To push the sample into the fifo, implement the ",(0,i.jsx)(t.code,{children:"pushNextSampleIntoFifo()"})," function as described below:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"void pushNextSampleIntoFifo (float sample) noexcept\n    {\n        // fifo\u306b\u5341\u5206\u306a\u30c7\u30fc\u30bf\u304c\u3042\u308b\u5834\u5408\u3001\u6b21\u306e\u884c\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u30d5\u30e9\u30b0\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n        // \u6b21\u306e\u884c\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002\n        if (fifoIndex == fftSize) // [8].\n        {\n            if (! nextFFTBlockReady) // [9] { if (fifoIndex == fftSize)\n            {\n                std::fill (fftData.begin(), fftData.end(), 0.0f)\uff1b\n                std::copy (fifo.begin(), fifo.end(), fftData.begin())\uff1b\n                nextFFTBlockReady = true\uff1b\n            }\n \n            fifoIndex = 0\uff1b\n        }\n \n        fifo[(size_t) fifoIndex++] = sample; // [9].\n    }\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"[8]: If the fifo contains enough data in this case 1024 samples, we are ready to copy the data to the fftData array for it to be processed by the FFT. We also set a flag to say that the next line should now be rendered and always reset the index to 0 to start filling the fifo again."}),"\n",(0,i.jsx)(t.li,{children:"[9]: Every time this function gets called, a sample is stored in the fifo and the index is incremented."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"\u3053\u308c\u3067FIFO\u30c7\u30fc\u30bf\u304cFFT\u5165\u529b\u914d\u5217\u306e\u524d\u534a\u3092\u5360\u3081\u3001\u51e6\u7406\u3068\u8868\u793a\u306e\u6e96\u5099\u304c\u6574\u3063\u305f\u3002"}),"\n",(0,i.jsx)(t.h2,{id:"displaying-the-spectrogram",children:"Displaying the Spectrogram"}),"\n",(0,i.jsxs)(t.p,{children:["In the ",(0,i.jsx)(t.code,{children:"DrawNextLineOfSpectrogram()"})," function, insert the pixel drawing implementation as explained below:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"void drawNextLineOfSpectrogram()\n    {\n        auto rightHandEdge = spectrogramImage.getWidth() - 1\uff1b\n        auto imageHeight = spectrogramImage.getHeight()\uff1b\n \n        // \u307e\u305a\u3001\u753b\u50cf\u30921\u30d4\u30af\u30bb\u30eb\u5de6\u306b\u30b7\u30e3\u30c3\u30d5\u30eb\u3059\u308b\u3002\n        spectrogramImage.moveImageSection (0, 0, 1, 0, rightHandEdge, imageHeight); // [1].\n \n        // \u6b21\u306bFFT\u30c7\u30fc\u30bf\u3092\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u3002\n        forwardFFT.performFrequencyOnlyForwardTransform (fftData.data()); // [2].\n \n        // \u751f\u6210\u3055\u308c\u308b\u5024\u306e\u7bc4\u56f2\u3092\u6c42\u3081\u3001\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u306e\u30b9\u30b1\u30fc\u30eb\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\n        // \u7d30\u90e8\u3092\u306f\u3063\u304d\u308a\u3068\u8868\u793a\u3059\u308b\n        auto maxLevel = juce::FloatVectorOperations::findMinAndMax (fftData.data(), fftSize / 2); // [3].\n \n        for (auto y = 1; y < imageHeight; ++y) // [4].\n        {\n            auto skewedProportionY = 1.0f - std::exp (std::log ((float) y / (float) imageHeight) * 0.2f)\uff1b\n            auto fftDataIndex = (size_t) juce::jlimit (0, fftSize / 2, (int) (skewedProportionY * fftSize / 2))\uff1b\n            auto level = juce::jmap (fftData[fftDataIndex], 0.0f, juce::jmax (maxLevel.getEnd(), 1e-5f), 0.0f, 1.0f)\uff1b\n \n            spectrogramImage.setPixelAt (rightHandEdge, y, juce::Colour::fromHSV (level, 1.0f, level, 1.0f)); // [5].\n        }\n    }\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["[1]: First, shuffle the image leftwards by 1 pixel using the ",(0,i.jsx)(t.code,{children:"\u753b\u50cf\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u79fb\u52d5"})," function on the ",(0,i.jsx)(t.a,{href:"https://docs.juce.com/master/classImage",title:"Holds a fixed-size bitmap.",children:"\u753b\u50cf"})," object. Specify the image section as the whole width minus one pixel and the whole height."]}),"\n",(0,i.jsxs)(t.li,{children:["[2]: Then, render the FFT data using the ",(0,i.jsx)(t.code,{children:"performFrequencyOnlyForwardTransform()"})," function on the FFT object with the fftData array as an argument."]}),"\n",(0,i.jsx)(t.li,{children:"[3]: Find the range of values produced, so that we can scale our rendering to show up the detail clearly. We can do so using the FloatVectorOperations::findMinAndMax() function."}),"\n",(0,i.jsx)(t.li,{children:"[4]: Now in the for loop for every pixel in the spectrogram height, calculate the level proportionally to the sample set. To do this, we first need to skew the y-axis to use a logarithmic scale to better represent our frequencies. We can then feed this scaling factor to retrieve the correct array index and use the amplitude value to map it to a range between 0.0 .. 1.0."}),"\n",(0,i.jsx)(t.li,{children:"[5]: Finally set the appropriate pixel with the correct colour to display the FFT data."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["As a final step, update the spectrogram using the timer callback function by calling the ",(0,i.jsx)(t.code,{children:"DrawNextLineOfSpectrogram()"})," only when the next FFT block is ready, reset the flag and update the GUI using the ",(0,i.jsx)(t.code,{children:"\u518d\u5857\u88c5()"})," function:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"void timerCallback() override\n    {\n        if (nextFFTBlockReady)\n        {\n            drawNextLineOfSpectrogram()\uff1b\n            nextFFTBlockReady = false\uff1b\n            repaint()\uff1b\n        }\n    }\n"})}),"\n",(0,i.jsx)(t.p,{children:"FFT\u306e\u5206\u89e3\u80fd\u3092\u4e0a\u3052\u3001\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u306e\u66f4\u65b0\u30ec\u30fc\u30c8\u3092\u5909\u3048\u3066\u307f\u308b\u3002"}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["The source code for this modified version of the code can be found in the ",(0,i.jsx)(t.code,{children:"\u30b7\u30f3\u30d7\u30ebFFTT\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb_02.h"})," file of the demo project."]})}),"\n",(0,i.jsx)(t.h1,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,i.jsx)(t.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001FFT \u95a2\u6570\u3092\u4f7f\u3063\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30fc\u30bf\u3092\u30b9\u30da\u30af\u30c8\u30ed\u30b0\u30e9\u30e0\u3067\u8868\u793a\u3059\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u7279\u306b"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db\u95a2\u6570\u306e\u57fa\u790e\u3092\u5b66\u3076\u3002"}),"\n",(0,i.jsx)(t.li,{children:"FIFO\u3092\u4f7f\u3063\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306b\u51e6\u7406\u3002"}),"\n",(0,i.jsxs)(t.li,{children:["Displayed the data in an ",(0,i.jsx)(t.a,{href:"https://docs.juce.com/master/classImage",title:"Holds a fixed-size bitmap.",children:"\u753b\u50cf"})," object pixel by pixel."]}),"\n"]}),"\n",(0,i.jsx)(t.h1,{id:"\u95a2\u9023\u9805\u76ee",children:"\u95a2\u9023\u9805\u76ee"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"../tutorial_audio_thumbnail/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u6ce2\u5f62\u3092\u63cf\u304f"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"../tutorial_playing_sound_files/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u30d7\u30ec\u30fc\u30e4\u30fc\u306e\u69cb\u7bc9"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"../tutorial_processing_audio_input/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u5165\u529b\u3092\u51e6\u7406\u3059\u308b"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"../tutorial_dsp_introduction/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebDSP\u5165\u9580"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"../tutorial_spectrum_analyser/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u4fe1\u53f7\u306e\u5468\u6ce2\u6570\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u53ef\u8996\u5316\u3059\u308b"})}),"\n"]})]})}function f(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},3449:(e,t,n)=>{n.d(t,{A:()=>r});var i=n(4848);function r(e){let{src:t,caption:n,alt:r,width:o,height:s}=e;return(0,i.jsxs)("figure",{children:[(0,i.jsx)("img",{src:t,alt:r||n,width:o,height:s}),(0,i.jsx)("figcaption",{children:(0,i.jsx)("b",{children:n})})]})}},6378:(e,t,n)=>{n.d(t,{A:()=>r});var i=n(4848);function r(e){let{path:t}=e;return(0,i.jsx)("p",{children:(0,i.jsx)("a",{href:`https://docs.juce.com/master/${t}.html`,children:"\ud83d\udcda Source Page"})})}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(6540);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);