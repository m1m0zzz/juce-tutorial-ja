"use strict";(self.webpackChunkjuce_tutorial_ja=self.webpackChunkjuce_tutorial_ja||[]).push([[8454],{8959:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>c,toc:()=>l});var s=i(4848),n=i(8453),a=i(3449);i(6378);const d={title:"MIDI\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406",sidebar_position:2},o="\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\uff1aMIDI\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406",c={id:"midi/tutorial_handling_midi_events",title:"MIDI\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406",description:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001MIDI\u5165\u529b\u30a4\u30d9\u30f3\u30c8\u306e\u6271\u3044\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u5916\u90e8\u30bd\u30fc\u30b9\u304b\u3089MIDI\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u306b\u52a0\u3048\u3066\u3001\u30aa\u30f3\u30b9\u30af\u30ea\u30fc\u30f3\u30ad\u30fc\u30dc\u30fc\u30c9\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002",source:"@site/docs/midi/tutorial_handling_midi_events.mdx",sourceDirName:"midi",slug:"/midi/tutorial_handling_midi_events",permalink:"/juce-tutorial-ja/midi/tutorial_handling_midi_events",draft:!1,unlisted:!1,editUrl:"https://github.com/m1m0zzz/juce-tutorial-ja/tree/main/docs/midi/tutorial_handling_midi_events.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"MIDI\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"MIDI\u30c7\u30fc\u30bf\u306e\u4f5c\u6210",permalink:"/juce-tutorial-ja/midi/tutorial_midi_message"},next:{title:"\u30de\u30eb\u30c1\u30fb\u30dd\u30ea\u30d5\u30a9\u30cb\u30c3\u30af\u30fb\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b",permalink:"/juce-tutorial-ja/midi/tutorial_mpe_introduction"}},r={},l=[{value:"\u306f\u3058\u3081\u308b",id:"\u306f\u3058\u3081\u308b",level:2},{value:"MIDI input list",id:"midi-input-list",level:2},{value:"Handling external MIDI input",id:"handling-external-midi-input",level:2},{value:"The MIDI keyboard state and component",id:"the-midi-keyboard-state-and-component",level:2},{value:"Posting messages to the list",id:"posting-messages-to-the-list",level:2},{value:"Displaying the messages",id:"displaying-the-messages",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebmidi\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\uff1aMIDI\u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406"})}),"\n",(0,s.jsx)(t.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001MIDI\u5165\u529b\u30a4\u30d9\u30f3\u30c8\u306e\u6271\u3044\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u5916\u90e8\u30bd\u30fc\u30b9\u304b\u3089MIDI\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3053\u3068\u306b\u52a0\u3048\u3066\u3001\u30aa\u30f3\u30b9\u30af\u30ea\u30fc\u30f3\u30ad\u30fc\u30dc\u30fc\u30c9\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002"}),"\n",(0,s.jsx)(t.p,{children:"\u30ec\u30d9\u30eb\uff1a\u4e2d\u7d1a"}),"\n",(0,s.jsx)(t.p,{children:"\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\uff1aWindows, macOS, Linux"}),"\n",(0,s.jsxs)(t.p,{children:["\u30af\u30e9\u30b9\uff1a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classAudioDeviceManager",title:"Manages the state of some audio and midi i/o devices.",children:"\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30d0\u30a4\u30b9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiMessage",title:"Encapsulates a MIDI message.",children:"\u30df\u30c7\u30a3\u30e1\u30c3\u30bb\u30fc\u30b8"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiInputCallback",title:"Receives incoming messages from a physical MIDI input device.",children:"MidiInputCallback"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classComboBox",title:"A component that lets the user choose from a drop-down list of choices.",children:"\u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardComponent",title:"A component that displays a piano keyboard, whose notes can be clicked on.",children:"MidiKeyboardComponent"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardState",title:"Represents a piano keyboard, keeping track of which keys are currently pressed.",children:"\u30df\u30c7\u30a3\u30ad\u30fc\u30dc\u30fc\u30c9\u30b9\u30c6\u30fc\u30c8"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classCallbackMessage",title:"A message that invokes a callback method when it gets delivered.",children:"\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30e1\u30c3\u30bb\u30fc\u30b8"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classScopedValueSetter",title:"Helper class providing an RAII-based mechanism for temporarily setting and then re-setting a value.",children:"\u30b9\u30b3\u30fc\u30d7\u5024\u30bb\u30c3\u30bf\u30fc"})]}),"\n",(0,s.jsx)(t.h2,{id:"\u306f\u3058\u3081\u308b",children:"\u306f\u3058\u3081\u308b"}),"\n",(0,s.jsxs)(t.p,{children:["Download the demo project for this tutorial here: ",(0,s.jsx)(t.a,{href:"/tutorials/PIPs/HandlingMidiEventsTutorial.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,s.jsx)(t.a,{href:"/tutorials/ZIPs/HandlingMidiEventsTutorial.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,s.jsxs)(t.p,{children:["If you need help with this step, see ",(0,s.jsx)(t.a,{href:"../tutorial_new_projucer_project/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebProjucer\u30d1\u30fc\u30c81\uff1aProjucer\u3092\u59cb\u3081\u308b"}),"."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306b\u5916\u90e8MIDI\u30bd\u30fc\u30b9\u3092\u63a5\u7d9a\u3059\u308b\u306e\u304c\u7406\u60f3\u7684\u3067\u3059\u3002\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u3042\u308b\u7a2e\u306e\u30d0\u30fc\u30c1\u30e3\u30ebMIDI\u97f3\u6e90\uff08\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u4e0a\u306b\u30d0\u30fc\u30c1\u30e3\u30ebMIDI\u30dd\u30fc\u30c8\u3092\u4f5c\u308b\u3082\u306e\uff09\u304c\u3042\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002"})}),"\n",(0,s.jsx)(t.h1,{id:"the-demo-project",children:"The demo project"}),"\n",(0,s.jsx)(t.p,{children:"\u3053\u306e\u30c7\u30e2\u30fb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001\u753b\u9762\u4e0a\u306bMIDI\u30ad\u30fc\u30dc\u30fc\u30c9\u304c\u8868\u793a\u3055\u308c\u3001\u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9\u3092\u4f7f\u3063\u3066\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30fb\u30c7\u30d0\u30a4\u30b9\u306eMIDI\u5165\u529b\u30921\u3064\u9078\u629e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30bd\u30fc\u30b9\u304b\u3089\u53d7\u4fe1\u3057\u305f MIDI \u30a4\u30d9\u30f3\u30c8\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u4e0b\u90e8\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u6b21\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306b\u793a\u3055\u308c\u3066\u3044\u307e\u3059\uff1a"}),"\n",(0,s.jsx)(a.A,{src:"https://docs.juce.com/master/tutorial_handling_midi_events_screenshot1.png",caption:"The application window"}),"\n",(0,s.jsx)(t.h1,{id:"midi-input",children:"MIDI input"}),"\n",(0,s.jsxs)(t.p,{children:["This tutorial demonstrates how to handle MIDI input in a basic application. JUCE makes it easy to discover the list of connected hardware MIDI interfaces. It also provides the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardComponent",title:"A component that displays a piano keyboard, whose notes can be clicked on.",children:"MidiKeyboardComponent"})," class that allows you to display an on-screen keyboard. First, let's look at the member variables in our ",(0,s.jsx)(t.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," class:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"juce::AudioDeviceManager deviceManager; // [1].\n    juce::ComboBox midiInputList; // [2].\n    juce::Label midiInputListLabel\uff1b\n    int lastInputIndex = 0; // [3] \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n    bool isAddingFromMidiInput = false; // [4].\n \n    juce::MidiKeyboardState keyboardState; // [5] \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n    juce::MidiKeyboardComponent keyboardComponent; // [6] \u30ad\u30fc\u30dc\u30fc\u30c9\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n \n    juce::TextEditor midiMessagesBox\uff1b\n    double startTime\uff1b\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["[1]: We use the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classAudioDeviceManager",title:"Manages the state of some audio and midi i/o devices.",children:"\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30d0\u30a4\u30b9\u30de\u30cd\u30fc\u30b8\u30e3\u30fc"})," class to find which MIDI input devices are enabled."]}),"\n",(0,s.jsx)(t.li,{children:"[2]: We display the names of the MIDI input devices in this combo-box for the user to select."}),"\n",(0,s.jsx)(t.li,{children:"[3]: This is used to de-register a previously selected MIDI input when the user selects a different input."}),"\n",(0,s.jsx)(t.li,{children:"[4]: This flag is used to indicate that MIDI data is arriving from an external source, rather than mouse-clicks on the on-screen keyboard."}),"\n",(0,s.jsxs)(t.li,{children:["[5]: The ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardState",title:"Represents a piano keyboard, keeping track of which keys are currently pressed.",children:"\u30df\u30c7\u30a3\u30ad\u30fc\u30dc\u30fc\u30c9\u30b9\u30c6\u30fc\u30c8"})," class keeps track of which MIDI keys are currently held down."]}),"\n",(0,s.jsx)(t.li,{children:"[6]: This is the on-screen keyboard component."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In the ",(0,s.jsx)(t.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," constructor we initialise [3], [4], and [6]. We also take a note of the application start time so we can display the MIDI data timestamps relative to this."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"MainContentComponent()\n      : keyboardComponent (keyboardState, juce::MidiKeyboardComponent::horizontalKeyboard)\u3001\n        startTime (juce::Time::getMillisecondCounterHiRes() * 0.001)\n    {\n"})}),"\n",(0,s.jsxs)(t.p,{children:["We must pass a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardState",title:"Represents a piano keyboard, keeping track of which keys are currently pressed.",children:"\u30df\u30c7\u30a3\u30ad\u30fc\u30dc\u30fc\u30c9\u30b9\u30c6\u30fc\u30c8"})," object to initialise the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardComponent",title:"A component that displays a piano keyboard, whose notes can be clicked on.",children:"MidiKeyboardComponent"})," object. And, since these are statically allocated objects the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardState",title:"Represents a piano keyboard, keeping track of which keys are currently pressed.",children:"\u30df\u30c7\u30a3\u30ad\u30fc\u30dc\u30fc\u30c9\u30b9\u30c6\u30fc\u30c8"})," must be listed first in our member variables."]}),"\n",(0,s.jsx)(t.h2,{id:"midi-input-list",children:"MIDI input list"}),"\n",(0,s.jsxs)(t.p,{children:["The combo-box containing the list of MIDI inputs is populated by getting the list of MIDI inputs connected to the computer from the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiInput",title:"Represents a midi input device.",children:"\u30df\u30c7\u30a3\u5165\u529b"})," class using the MidiInput::getDevices() function:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'addAndMakeVisible (midiInputList)\uff1b\n        midiInputList.setTextWhenNoChoicesAvailable ("No MIDI Inputs Enabled")\uff1b\n        auto midiInputs = juce::MidiInput::getAvailableDevices()\uff1b\n \n        juce::StringArray midiInputNames\uff1b\n \n        for (auto input : midiInputs)\n            midiInputNames.add (input.name)\uff1b\n \n        midiInputList.addItemList (midiInputNames, 1)\uff1b\n        midiInputList.onChange = [this] { setMidiInput (midiInputList.getSelectedItemIndex()); }\uff1b\n \n        // \u6700\u521d\u306b\u6709\u52b9\u5316\u3055\u308c\u305f\u30c7\u30d0\u30a4\u30b9\u3092\u898b\u3064\u3051\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u305d\u308c\u3092\u4f7f\u3046\n        for (auto input : midiInputs)\n        {\n            if (deviceManager.isMidiInputDeviceEnabled (input.identifier))\n            {\n                setMidiInput (midiInputs.indexOf (input))\uff1b\n                break\uff1b\n            }\n        }\n \n        // \u6709\u52b9\u306a\u30c7\u30d0\u30a4\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u30ea\u30b9\u30c8\u306e\u6700\u521d\u306e\u3082\u306e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n        if (midiInputList.getSelectedId() == 0)\n            setMidiInput (0)\uff1b\n'})}),"\n",(0,s.jsxs)(t.p,{children:["If the user changes the selected MIDI input then the lambda function assigned to the ",(0,s.jsx)(t.a,{href:"classComboBox.html#a9cf2e20990541b9fbb539cd4a8e0ac4e",title:"You can assign a lambda to this callback object to have it called when the selected ID is changed.",children:"\u30b3\u30f3\u30dc\u30dc\u30c3\u30af\u30b9::onChange"})," helper object will be called:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"midiInputList.onChange = [this] { setMidiInput (midiInputList.getSelectedItemIndex()); }\uff1b\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"setMidiInput()"})," function makes our application start listening to the selected device. It also enables the device if it is currently disabled:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"void setMidiInput (int index)\n    {\n        auto list = juce::MidiInput::getAvailableDevices()\uff1b\n \n        deviceManager.removeMidiInputDeviceCallback(list[lastInputIndex].identifier, this)\uff1b\n \n        auto newInput = list[index]\uff1b\n \n        if (! deviceManager.isMidiInputDeviceEnabled (newInput.identifier))\n            deviceManager.setMidiInputDeviceEnabled (newInput.identifier, true)\uff1b\n \n        deviceManager.addMidiInputDeviceCallback (newInput.identifier, this)\uff1b\n        midiInputList.setSelectedId (index + 1, juce::dontSendNotification)\uff1b\n \n        lastInputIndex = index\uff1b\n    }\n"})}),"\n",(0,s.jsx)(t.h2,{id:"handling-external-midi-input",children:"Handling external MIDI input"}),"\n",(0,s.jsxs)(t.p,{children:["We implement the ",(0,s.jsx)(t.a,{href:"classMidiInputCallback.html#acdf6d7e27b96a50fe06922737f0d082e",title:"Receives an incoming message.",children:"MidiInputCallback::handleIncomingMidiMessage()"})," ",(0,s.jsx)(t.a,{href:"http://www.learncpp.com/cpp-tutorial/126-pure-virtual-functions-abstract-base-classes-and-interface-classes/",children:"\u30d4\u30e5\u30a2\u30d0\u30fc\u30c1\u30e3\u30eb"})," function. This updates the keyboard state (which in turn will update the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardComponent",title:"A component that displays a piano keyboard, whose notes can be clicked on.",children:"MidiKeyboardComponent"})," object):"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"    void handleIncomingMidiMessage (juce::MidiInput* source, const juce::MidiMessage& message) override\n    {\n        const juce::ScopedValueSetterscopedInputFlag (isAddingFromMidiInput, true)\uff1b\n        keyboardState.processNextMidiEvent (message)\uff1b\n        postMessageToList (message, source->getName())\uff1b\n    }\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Notice the ",(0,s.jsx)(t.code,{children:"\u30b9\u30b3\u30fc\u30d7\u4ed8\u304d\u5165\u529b\u30d5\u30e9\u30b0"})," variable makes use of the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classScopedValueSetter",title:"Helper class providing an RAII-based mechanism for temporarily setting and then re-setting a value.",children:"\u30b9\u30b3\u30fc\u30d7\u5024\u30bb\u30c3\u30bf\u30fc"})," class. This does the following:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["It stores the current state of the ",(0,s.jsx)(t.code,{children:"isAddingFromMidiInput\uff08\u30df\u30c7\u30a3\u5165\u529b\u304b\u3089\u306e\u8ffd\u52a0"})," member."]}),"\n",(0,s.jsxs)(t.li,{children:["It sets the ",(0,s.jsx)(t.code,{children:"isAddingFromMidiInput\uff08\u30df\u30c7\u30a3\u5165\u529b\u304b\u3089\u306e\u8ffd\u52a0"})," member to true."]}),"\n",(0,s.jsxs)(t.li,{children:["When the function exits it reset the value of ",(0,s.jsx)(t.code,{children:"isAddingFromMidiInput\uff08\u30df\u30c7\u30a3\u5165\u529b\u304b\u3089\u306e\u8ffd\u52a0"})," member to the state it was in at the start of the function."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"the-midi-keyboard-state-and-component",children:"The MIDI keyboard state and component"}),"\n",(0,s.jsxs)(t.p,{children:["In the ",(0,s.jsx)(t.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," constructor the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardComponent",title:"A component that displays a piano keyboard, whose notes can be clicked on.",children:"MidiKeyboardComponent"})," object is added to our ",(0,s.jsx)(t.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," parent component and made visible. We also listen to the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardState",title:"Represents a piano keyboard, keeping track of which keys are currently pressed.",children:"\u30df\u30c7\u30a3\u30ad\u30fc\u30dc\u30fc\u30c9\u30b9\u30c6\u30fc\u30c8"})," object (",(0,s.jsx)(t.em,{children:"\u306a\u3044"})," the component):"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"addAndMakeVisible (keyboardComponent)\uff1b\n        keyboardState.addListener (this)\uff1b\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The MidiKeyboardStateListener class has two ",(0,s.jsx)(t.a,{href:"http://www.learncpp.com/cpp-tutorial/126-pure-virtual-functions-abstract-base-classes-and-interface-classes/",children:"\u30d4\u30e5\u30a2\u30d0\u30fc\u30c1\u30e3\u30eb"})," functions that we must implement. These are the ",(0,s.jsx)(t.a,{href:"classMidiKeyboardState_1_1Listener.html#a854381a64354389e0cb2c15ec1fb4b01",title:"Called when one of the MidiKeyboardState's keys is pressed.",children:"MidiKeyboardStateListener::handleNoteOn()"})," and ",(0,s.jsx)(t.a,{href:"classMidiKeyboardState_1_1Listener.html#aedc74bd79578cb19edba66d38e9a93cf",title:"Called when one of the MidiKeyboardState's keys is released.",children:"MidiKeyboardStateListener::handleNoteOff()"})," functions."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'void handleNoteOn (juce::MidiKeyboardState*, int midiChannel, int midiNoteNumber, float velocity) override\n    {\n        if (! isAddingFromMidiInput)\n        {\n            auto m = juce::MidiMessage::noteOn (midiChannel, midiNoteNumber, velocity)\uff1b\n            m.setTimeStamp (juce::Time::getMillisecondCounterHiRes() * 0.001)\uff1b\n            postMessageToList (m, "On-Screen Keyboard")\uff1b\n        }\n    }\n \n    void handleNoteOff (juce::MidiKeyboardState*, int midiChannel, int midiNoteNumber, float /*velocity*/) override\n    {\n        if (! isAddingFromMidiInput)\n        {\n            auto m = juce::MidiMessage::noteOff (midiChannel, midiNoteNumber)\uff1b\n            m.setTimeStamp (juce::Time::getMillisecondCounterHiRes() * 0.001)\uff1b\n            postMessageToList (m, "\u30aa\u30f3\u30b9\u30af\u30ea\u30fc\u30f3\u30ad\u30fc\u30dc\u30fc\u30c9")\uff1b\n        }\n    }\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Here you can see how the ",(0,s.jsx)(t.code,{children:"isAddingFromMidiInput\uff08\u30df\u30c7\u30a3\u5165\u529b\u304b\u3089\u306e\u8ffd\u52a0"})," member is used. This prevents events that arrived from the hardware input from being posted to our list more than once."]}),"\n",(0,s.jsx)(t.h2,{id:"posting-messages-to-the-list",children:"Posting messages to the list"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"postMessageToList()"})," function may look a little unusual at first:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"void postMessageToList (const juce::MidiMessage& message, const juce::String& source)\n    {\n        (new IncomingMessageCallback (this, message, source))->post()\uff1b\n    }\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"\u7740\u4fe1\u30e1\u30c3\u30bb\u30fc\u30b8\u30b3\u30fc\u30eb\u30d0\u30c3\u30af"})," class is a subclass of the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classCallbackMessage",title:"A message that invokes a callback method when it gets delivered.",children:"\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30e1\u30c3\u30bb\u30fc\u30b8"})," class. We need to use this since we can't be sure from which thread the ",(0,s.jsx)(t.code,{children:"postMessageToList()"})," function will be called. It will be called from the message thread if the user clicks on the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardComponent",title:"A component that displays a piano keyboard, whose notes can be clicked on.",children:"MidiKeyboardComponent"})," object. But, if the data arrives from an external MIDI source then it will be called from the background MIDI thread (possibly an operating system thread)."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classCallbackMessage",title:"A message that invokes a callback method when it gets delivered.",children:"\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30e1\u30c3\u30bb\u30fc\u30b8"})," class provides a means of calling a function on the message thread. The ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classCallbackMessage",title:"A message that invokes a callback method when it gets delivered.",children:"\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30e1\u30c3\u30bb\u30fc\u30b8"})," class is a kind of ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classReferenceCountedObject",title:"A base class which provides methods for reference-counting.",children:"\u53c2\u7167\u30ab\u30a6\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8"})," class. This is why we don't (apparently) need to store the ",(0,s.jsx)(t.code,{children:"\u7740\u4fe1\u30e1\u30c3\u30bb\u30fc\u30b8\u30b3\u30fc\u30eb\u30d0\u30c3\u30af"})," object anywhere. In fact, the ",(0,s.jsx)(t.code,{children:"IncomingMessageCallback::post()"})," function (which is the ",(0,s.jsx)(t.a,{href:"classMessageManager_1_1MessageBase.html#a2bcdf57123967a59650bd46543906796",children:"MessageManager::MessageBase::post()"})," function) adds the object to a queue that is handled by the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMessageManager",title:"This class is in charge of the application's event-dispatch loop.",children:"\u30e1\u30c3\u30bb\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc"})," class. The ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMessageManager",title:"This class is in charge of the application's event-dispatch loop.",children:"\u30e1\u30c3\u30bb\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc"})," class will eventually find this object in the queue and call the ",(0,s.jsx)(t.code,{children:"IncomingMessageCallback::messageCallback()"})," function on the message thread. Once this function has been called, the ",(0,s.jsx)(t.code,{children:"\u7740\u4fe1\u30e1\u30c3\u30bb\u30fc\u30b8\u30b3\u30fc\u30eb\u30d0\u30c3\u30af"})," object will be deleted. Thus the lifetime of this object is handled (almost) automatically."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"\u3053\u308c\u306f\u3001\u30c7\u30fc\u30bf\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u30b9\u30ec\u30c3\u30c9\u306b\u9001\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u672c\u5f53\u306b\u5fc5\u8981\u306a\u3060\u3051\u3067\u3059\u3002MIDI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u4f55\u3089\u304b\u306e\u30b9\u30ec\u30c3\u30c9\u9593\u901a\u4fe1\u304c\u5fc5\u8981\u3060\u3068\u601d\u308f\u308c\u308b\u304c\u3001\u6b63\u78ba\u306a\u5b9f\u88c5\u306f\u72b6\u6cc1\u306b\u3088\u308b\u3002"})}),"\n",(0,s.jsx)(t.h2,{id:"displaying-the-messages",children:"Displaying the messages"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"addMessageToList()"})," and ",(0,s.jsx)(t.code,{children:"getMidiMessageDescription()"})," functions are very similar to these functions from ",(0,s.jsx)(t.a,{href:"../tutorial_midi_message/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebMIDI\u30c7\u30fc\u30bf\u306e\u4f5c\u6210"}),". The main difference is that we make a note of the source [7] of the MIDI message (which hardware input, or the on-screen keyboard):"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'void addMessageToList (const juce::MidiMessage& message, const juce::String& source)\n    {\n        auto time = message.getTimeStamp() - startTime\uff1b\n \n        auto hours = ((int) (time / 3600.0)) % 24\uff1b\n        auto minutes = ((int) (time / 60.0)) % 60\uff1b\n        auto \u79d2 = ((int) time) % 60\uff1b\n        auto millis = ((int) (time * 1000.0)) % 1000\uff1b\n \n        auto timecode = juce::String::formatted ("%02d:%02d:%02d.%03d"\u3001\n                                                 \u6642\u9593\n                                                 \u5206\n                                                 \u79d2\u3001\n                                                 \u30df\u30ea)\uff1b\n \n        auto description = getMidiMessageDescription (message)\uff1b\n \n        juce::String midiMessageString (timecode + " - " + description + " (" + source + ")"); // [7].\n        logMessage (midiMessageString)\uff1b\n    }\n'})}),"\n",(0,s.jsx)(t.p,{children:"\u30e6\u30fc\u30b6\u30fc\u30fb\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u3001\u30e2\u30b8\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30fb\u30db\u30a4\u30fc\u30eb\uff08CC1\uff09\u3084\u30d4\u30c3\u30c1\u30fb\u30db\u30a4\u30fc\u30eb\u306a\u3069\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u3001\u305d\u308c\u306b\u53cd\u5fdc\u3059\u308b\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u3044\u304f\u3064\u304b\u8ffd\u52a0\u3059\u308b\u3002"}),"\n",(0,s.jsx)(t.h1,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,s.jsx)(t.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001MIDI\u5165\u529b\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3057\u305f\u308a\u8868\u793a\u3057\u305f\u308a\u3059\u308b\u305f\u3081\u306e\u3044\u304f\u3064\u304b\u306e\u30af\u30e9\u30b9\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u7279\u306b\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306f\u305a\u3067\u3059\uff1a"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"\u4f7f\u7528\u53ef\u80fd\u306a MIDI \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u307e\u3059\u3002"}),"\n",(0,s.jsx)(t.li,{children:"MIDI\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u30e1\u30cb\u30e5\u30fc\u3092\u4f5c\u6210\u3059\u308b\u3002"}),"\n",(0,s.jsx)(t.li,{children:"\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u5165\u529b\u306b\u5c4a\u304fMIDI\u3092\u805e\u304f\u3002"}),"\n",(0,s.jsxs)(t.li,{children:["Display MIDI note data using the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMidiKeyboardComponent",title:"A component that displays a piano keyboard, whose notes can be clicked on.",children:"MidiKeyboardComponent"})," class."]}),"\n",(0,s.jsxs)(t.li,{children:["Post messages from other threads to be be dealt with on the message thread using the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classCallbackMessage",title:"A message that invokes a callback method when it gets delivered.",children:"\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u30e1\u30c3\u30bb\u30fc\u30b8"})," class."]}),"\n"]}),"\n",(0,s.jsx)(t.h1,{id:"\u95a2\u9023\u9805\u76ee",children:"\u95a2\u9023\u9805\u76ee"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../tutorial_audio_device_manager/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebAudioDeviceManager\u30af\u30e9\u30b9"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../tutorial_midi_message/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebMIDI\u30c7\u30fc\u30bf\u306e\u4f5c\u6210"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../tutorial_synth_using_midi_input/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebMIDI\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b"})}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},3449:(e,t,i)=>{i.d(t,{A:()=>n});var s=i(4848);function n(e){let{src:t,caption:i,alt:n,width:a,height:d}=e;return(0,s.jsxs)("figure",{children:[(0,s.jsx)("img",{src:t,alt:n||i,width:a,height:d}),(0,s.jsx)("figcaption",{children:(0,s.jsx)("b",{children:i})})]})}},6378:(e,t,i)=>{i.d(t,{A:()=>n});var s=i(4848);function n(e){let{path:t}=e;return(0,s.jsx)("p",{children:(0,s.jsx)("a",{href:`https://docs.juce.com/master/${t}.html`,children:"\ud83d\udcda Source Page"})})}},8453:(e,t,i)=>{i.d(t,{R:()=>d,x:()=>o});var s=i(6540);const n={},a=s.createContext(n);function d(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);