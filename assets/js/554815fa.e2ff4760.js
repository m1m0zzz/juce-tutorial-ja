"use strict";(self.webpackChunkjuce_tutorial_ja=self.webpackChunkjuce_tutorial_ja||[]).push([[2836],{3579:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>g,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var s=r(4848),i=r(8453),n=r(3449),a=r(6378);const l={title:"The BigInteger class",sidebar_position:1},o="Tutorial: The BigInteger class",c={id:"utility-classes/tutorial_big_integer",title:"The BigInteger class",description:"This tutorial introduces the BigInteger class, which is for handling arbitrarily large integers. BigInteger objects are often used in cryptography applications, when large bit masks are needed, and anywhere else where really large integers are needed.",source:"@site/docs/utility-classes/tutorial_big_integer.mdx",sourceDirName:"utility-classes",slug:"/utility-classes/tutorial_big_integer",permalink:"/juce-tutorial-ja/utility-classes/tutorial_big_integer",draft:!1,unlisted:!1,editUrl:"https://github.com/m1m0zzz/juce-tutorial-ja/tree/main/docs/utility-classes/tutorial_big_integer.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"The BigInteger class",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Utility Classes",permalink:"/juce-tutorial-ja/category/utility-classes"},next:{title:"The Random class",permalink:"/juce-tutorial-ja/utility-classes/tutorial_random"}},g={},h=[{value:"\u306f\u3058\u3081\u308b",id:"\u306f\u3058\u3081\u308b",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.A,{path:"tutorial_big_integer"}),"\n",(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"tutorial-the-biginteger-class",children:"Tutorial: The BigInteger class"})}),"\n",(0,s.jsxs)(t.p,{children:["This tutorial introduces the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," class, which is for handling arbitrarily large integers. ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," objects are often used in cryptography applications, when large bit masks are needed, and anywhere else where really large integers are needed."]}),"\n",(0,s.jsx)(t.p,{children:"Level: Beginner"}),"\n",(0,s.jsx)(t.p,{children:"Platforms: Windows, macOS, Linux, iOS, Android"}),"\n",(0,s.jsxs)(t.p,{children:["Classes: ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classTextEditor",title:"An editable text box.",children:"TextEditor"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMemoryBlock",title:"A class to hold a resizable block of raw data.",children:"MemoryBlock"})]}),"\n",(0,s.jsx)(t.h2,{id:"\u306f\u3058\u3081\u308b",children:"\u306f\u3058\u3081\u308b"}),"\n",(0,s.jsxs)(t.p,{children:["Download the demo project for this tutorial here: ",(0,s.jsx)(t.a,{href:"/tutorials/PIPs/BigIntegerTutorial.zip",children:"PIP"})," | ",(0,s.jsx)(t.a,{href:"/tutorials/ZIPs/BigIntegerTutorial.zip",children:"ZIP"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,s.jsxs)(t.p,{children:["If you need help with this step, see ",(0,s.jsx)(t.a,{href:"../tutorial_new_projucer_project/",children:"Tutorial: Projucer Part 1: Getting started with the Projucer"}),"."]}),"\n",(0,s.jsx)(t.h1,{id:"the-demo-project",children:"The demo project"}),"\n",(0,s.jsxs)(t.p,{children:["The demo project sets up a simple text console where we can display the results of various calculations. This allows us to demonstrate some of the operations that can be performed by the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," class in this tutorial."]}),"\n",(0,s.jsx)(t.p,{children:"In its default configuration, the demo project displays a series of 100 integers starting with the value 11. Each new value is the old value multiplied by 11."}),"\n",(0,s.jsx)(n.A,{src:"https://docs.juce.com/master/tutorial_big_integer_screenshot1.png",caption:"The test console displaying a series of big integers"}),"\n",(0,s.jsxs)(t.p,{children:["As you can see, the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," class can indeed represent very large integers! A signed 32-bit integer (for example, the ",(0,s.jsx)(t.code,{children:"int"})," type on most compilers) can represent numbers up to 2,147,483,647 and a 64-bit integer (the ",(0,s.jsx)(t.code,{children:"int64"}),' type in JUCE) can represent up to "just" 9,223,372,036,854,775,807!']}),"\n",(0,s.jsx)(t.h1,{id:"test-bed-code",children:"Test bed code"}),"\n",(0,s.jsxs)(t.p,{children:["Throughout this tutorial we will modify parts of the demo project to demonstrate different features of the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," class. All of the code under discussion is in the ",(0,s.jsx)(t.code,{children:"MainComponent"})," class. In fact, all of the changes will be to the ",(0,s.jsx)(t.code,{children:"runExample()"})," function."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'    void runExample()\n    {\n        logMessage ("------------------------- START --------------------------");\n \n        int base = 10;\n        juce::BigInteger bigInt = 11;\n \n        for (auto iteration = 0; iteration < 100; ++iteration)\n        {\n            logMessage (bigInt.toString (base));\n \n            bigInt *= 11;\n        }\n \n        logMessage ("----------------------- FINISHED -------------------------");\n    }\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Here we can see the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," object initialised to 11 then it is multiplied by 11 for each iteration of the ",(0,s.jsx)(t.code,{children:"for()"})," loop. The ",(0,s.jsx)(t.code,{children:"logMessage()"})," function simply posts the string that is passed to our ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classTextEditor",title:"An editable text box.",children:"TextEditor"})," object."]}),"\n",(0,s.jsxs)(t.p,{children:["Now that we have introduced our test bed code we can start trying out some more operations on ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," objects."]}),"\n",(0,s.jsx)(t.p,{children:"Try out different start values and multipliers to generate different geometric sequences."}),"\n",(0,s.jsx)(t.h1,{id:"binary-patterns",children:"Binary patterns"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," class supports binary operations, too. In fact, the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," class is often used as a bit mask (for example, the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classAudioIODevice",title:"Base class for an audio device with synchronised input and output channels.",children:"AudioIODevice"})," class uses ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," objects to represent enabled input and output channels \u2014 see ",(0,s.jsx)(t.a,{href:"../tutorial_audio_device_manager/",children:"Tutorial: The AudioDeviceManager class"}),"). Here is a simple example where we display the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," values in binary (using base-2) starting with a value of 3 (",(0,s.jsx)(t.code,{children:"11"})," in binary) and bit-shift to the left by one place for each iteration:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'void runExample()\n{\n    logMessage ("------------------------- START --------------------------");\n \n    int base = 2;\n    juce::BigInteger bigInt = 3;\n \n    for (auto iteration = 0; iteration < 100; ++iteration)\n    {\n        logMessage (bigInt.toString (base));\n \n        bigInt = bigInt << 1;\n    }\n \n    logMessage ("----------------------- FINISHED -------------------------");\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Here you will see that we end up with a binary value containing two 1s and many trailing zeros:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"...\n11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n----------------------- FINISHED -------------------------\n"})}),"\n",(0,s.jsx)(t.p,{children:"Try a different starting bit pattern. Or start with a very large value and gradually bit-shift it to the right instead."}),"\n",(0,s.jsx)(t.p,{children:"We can also set and test bits individually. For example, this sets the first thirty even-numbered bits and displays the result in binary, decimal, hexadecimal and octal:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'void runExample()\n{\n    logMessage ("------------------------- START --------------------------");\n \n    juce::BigInteger bigInt;\n \n    for (auto bit = 0; bit < 60; bit += 2)\n        bigInt.setBit (bit);\n \n    logMessage (juce::String ("binary: ")  + bigInt.toString (2));\n    logMessage (juce::String ("decimal: ") + bigInt.toString (10));\n    logMessage (juce::String ("hex: ")     + bigInt.toString (16));\n    logMessage (juce::String ("octal: ")   + bigInt.toString (8));\n \n \n    logMessage ("----------------------- FINISHED -------------------------");\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"The result should be:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"------------------------- START --------------------------\nbinary: 10101010101010101010101010101010101010101010101010101010101\ndecimal: 384307168202282325\nhex: 555555555555555\noctal: 25252525252525252525\n----------------------- FINISHED -------------------------\n"})}),"\n",(0,s.jsx)(t.p,{children:"Try setting different patterns of bits using the code above as a starting point."}),"\n",(0,s.jsxs)(t.p,{children:["We can test bits in a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," object using the subscript operator as if a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," object is an array of ",(0,s.jsx)(t.code,{children:"bool"})," values. This example uses our original code to generate a geometric sequence and tests bit 3 for each value produced:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'void runExample()\n{\n    logMessage ("------------------------- START --------------------------");\n \n    int base = 10;\n    juce::BigInteger bigInt = 11;\n \n    for (auto iteration = 0; iteration < 100; ++iteration)\n    {\n        bool isBit3set = bigInt[3];\n        logMessage (bigInt.toString (base) + " : " + (isBit3set ? "Bit 3 is set" : "Bit 3 is NOT set"));\n \n        bigInt *= 11;\n    }\n \n    logMessage ("----------------------- FINISHED -------------------------");\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This makes code much more readable than using the standard bit-wise operators in C++. Since it is so simple to set and test bits using the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," class, it is useful even if the integers are small!"]}),"\n",(0,s.jsx)(t.h1,{id:"arbitrary-data",children:"Arbitrary data"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," objects can also be converted to, and from, arbitrary data via ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMemoryBlock",title:"A class to hold a resizable block of raw data.",children:"MemoryBlock"})," objects. The following example converts a string to a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMemoryBlock",title:"A class to hold a resizable block of raw data.",children:"MemoryBlock"})," object (via a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMemoryOutputStream",title:"Writes data to an internal memory buffer, which grows as required.",children:"MemoryOutputStream"})," object), then to a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"}),", and finally back to a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classString",title:"The JUCE String class!",children:"String"})," object via a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classMemoryBlock",title:"A class to hold a resizable block of raw data.",children:"MemoryBlock"})," object:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'void runExample()\n{\n    logMessage ("------------------------- START --------------------------");\n \n    juce::String originalText ("BigInteger objects are really useful for cryptography");\n    logMessage ("Original text: ");\n    logMessage (originalText);\n    logMessage (newLine);\n \n    juce::MemoryOutputStream originalData;\n    originalData << originalText;\n \n    juce::BigInteger originalInteger;\n    originalInteger.loadFromMemoryBlock (originalData.getMemoryBlock());\n \n    logMessage ("Original text as a BigInteger: ");\n    logMessage (originalInteger.toString (10));\n    logMessage (newLine);\n \n    juce::MemoryBlock convertedData (originalInteger.toMemoryBlock());\n    juce::String convertedString (convertedData.toString());\n \n    logMessage ("BigInteger converted back to a string: ");\n    logMessage (convertedString);\n \n    logMessage ("----------------------- FINISHED -------------------------");\n}\nnewLineNewLine newLineA predefined object representing a new-line, which can be written to a string or stream.\n'})}),"\n",(0,s.jsxs)(t.p,{children:["As the message in the applications says, ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," objects are really useful for cryptography. The ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classRSAKey",title:"RSA public/private key-pair encryption class.",children:"RSAKey"})," class applies its cryptographic algorithm to ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," objects in order to encrypt and decrypt messages."]}),"\n",(0,s.jsx)(t.p,{children:"Experiment with different strings in the code above. What happens when you use longer or shorter strings, for example?"}),"\n",(0,s.jsx)(t.h1,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,s.jsxs)(t.p,{children:["This tutorial has introduced the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," class. After following this tutorial you should be able to:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Use ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," objects to store integers and apply arithmetic operations to them just like regular integers."]}),"\n",(0,s.jsxs)(t.li,{children:["Convert a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," object to a string for display in binary, decimal, hexadecimal and octal."]}),"\n",(0,s.jsxs)(t.li,{children:["Test and set the individual bits of a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," object."]}),"\n",(0,s.jsxs)(t.li,{children:["Convert strings and other arbitrary data to and from ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classBigInteger",title:"An arbitrarily large integer class.",children:"BigInteger"})," objects."]}),"\n"]}),"\n",(0,s.jsx)(t.h1,{id:"\u95a2\u9023\u9805\u76ee",children:"\u95a2\u9023\u9805\u76ee"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../tutorial_label/",children:"Tutorial: The Label class"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},3449:(e,t,r)=>{r.d(t,{A:()=>i});var s=r(4848);function i(e){let{src:t,caption:r,alt:i,width:n,height:a}=e;return(0,s.jsxs)("figure",{children:[(0,s.jsx)("img",{src:t,alt:i||r,width:n,height:a}),(0,s.jsx)("figcaption",{children:(0,s.jsx)("b",{children:r})})]})}},6378:(e,t,r)=>{r.d(t,{A:()=>i});var s=r(4848);function i(e){let{path:t}=e;return(0,s.jsx)("p",{children:(0,s.jsx)("a",{href:`https://docs.juce.com/master/${t}.html`,children:"\ud83d\udcda Source Page"})})}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>l});var s=r(6540);const i={},n=s.createContext(i);function a(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);