"use strict";(self.webpackChunkjuce_tutorial_ja=self.webpackChunkjuce_tutorial_ja||[]).push([[997],{5078:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=t(4848),o=t(8453),i=t(3449);t(6378);const r={title:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d4\u30f3\u30b0\u3068\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u6b6a\u307f\u306e\u8ffd\u52a0",sidebar_position:2},c="\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d4\u30f3\u30b0\u3068\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u6b6a\u307f\u3092\u52a0\u3048\u308b",a={id:"dsp/tutorial_dsp_convolution",title:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d4\u30f3\u30b0\u3068\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u6b6a\u307f\u306e\u8ffd\u52a0",description:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d4\u30f3\u30b0\u3067\u30cf\u30fc\u30e2\u30cb\u30c3\u30af\u30fb\u30c7\u30a3\u30b9\u30c8\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u3001\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u30fb\u30b5\u30a6\u30f3\u30c9\u306b\u91cd\u539a\u3055\u3092\u52a0\u3048\u308b\u3002\u30a4\u30f3\u30d1\u30eb\u30b9\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u542b\u307e\u308c\u308b\u97f3\u306e\u7279\u5fb4\u3092\u53d6\u308a\u51fa\u3059\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306e\u57fa\u790e\u3092\u5b66\u3073\u307e\u3059\u3002",source:"@site/docs/dsp/tutorial_dsp_convolution.mdx",sourceDirName:"dsp",slug:"/dsp/tutorial_dsp_convolution",permalink:"/juce-tutorial-ja/dsp/tutorial_dsp_convolution",draft:!1,unlisted:!1,editUrl:"https://github.com/m1m0zzz/juce-tutorial-ja/tree/main/docs/dsp/tutorial_dsp_convolution.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d4\u30f3\u30b0\u3068\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u6b6a\u307f\u306e\u8ffd\u52a0",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"DSP\u5165\u9580",permalink:"/juce-tutorial-ja/dsp/tutorial_dsp_introduction"},next:{title:"\u30c7\u30a3\u30ec\u30a4\u30e9\u30a4\u30f3\u3067\u30b9\u30c8\u30ea\u30f3\u30b0\u30fb\u30e2\u30c7\u30eb\u3092\u4f5c\u6210",permalink:"/juce-tutorial-ja/dsp/tutorial_dsp_delay_line"}},h={},l=[{value:"\u306f\u3058\u3081\u308b",id:"\u306f\u3058\u3081\u308b",level:2},{value:"What is Waveshaping?",id:"what-is-waveshaping",level:2},{value:"What is Convolution?",id:"what-is-convolution",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d4\u30f3\u30b0\u3068\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u6b6a\u307f\u3092\u52a0\u3048\u308b",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d4\u30f3\u30b0\u3068\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u6b6a\u307f\u3092\u52a0\u3048\u308b"}),"\n",(0,s.jsx)(n.p,{children:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d4\u30f3\u30b0\u3067\u30cf\u30fc\u30e2\u30cb\u30c3\u30af\u30fb\u30c7\u30a3\u30b9\u30c8\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u3001\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u30fb\u30b5\u30a6\u30f3\u30c9\u306b\u91cd\u539a\u3055\u3092\u52a0\u3048\u308b\u3002\u30a4\u30f3\u30d1\u30eb\u30b9\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u542b\u307e\u308c\u308b\u97f3\u306e\u7279\u5fb4\u3092\u53d6\u308a\u51fa\u3059\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306e\u57fa\u790e\u3092\u5b66\u3073\u307e\u3059\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u30ec\u30d9\u30eb\uff1aAdvanced"}),"\n",(0,s.jsx)(n.p,{children:"\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\uff1aWindows, macOS, Linux"}),"\n",(0,s.jsx)(n.p,{children:"\u30d7\u30e9\u30b0\u30a4\u30f3\u5f62\u5f0f\uff1aVST, AU, Standalone"}),"\n",(0,s.jsxs)(n.p,{children:["\u30af\u30e9\u30b9\uff1a ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classdsp_1_1ProcessorChain",title:"This variadically-templated class lets you join together any number of processor classes into a singl...",children:"dsp::ProcessorChain"}),", ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classdsp_1_1Gain",title:"Applies a gain to audio samples as single samples or AudioBlocks.",children:"dsp::Gain"}),", ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classdsp_1_1Oscillator",title:"Generates a signal based on a user-supplied function.",children:"dsp::Oscillator"}),", ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classdsp_1_1Convolution",title:"Performs stereo partitioned convolution of an input signal with an impulse response in the frequency ...",children:"dsp::Convolution"}),", ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/structdsp_1_1WaveShaper",title:"Applies waveshaping to audio samples as single samples or AudioBlocks.",children:"dsp::WaveShaper"}),", ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classdsp_1_1Reverb",title:"Processor wrapper around juce::Reverb for easy integration into ProcessorChain.",children:"dsp::Reverb"}),", ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/structdsp_1_1ProcessorDuplicator",title:"Converts a mono processor class into a multi-channel version by duplicating it and applying multichan...",children:"dsp::ProcessorDuplicator"})]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"\u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u306f\u3001C++14\u306e\u6a5f\u80fd\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u5fc5\u8981\u3067\u3059\u3002Xcode\u3068Visual Studio\u306e\u6700\u8fd1\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306f\u3001\u3053\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002"})}),"\n",(0,s.jsx)(n.h2,{id:"\u306f\u3058\u3081\u308b",children:"\u306f\u3058\u3081\u308b"}),"\n",(0,s.jsxs)(n.p,{children:["This tutorial leads on from ",(0,s.jsx)(n.a,{href:"../tutorial_dsp_introduction/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebDSP\u5165\u9580"}),". If you haven't done so already, you should read that tutorial first."]}),"\n",(0,s.jsxs)(n.p,{children:["Download the demo project for this tutorial here: ",(0,s.jsx)(n.a,{href:"/tutorials/PIPs/DSPConvolutionTutorial.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,s.jsx)(n.a,{href:"/tutorials/ZIPs/DSPConvolutionTutorial.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["If using the PIP version of this project, please make sure to copy the ",(0,s.jsx)(n.code,{children:"\u30ea\u30bd\u30fc\u30b9"})," folder into the generated Projucer project."]})}),"\n",(0,s.jsxs)(n.p,{children:["If you need help with this step, see ",(0,s.jsx)(n.a,{href:"../tutorial_new_projucer_project/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebProjucer\u30d1\u30fc\u30c81\uff1aProjucer\u3092\u59cb\u3081\u308b"}),"."]}),"\n",(0,s.jsx)(n.h1,{id:"the-demo-project",children:"The demo project"}),"\n",(0,s.jsx)(n.p,{children:"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u30d7\u30e9\u30b0\u30a4\u30f3\u3068\u3057\u3066\u69cb\u60f3\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001IDE\u3067\u9069\u5207\u306a\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u30fb\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3067\u3001\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30f3\u30fb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Xcode\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u3088\u3046\u306b\u3001\u30e1\u30a4\u30f3\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5de6\u4e0a\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_introduction_standalone_screenshot1.png",caption:"Changing the deployment target in Xcode"}),"\n",(0,s.jsx)(n.p,{children:"\u30c7\u30e2\u30fb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3001\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u4e0a\u534a\u5206\u306bMIDI\u30ad\u30fc\u30dc\u30fc\u30c9\u304c\u753b\u9762\u4e0a\u306b\u8868\u793a\u3055\u308c\u3001\u4e0b\u534a\u5206\u306b\u306f\u30aa\u30b7\u30ed\u30b9\u30b3\u30fc\u30d7\u3092\u901a\u3057\u3066\u4fe1\u53f7\u304c\u8996\u899a\u7684\u306b\u8868\u793a\u3055\u308c\u308b\u3002\u73fe\u5728\u3001\u9375\u76e4\u304c\u62bc\u3055\u308c\u308b\u3068\u3001\u30d7\u30e9\u30b0\u30a4\u30f3\u306f\u30ea\u30d0\u30fc\u30d6\u3092\u52a0\u3048\u305f\u57fa\u672c\u7684\u306a\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u30fb\u30b5\u30a6\u30f3\u30c9\u3092\u51fa\u529b\u3057\u307e\u3059\u3002"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Feel free to remove the reverb to clearly hear the changes in each steps of the tutorial by commenting out the reverb processor in the ",(0,s.jsx)(n.code,{children:"\u30aa\u30fc\u30c7\u30a3\u30aa\u30a8\u30f3\u30b8\u30f3"})," class."]})}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_introduction_screenshot1.png",caption:"The demo project plugin window"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"MIDI\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u304a\u6301\u3061\u306e\u5834\u5408\u306f\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u4e2d\u3001\u753b\u9762\u4e0a\u306e\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f7f\u3046\u4ee3\u308f\u308a\u306b\u3001MIDI\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3092\u63a5\u7d9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002"})}),"\n",(0,s.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u7570\u306a\u308b\u65b9\u6cd5\u3067\u4fe1\u53f7\u51e6\u7406\u3092\u53ef\u80fd\u306b\u3059\u308b2\u3064\u306e\u65b0\u3057\u3044DSP\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff1a\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d4\u30f3\u30b0\u3068\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306eDSP\u7528\u8a9e\u306e\u5b9a\u7fa9\u304b\u3089\u59cb\u3081\u3088\u3046\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"what-is-waveshaping",children:"What is Waveshaping?"}),"\n",(0,s.jsx)(n.p,{children:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d4\u30f3\u30b0\u3068\u306f\u3001\u3042\u308b\u4fe1\u53f7\u304c\u3001\u5143\u306e\u4fe1\u53f7\u306b\u9069\u7528\u3055\u308c\u308b\u4f1d\u9054\u95a2\u6570\u306b\u3088\u3063\u3066\u5225\u306e\u4fe1\u53f7\u306b\u30b7\u30a7\u30fc\u30d4\u30f3\u30b0\u3055\u308c\u308b\u30d7\u30ed\u30bb\u30b9\u306e\u3053\u3068\u3067\u3042\u308b\u3002\u4f8b\u3048\u3070\u3001\u5358\u7d14\u306a\u6b63\u5f26\u6ce2\u306f\u3001\u6570\u5b66\u7684\u306a\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u6ce2\u5f62\u306b\u6210\u5f62\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d1\u30fc\u306f\u3001\u7279\u5b9a\u306e\u4f1d\u9054\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u969b\u306b\u3001\u5143\u306e\u4fe1\u53f7\u306b\u9ad8\u8abf\u6ce2\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u52b9\u679c\u7684\u306b\u6b6a\u307f\u3092\u4f5c\u308a\u51fa\u3059\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3054\u5b58\u77e5\u306e\u3088\u3046\u306b\u3001\u4f8b\u3048\u3070\u77e9\u5f62\u6ce2\u3084\u4e09\u89d2\u6ce2\u306f\u57fa\u672c\u7684\u306b\u6b63\u5f26\u6ce2\u306b\u5947\u6570\u500d\u97f3\u3092\u52a0\u3048\u305f\u3082\u306e\u3067\u3001\u306e\u3053\u304e\u308a\u6ce2\u306f\u6b63\u5f26\u6ce2\u306b\u5947\u6570\u500d\u97f3\u3068\u5076\u6570\u500d\u97f3\u3092\u52a0\u3048\u305f\u3082\u306e\u3067\u3059\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u4e8b\u5b9f\u3092\u77e5\u3063\u3066\u3044\u308c\u3070\u3001\u6b6a\u307f\u3092\u4f5c\u308a\u51fa\u30591\u3064\u306e\u65b9\u6cd5\u306f\u3001\u6b63\u5f26\u6ce2\u306e\u5f62\u72b6\u3092\u77e9\u5f62\u6ce2\u306b\u8fd1\u3065\u3051\u308b\u3053\u3068\u3067\u3042\u308b\u3002\u3067\u306f\u3001\u4f1d\u9054\u95a2\u6570\u3092\u4f7f\u3063\u3066\u305d\u308c\u3092\u5b9f\u73fe\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f"}),"\n",(0,s.jsx)(n.p,{children:"Consider for instance a simple sine wave sin(x) which could be plotted as follows:"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_graph1.png",caption:"Sine wave"}),"\n",(0,s.jsx)(n.p,{children:"By applying the signum transfer function onto the sine wave, a function that essentially outputs the sign of the inputted number, we end up with sgn(sin(x)) which perfectly represents the square wave like so:"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_graph2.png",caption:"Square wave with signum function"}),"\n",(0,s.jsx)(n.p,{children:"\u3057\u304b\u3057\u3001\u3053\u306e\u5b8c\u74a7\u306a\u6ce2\u5f62\u306f\u3001\u30ab\u30fc\u30d6\u306e\u30a8\u30c3\u30b8\u304c\u786c\u3044\u305f\u3081\u3001\u30cf\u30fc\u30c9\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3068\u547c\u3070\u308c\u308b\u53b3\u3057\u3044\u6b6a\u307f\u3092\u751f\u307f\u51fa\u3059\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u308b\u3002\u307e\u305f\u3001\u3053\u306e\u3088\u3046\u306a\u6ce2\u5f62\u306f\u3001\u30a2\u30ca\u30ed\u30b0\u9818\u57df\u3067\u518d\u73fe\u3059\u308b\u306b\u306f\u300c\u5b8c\u74a7\u3059\u304e\u308b\u300d\u305f\u3081\u3001\u307b\u3068\u3093\u3069\u306e\u30a2\u30ca\u30ed\u30b0\u30fb\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3067\u4f5c\u3089\u308c\u308b\u77e9\u5f62\u6ce2\u306e\u3088\u3046\u306b\u306f\u805e\u3053\u3048\u307e\u305b\u3093\u3002"}),"\n",(0,s.jsx)(n.p,{children:"In order to create a more gentle kind of distortion called soft-clipping, we can use a hyperbolic tangent transfer function tanh(sin(x)) which outputs a signal that looks almost like a sine wave but with a rounder curve as shown here:"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_graph3.png",caption:"Square wave with tanh function"}),"\n",(0,s.jsx)(n.p,{children:"Then, in order to reach a square-like shape, we can boost the signal into clipping before applying the transfer function tanh(n*sin(x)), essentially truncating the top of the bell shape into a soft-edged square wave as seen below:"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_graph4.png",caption:"Square wave with clipped tanh function"}),"\n",(0,s.jsx)(n.p,{children:"\u304a\u308f\u304b\u308a\u306e\u3088\u3046\u306b\u3001\u3069\u306e\u3088\u3046\u306a\u7a2e\u985e\u306e\u4f1d\u9054\u95a2\u6570\u3067\u3082\u5165\u529b\u4fe1\u53f7\u306b\u9069\u7528\u3067\u304d\u308b\u305f\u3081\u3001\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d4\u30f3\u30b0\u306e\u53ef\u80fd\u6027\u306f\u7121\u9650\u306b\u3042\u308b\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["In JUCE, you can perform Waveshaping with the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/structdsp_1_1WaveShaper",title:"Applies waveshaping to audio samples as single samples or AudioBlocks.",children:"dsp::WaveShaper"})," class included in the DSP module."]}),"\n",(0,s.jsx)(n.h2,{id:"what-is-convolution",children:"What is Convolution?"}),"\n",(0,s.jsx)(n.p,{children:"\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3068\u306f\u3001\u3042\u308b\u7a7a\u9593\u306e\u6b8b\u97ff\u7279\u6027\u3092\u3001\u305d\u306e\u7a7a\u9593\u306e\u7279\u6027\u3092\u8868\u3059\u30a4\u30f3\u30d1\u30eb\u30b9\u5fdc\u7b54\u3092\u3042\u3089\u304b\u3058\u3081\u9332\u97f3\u3057\u3066\u304a\u304d\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u3088\u308a\u3001\u30a4\u30f3\u30d1\u30eb\u30b9\u5fdc\u7b54\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u5bfe\u3057\u3066\u30c7\u30fc\u30bf\u306e\u5404\u30b5\u30f3\u30d7\u30eb\u3092\u4e57\u7b97\u3057\u3066\u5408\u6210\u51fa\u529b\u3092\u4f5c\u6210\u3059\u308b\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u3001\u5165\u529b\u4fe1\u53f7\u306b\u3042\u3089\u3086\u308b\u30bf\u30a4\u30d7\u306e\u97f3\u97ff\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u30a4\u30f3\u30d1\u30eb\u30b9\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u306f\u3001\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u3059\u308b\u7a7a\u9593\u3067\u77ed\u3044\u30a4\u30f3\u30d1\u30eb\u30b9\u3092\u9332\u97f3\u3059\u308b\u3053\u3068\u3067\u751f\u6210\u3055\u308c\u308b\u30aa\u30fc\u30c7\u30a3\u30aa\u30d5\u30a1\u30a4\u30eb\u306e\u3053\u3068\u3067\u3059\u304c\u3001\u5fc5\u305a\u3057\u3082\u5b9f\u969b\u306e\u7269\u7406\u7684\u306a\u7a7a\u9593\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001\u3053\u306e\u3088\u3046\u306b\u30ad\u30e3\u30d3\u30cd\u30c3\u30c8\u3092\u901a\u3057\u3066\u30a4\u30f3\u30d1\u30eb\u30b9\u3092\u518d\u751f\u3057\u3001\u305d\u306e\u52b9\u679c\u3092\u9332\u97f3\u3059\u308b\u3053\u3068\u3067\u3001\u30ae\u30bf\u30fc\u30a2\u30f3\u30d7\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_graph5.png",caption:"A Guitar Amp impulse response"}),"\n",(0,s.jsx)(n.p,{children:"\u540c\u3058\u3053\u3068\u3092\u30ab\u30bb\u30c3\u30c8\u30ec\u30b3\u30fc\u30c0\u30fc\u3092\u901a\u3057\u3066\u884c\u3044\u3001\u751f\u6210\u3055\u308c\u305f\u30a4\u30f3\u30d1\u30eb\u30b9\u5fdc\u7b54\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\uff1a"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_graph6.png",caption:"A Cassette Recorder impulse response"}),"\n",(0,s.jsx)(n.p,{children:"\u5165\u529b\u4fe1\u53f7\u304c\u30a4\u30f3\u30d1\u30eb\u30b9\u5fdc\u7b54\u3068\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u308b\u3068\u3001\u5143\u306e\u30c9\u30e9\u30a4\u4fe1\u53f7\u306f\u3001\u4e21\u65b9\u306e\u7279\u6027\u3092\u4fdd\u6301\u3057\u305f\u30a6\u30a7\u30c3\u30c8\u306a\u6b8b\u97ff\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001100ms\u306e440Hz\u306e\u6b63\u5f26\u6ce2\u3092\u3001\u4e0a\u56f3\u306e\u30ae\u30bf\u30fc\u30fb\u30a2\u30f3\u30d7\u306e\u30a4\u30f3\u30d1\u30eb\u30b9\u5fdc\u7b54\u3067\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\uff1a"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_graph7.png",caption:"A sine wave through the Guitar Amp impulse response"}),"\n",(0,s.jsx)(n.p,{children:"\u5148\u306b\u7d39\u4ecb\u3057\u305f\u30ab\u30bb\u30c3\u30c8\u30fb\u30ec\u30b3\u30fc\u30c0\u30fc\u306e\u30a4\u30f3\u30d1\u30eb\u30b9\u5fdc\u7b54\u3068\u540c\u3058\u6b63\u5f26\u6ce2\u4fe1\u53f7\u304c\u3001\u6700\u7d42\u7684\u306b\u3053\u306e\u6ce2\u5f62\u3092\u751f\u6210\u3059\u308b\uff1a"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_graph8.png",caption:"A sine wave through the Cassette Recorder impulse response"}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u3088\u3046\u306b\u3001\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306e\u53ef\u80fd\u6027\u306f\u7121\u9650\u3067\u3042\u308a\u3001\u3069\u306e\u3088\u3046\u306a\u30a4\u30f3\u30d1\u30eb\u30b9\u5fdc\u7b54\u3067\u3082\u5165\u529b\u4fe1\u53f7\u306b\u9069\u7528\u3067\u304d\u308b\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["In JUCE, you can perform Convolution with the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classdsp_1_1Convolution",title:"Performs stereo partitioned convolution of an input signal with an impulse response in the frequency ...",children:"dsp::Convolution"})," class included in the DSP module."]}),"\n",(0,s.jsx)(n.h1,{id:"integrate-the-waveshaper",children:"Integrate the Waveshaper"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"\u30c7\u30a3\u30b9\u30c8\u30fc\u30b7\u30e7\u30f3"})," class, add a juce::dsp::ProcessorChain with a juce::dsp::WaveShaper processor as a template argument [1]. Also define an enum with the processor index [2] to be able to clearly refer to the corresponding process via its index later on."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"private:\n    //==============================================================================\n    enum\n    {\n        waveshaperIndex                // [2]\n    };\n \n    juce::dsp::ProcessorChain> processorChain; // [1].\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"\u30ea\u30bb\u30c3\u30c8"})," function, call the reset function of the waveshaper in the processor chain [3]."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void reset() noexcept\n    {\n        processorChain.reset(); // [3].\n    }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"prepare()"})," function, call the prepare function of the waveshaper in the processor chain [4]."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void prepare (const juce::dsp::ProcessSpec& spec)\n{\n    processorChain.prepare (spec); // [4].\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u3053\u3067\u3001\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d1\u30fc\u304c\u5165\u529b\u4fe1\u53f7\u306e\u6574\u5f62\u306b\u4f7f\u7528\u3059\u308b\u4f1d\u9054\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u5c0e\u5165\u90e8\u3067\u8aac\u660e\u3057\u305f\u3088\u3046\u306b\u3001\u307e\u305a\u30cf\u30fc\u30c9\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u95a2\u6570\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["In the constructor, get a reference to the WaveShaper by supplying the index of the process and use the ",(0,s.jsx)(n.code,{children:"processorChain.get<>()"})," method [5]. Let's initialise the waveshaper using a lambda function that limits the values to a range of -0.1 .. 0.1 [6]."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"public:\n    //==============================================================================\n    Distortion()\n    {\n        auto& waveshaper = processorChain.template get(); // [5]\n        waveshaper.functionToUse = [] (\u30bf\u30a4\u30d7 x)\n                                   {\n                                       return juce::jlimit (Type (-0.1), Type (0.1), x); // [6].\n                                   };\n    }\nxfloat xDefinition juce_UnityPluginInterface.h:191\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"\u30d7\u30ed\u30bb\u30b9()"})," function, we can call the process function of the waveshaper in the processor chain [7]."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    template void process (const ProcessContext& context) noexcept\n    {\n        processorChain.process (context); // [7].\n    }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If we run this code after implementing the above changes in the ",(0,s.jsx)(n.code,{children:"\u30c7\u30a3\u30b9\u30c8\u30fc\u30b7\u30e7\u30f3"})," class, we should be able to hear the effects of the waveshaper on the oscillator signal."]}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_screenshot1.png",caption:"Waveshaping the oscillator signal"}),"\n",(0,s.jsx)(n.p,{children:"Change the amount of limiting that occurs in the transfer function by restricting the values between -0.5 ..0.5. Do you perceive a difference in sound?"}),"\n",(0,s.jsx)(n.h1,{id:"change-the-transfer-function",children:"Change the transfer function"}),"\n",(0,s.jsx)(n.p,{children:"\u4f1d\u9054\u95a2\u6570\u3092\u53cc\u66f2\u7dda\u6b63\u63a5\u306b\u5909\u3048\u3066\u3001\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d1\u30fc\u306e\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u3092\u3082\u3046\u5c11\u3057\u30bd\u30d5\u30c8\u306b\u3057\u3066\u307f\u3088\u3046\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["Add two ",(0,s.jsx)(n.code,{children:"juce::dsp::Gain"})," processors to the processor chain with the ",(0,s.jsx)(n.code,{children:"juce::dsp::WaveShaper"})," in between them [1] and add the corresponding indices to the enum as pre-gain [2] and post-gain [3]. These will allow us to adjust the level of the signal going into the waveshaper and control the level coming out of it, thus affecting the behaviour of the transfer function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"private:\n    //==============================================================================\n    enum\n    {\n        preGainIndex,    // [2]\n        waveshaperIndex,\n        postGainIndex    // [3]\n    };\n \n    juce::dsp::ProcessorChain, juce::dsp::WaveShaper, juce::dsp::Gain> processorChain; // [1].\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"In the constructor, change the transfer function to a hyperbolic tangent [4] as described in the introduction of this tutorial:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"public:\n    //==============================================================================\n    Distortion()\n    {\n        auto& waveshaper = processorChain.template get();\n        waveshaper.functionToUse = [] (Type x)\n                                   {\n                                       return std::tanh (x);           // [4]\n                                   };\n \n        auto& preGain = processorChain.template get();   // [5]\n        preGain.setGainDecibels (30.0f);                               // [6]\n \n        auto& postGain = processorChain.template get(); // [7]\n        postGain.setGainDecibels(-20.0f); // [8].\n    }\n"})}),"\n",(0,s.jsx)(n.p,{children:"Here we also retrieve a reference to the pre-gain processor [5] and boost the signal going into the waveshaper by 30dB [6]. Then we get a reference to the post-gain processor [7] and trim down the level coming from the waveshaper by 20dB [8]."}),"\n",(0,s.jsx)(n.p,{children:"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u307e\u305f\u9055\u3063\u305f\u6b6a\u3093\u3060\u30b5\u30a6\u30f3\u30c9\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3060\u3002"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_screenshot2.png",caption:"Waveshaping with the hyperbolic tangent function"}),"\n",(0,s.jsx)(n.p,{children:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d1\u30fc\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u4f1d\u9054\u95a2\u6570\u3092\u30b7\u30b0\u30ca\u30e0\u95a2\u6570\u306b\u5909\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u97f3\u306e\u9055\u3044\u3092\u611f\u3058\u307e\u3059\u304b\uff1f"}),"\n",(0,s.jsx)(n.h1,{id:"adjust-the-filter",children:"Adjust the filter"}),"\n",(0,s.jsx)(n.p,{children:"\u304a\u6c17\u3065\u304d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d1\u30fc\u3067\u4f4e\u57df\u3092\u6b6a\u307e\u305b\u308b\u3068\u3001\u6b6a\u3093\u3060\u97f3\u304c\u3059\u3050\u306b\u6fc1\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d1\u30fc\u3067\u4fe1\u53f7\u3092\u51e6\u7406\u3059\u308b\u524d\u306b\u30cf\u30a4\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u3001\u3053\u306e\u554f\u984c\u3092\u8efd\u6e1b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["Add a ",(0,s.jsx)(n.code,{children:"juce::dsp::ProcessorDuplicator"})," with the ",(0,s.jsx)(n.code,{children:"juce::dsp::IIR::Filter"})," and ",(0,s.jsx)(n.code,{children:"juce::dsp::IIR::Coefficients"}),' classes as template arguments [1] in order to easily convert the mono filter into a multi-channel version. To simplify the long class names, we use shorter names with the "using" keyword and add the corresponding index in the enum [2].']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"private:\n    //==============================================================================\n    enum\n    {\n        filterIndex,        // [2]\n        preGainIndex,\n        waveshaperIndex,\n        postGainIndex\n    };\n \n    using Filter = juce::dsp::IIR::Filter;\n    using FilterCoefs = juce::dsp::IIR::Coefficients;\n \n    juce::dsp::ProcessorChain,\n                              juce::dsp::Gain, juce::dsp::WaveShaper, juce::dsp::Gain> processorChain\uff1b\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"prepare()"})," function, get a reference to the filter processor [3] and specify the cut-off frequency of the high-pass filter to 1kHz by calling the ",(0,s.jsx)(n.code,{children:"makeFirstOrderHighPass()"})," function [4]:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    void prepare (const juce::dsp::ProcessSpec& spec)\n    {\n        auto& filter = processorChain.template get(); // [3]\n        filter.state = FilterCoefs::makeFirstOrderHighPass (spec.sampleRate, 1000.0f); // [4].\n \n        processorChain.prepare (spec)\uff1b\n    }\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u4fe1\u53f7\u306e\u4f4e\u57df\u304c\u6e1b\u8870\u3057\u3001\u3088\u308a\u30af\u30ea\u30a2\u306a\u30b5\u30a6\u30f3\u30c9\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_screenshot3.png",caption:"Filtering before the waveshaper"}),"\n",(0,s.jsx)(n.p,{children:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d4\u30f3\u30b0\u306e\u524d\u306b\u3055\u307e\u3056\u307e\u306a\u30bf\u30a4\u30d7\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u8a66\u3057\u3001\u6b6a\u3093\u3060\u4fe1\u53f7\u306e\u9ad8\u8abf\u6ce2\u6210\u5206\u304c\u3069\u306e\u3088\u3046\u306b\u5909\u5316\u3059\u308b\u304b\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002"}),"\n",(0,s.jsx)(n.h1,{id:"implement-the-cabinet-simulator",children:"Implement the cabinet simulator"}),"\n",(0,s.jsx)(n.p,{children:"\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u30ae\u30bf\u30fc\u30fb\u30ad\u30e3\u30d3\u30cd\u30c3\u30c8\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u30b5\u30a6\u30f3\u30c9\u306b\u3055\u3089\u306b\u500b\u6027\u3092\u4e0e\u3048\u3066\u307f\u3088\u3046\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"\u30ad\u30e3\u30d6\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc"})," class, add a ",(0,s.jsx)(n.code,{children:"juce::dsp::Convolution"})," processor to the processor chain [1] and add its corresponding index in the enum [2]."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"private:\n    //==============================================================================\n    enum\n    {\n        convolutionIndex // [2]\n    };\n \n    juce::dsp::ProcessorChainprocessorChain\uff1b\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"\u30ea\u30bb\u30c3\u30c8"})," function, call the reset function of the convolver in the processor chain [3]."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void reset() noexcept\n    {\n        processorChain.reset(); // [3].\n    }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"prepare()"})," function, call the prepare function of the convolver in the processor chain [4]."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"private:\n    //==============================================================================\n    enum\n    {\n        convolutionIndex // [2]\n    };\n \n    juce::dsp::ProcessorChainprocessorChain\uff1b\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now we want to specify the impulse response that the convolver will use to reverberate the incoming signal. As presented in the introduction section of this tutorial, let's load the convolution processor with the guitar amp impulse response included in the ",(0,s.jsx)(n.code,{children:"\u30ea\u30bd\u30fc\u30b9"})," folder of the project."]}),"\n",(0,s.jsxs)(n.p,{children:["In the constructor, get a reference to the Convolution processor by supplying the index of the process and use the ",(0,s.jsx)(n.code,{children:"processorChain.get<>()"})," method [5]. Let's initialise the convolver with the guitar amp impulse response by loading the audio file from the ",(0,s.jsx)(n.code,{children:"\u30ea\u30bd\u30fc\u30b9"})," folder [6]."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'    CabSimulator()\n    {\n        auto dir = juce::File::getCurrentWorkingDirectory();\n \n        int numTries = 0;\n \n        while (! dir.getChildFile ("Resources").exists() && numTries++ < 15)\n            dir = dir.getParentDirectory();\n \n        auto& convolution = processorChain.template get(); // [5]\n \n        convolution.loadImpulseResponse (dir.getChildFile ("Resources").getChildFile ("guitar_amp.wav")\u3001\n                                         juce::dsp::Convolution::Stereo::yes\u3001\n                                         juce::dsp::Convolution::Trim::no\u3001\n                                         1024); // [6]\n    }\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:['Make sure that the "guitar_amp.wav" file exists in the ',(0,s.jsx)(n.code,{children:"\u30ea\u30bd\u30fc\u30b9"})," folder of your project."]})}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"\u30d7\u30ed\u30bb\u30b9()"})," function, we can call the process function of the convolver in the processor chain [7]."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    template void process (const ProcessContext& context) noexcept\n    {\n        processorChain.process (context); // [7].\n    }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"\u30c7\u30a3\u30b9\u30c8\u30fc\u30b7\u30e7\u30f3"})," class, remove the gain trim or set its level to 0dB of attenuation [8] as the signal will get attenuated naturally through the convolution process which happens after the distortion in our signal chain:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"public:\n    //==============================================================================\n    Distortion()\n    {\n        auto& waveshaper = processorChain.template get();\n        waveshaper.functionToUse = [] (Type x)\n                                   {\n                                       return std::tanh (x);\n                                   };\n \n        auto& preGain = processorChain.template get();\n        preGain.setGainDecibels (30.0f);\n \n        auto& postGain = processorChain.template get();\n        postGain.setGainDecibels (0.0f); // [8].\n    }\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u3001\u3069\u306e\u3088\u3046\u306b\u805e\u3053\u3048\u308b\u304b\u898b\u3066\u307f\u3088\u3046\u3002"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_dsp_convolution_screenshot4.png",caption:"Guitar amp simulation with convolution"}),"\n",(0,s.jsxs)(n.p,{children:["Load the impulse reponse of the cassette recorder included in the ",(0,s.jsx)(n.code,{children:"\u30ea\u30bd\u30fc\u30b9"})," folder and notice how drastically the convolved sound changes."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The source code for this modified version of the code can be found in the ",(0,s.jsx)(n.code,{children:"DSPConvolutionTutorial_02.h"})," file of the demo project."]})}),"\n",(0,s.jsx)(n.h1,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d4\u30f3\u30b0\u3068\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306e\u53d6\u308a\u5165\u308c\u65b9\u3092\u5b66\u3093\u3060\u3002\u7279\u306b"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d4\u30f3\u30b0\u3068\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306e\u57fa\u790e\u3092\u5b66\u3076\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u30cf\u30fc\u30c9\u30af\u30ea\u30c3\u30d4\u30f3\u30b0\u30fb\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30a4\u30d1\u30fc\u3092\u5185\u8535\u3057\u3001\u6b6a\u307f\u3092\u4f5c\u308a\u51fa\u3059\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u30a6\u30a7\u30fc\u30d6\u30b7\u30a7\u30fc\u30d1\u30fc\u306e\u4f1d\u9054\u66f2\u7dda\u3092\u53cc\u66f2\u7dda\u30bf\u30f3\u30b8\u30a7\u30f3\u30c8\u306b\u5909\u66f4\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u7573\u307f\u8fbc\u307f\u6280\u8853\u3092\u7528\u3044\u305f\u30ad\u30e3\u30d3\u30cd\u30c3\u30c8\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u3092\u5b9f\u88c5\u3002"}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["Jump back to part 1 of this tutorial to understand oscillators and filters here: ",(0,s.jsx)(n.a,{href:"../tutorial_dsp_introduction/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebDSP\u5165\u9580"})]}),(0,s.jsxs)(n.p,{children:["Check out part 3 of this tutorial to add delay lines here: ",(0,s.jsx)(n.a,{href:"../tutorial_dsp_delay_line/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30c7\u30a3\u30ec\u30a4\u30e9\u30a4\u30f3\u3092\u4f7f\u3063\u305f\u30b9\u30c8\u30ea\u30f3\u30b0\u30fb\u30e2\u30c7\u30eb\u306e\u4f5c\u6210"})]})]}),"\n",(0,s.jsx)(n.h1,{id:"\u95a2\u9023\u9805\u76ee",children:"\u95a2\u9023\u9805\u76ee"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../tutorial_simple_fft/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../tutorial_spectrum_analyser/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u4fe1\u53f7\u306e\u5468\u6ce2\u6570\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u53ef\u8996\u5316\u3059\u308b"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../tutorial_simd_register_optimisation/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebSIMDRegister\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u305f\u6700\u9069\u5316"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../tutorial_dsp_introduction/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebDSP\u5165\u9580"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../tutorial_dsp_delay_line/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30c7\u30a3\u30ec\u30a4\u30e9\u30a4\u30f3\u3092\u4f7f\u3063\u305f\u30b9\u30c8\u30ea\u30f3\u30b0\u30fb\u30e2\u30c7\u30eb\u306e\u4f5c\u6210"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},3449:(e,n,t)=>{t.d(n,{A:()=>o});var s=t(4848);function o(e){let{src:n,caption:t,alt:o,width:i,height:r}=e;return(0,s.jsxs)("figure",{children:[(0,s.jsx)("img",{src:n,alt:o||t,width:i,height:r}),(0,s.jsx)("figcaption",{children:(0,s.jsx)("b",{children:t})})]})}},6378:(e,n,t)=>{t.d(n,{A:()=>o});var s=t(4848);function o(e){let{path:n}=e;return(0,s.jsx)("p",{children:(0,s.jsx)("a",{href:`https://docs.juce.com/master/${n}.html`,children:"\ud83d\udcda Source Page"})})}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);