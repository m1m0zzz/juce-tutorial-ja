"use strict";(self.webpackChunkjuce_tutorial_ja=self.webpackChunkjuce_tutorial_ja||[]).push([[240],{7605:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var s=t(4848),o=t(8453),i=t(3449);t(6378);const r={title:"\u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u306e\u753b\u9762\u30b5\u30a4\u30ba\u306e\u7ba1\u7406",sidebar_position:2},a="\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebAndroid\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3092\u7ba1\u7406\u3059\u308b",d={id:"mobile/tutorial_android_screen_sizes",title:"\u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u306e\u753b\u9762\u30b5\u30a4\u30ba\u306e\u7ba1\u7406",description:"\u3055\u307e\u3056\u307e\u306a\u753b\u9762\u30b5\u30a4\u30ba\u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001Android\u3067\u5229\u7528\u53ef\u80fd\u306a\u753b\u9762\u30b5\u30a4\u30ba\u306f\u6570\u591a\u304f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u3044\u304f\u3064\u304b\u306e\u6226\u7565\u3092\u691c\u8a0e\u3057\u307e\u3059\u3002",source:"@site/docs/mobile/tutorial_android_screen_sizes.mdx",sourceDirName:"mobile",slug:"/mobile/tutorial_android_screen_sizes",permalink:"/juce-tutorial-ja/mobile/tutorial_android_screen_sizes",draft:!1,unlisted:!1,editUrl:"https://github.com/m1m0zzz/juce-tutorial-ja/tree/main/docs/mobile/tutorial_android_screen_sizes.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"\u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u306e\u753b\u9762\u30b5\u30a4\u30ba\u306e\u7ba1\u7406",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u5165\u9580",permalink:"/juce-tutorial-ja/mobile/tutorial_android_studio"},next:{title:"\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u304a\u3088\u3073\u30e2\u30d0\u30a4\u30eb\u30c7\u30d0\u30a4\u30b9\u3067\u306e\u30a2\u30d7\u30ea\u5185\u8ab2\u91d1",permalink:"/juce-tutorial-ja/mobile/tutorial_new_projucer_project"}},c={},l=[{value:"Arrays of components",id:"arrays-of-components",level:2},{value:"Using a custom slider thumb size",id:"using-a-custom-slider-thumb-size",level:2},{value:"Resizing the buttons and sliders",id:"resizing-the-buttons-and-sliders",level:2},{value:"Laying out the components",id:"laying-out-the-components",level:2},{value:"Choosing single or multiple pages",id:"choosing-single-or-multiple-pages",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebandroid\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3092\u7ba1\u7406\u3059\u308b",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebAndroid\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3092\u7ba1\u7406\u3059\u308b"}),"\n",(0,s.jsx)(n.p,{children:"\u3055\u307e\u3056\u307e\u306a\u753b\u9762\u30b5\u30a4\u30ba\u306b\u5bfe\u5fdc\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\u3002\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001Android\u3067\u5229\u7528\u53ef\u80fd\u306a\u753b\u9762\u30b5\u30a4\u30ba\u306f\u6570\u591a\u304f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u3044\u304f\u3064\u304b\u306e\u6226\u7565\u3092\u691c\u8a0e\u3057\u307e\u3059\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u30ec\u30d9\u30eb Intermediate"}),"\n",(0,s.jsx)(n.p,{children:"\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0 Android, macOS, Windows"}),"\n",(0,s.jsxs)(n.p,{children:["\u30af\u30e9\u30b9\uff1a ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classDesktop",title:"Describes and controls aspects of the computer's desktop.",children:"\u30c7\u30b9\u30af\u30c8\u30c3\u30d7"}),", ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classAffineTransform",title:"Represents a 2D affine-transformation matrix.",children:"\u30a2\u30d5\u30a3\u30f3\u5909\u63db"}),", ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})]}),"\n",(0,s.jsx)(n.h1,{id:"getting-started",children:"Getting started"}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001JUCE\u3092\u4f7f\u7528\u3057\u3066Android\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u4e0a\u3067\u7570\u306a\u308b\u753b\u9762\u30b5\u30a4\u30ba\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u3044\u304f\u3064\u304b\u306e\u6226\u7565\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u30c7\u30e2\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30fb\u30ea\u30f3\u30af\u306f\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u95a2\u9023\u3059\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u3042\u308a\u307e\u3059\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["If you need help with this step in each of these sections, see ",(0,s.jsx)(n.a,{href:"../tutorial_new_projucer_project/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebProjucer\u30d1\u30fc\u30c81\uff1aProjucer\u3092\u59cb\u3081\u308b"}),"."]}),"\n",(0,s.jsx)(n.h1,{id:"the-demo-projects",children:"The demo projects"}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u63d0\u4f9b\u3055\u308c\u308b\u30c7\u30e2\u30fb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001JUCE\u3092\u4f7f\u7528\u3057\u3066Android\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u4e0a\u3067\u7570\u306a\u308b\u753b\u9762\u30b5\u30a4\u30ba\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u3044\u304f\u3064\u304b\u306e\u7570\u306a\u308b\u65b9\u6cd5\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u5927\u307e\u304b\u306b\u3001\u3053\u308c\u3089\u306e\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5185\u306e\u5b50\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u5909\u66f4\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30e0\u3092\u4f7f\u7528\u3057\u305f\u30e1\u30a4\u30f3\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\u5909\u66f4\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u65b9\u5411\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u8a2d\u8a08\u3059\u308b\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u30b5\u30a4\u30ba\u3054\u3068\u306b\u7570\u306a\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u8a2d\u8a08\u3002"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"android-screen-sizes",children:"Android screen sizes"}),"\n",(0,s.jsx)(n.p,{children:"\u7279\u306b\u30d5\u30eb\u30b9\u30af\u30ea\u30fc\u30f3\u3067\u306e\u64cd\u4f5c\u3092\u671f\u5f85\u3059\u308b\u30c7\u30d0\u30a4\u30b9\uff08\u30e2\u30d0\u30a4\u30eb\u30c7\u30d0\u30a4\u30b9\u306a\u3069\uff09\u3067\u306f\u3001\u3059\u3079\u3066\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3068\u3055\u307e\u3056\u307e\u306a\u30c7\u30d0\u30a4\u30b9\u306e\u5411\u304d\u3067\u52b9\u679c\u7684\u306a\u30e6\u30fc\u30b6\u30fc\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u30c7\u30b6\u30a4\u30f3\u3059\u308b\u3053\u3068\u304c\u8ab2\u984c\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u591a\u304f\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3068\u89e3\u50cf\u5ea6\u304c\u5b58\u5728\u3059\u308b\u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u30fb\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u306f\u7279\u306b\u96e3\u3057\u3044\u3053\u3068\u3067\u3059\u3002\u3053\u3053\u3067\u306f\u4e3b\u306b3\u3064\u306e\u554f\u984c\u304c\u3042\u308b\uff1a"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"\u7269\u7406\u7684\u30b5\u30a4\u30ba"}),": The physical size of the screen measure in standard units of measure (the common measure being the distance across the diagonal of the screen, measured in inches)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"\u6c7a\u8b70"}),": The screen resolution measured in pixels."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"\u30aa\u30ea\u30a8\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3"}),": The device orientation, whether landscape or portrait."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The relationship between the physical size and the resolution is important. It is especially important when considering high resolution screens where the physical pixels are smaller, and more densely packed, than standard resolution screens. The combination of a particular physical screen size and its resolution results in the screen's ",(0,s.jsx)(n.em,{children:"\u30c9\u30c3\u30c8\u30fb\u30d1\u30fc\u30fb\u30a4\u30f3\u30c1"})," (DPI). This is related to the screen ",(0,s.jsx)(n.em,{children:"\u30d4\u30af\u30bb\u30eb\u5bc6\u5ea6"}),'. This is how many physical pixels take up the space of a "software" pixel, in each dimension, as a pixel on a standard density screen.']}),"\n",(0,s.jsx)(n.p,{children:"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u306f\u3001\u7269\u7406\u7684\u306a\u5927\u304d\u3055\u304c\u6700\u3082\u91cd\u8981\u306a\u5834\u5408\u3082\u3042\u308b\u3002\u4f8b\u3048\u3070\u3001\u7e4a\u7d30\u306a\u6307\u306e\u52d5\u304d\u304b\u3089\u306a\u308b\u8907\u96d1\u306a\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306a\u3069\u3067\u3059\u3002\u3053\u306e\u5834\u5408\u3001\u753b\u9762\u30b5\u30a4\u30ba\u3068\u5178\u578b\u7684\u306a\u30e6\u30fc\u30b6\u30fc\u306e\u624b\u306e\u5927\u304d\u3055\u304c\u91cd\u8981\u3067\u3059\u3002\u4ed6\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001\u753b\u9762\u306eDPI\u304c\u3088\u308a\u91cd\u8981\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001DPI\u304c\u9ad8\u304f\u3066\u3082\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3051\u308c\u3070\u30c6\u30ad\u30b9\u30c8\u306f\u8aad\u307f\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u4e0a\u306e\u7269\u7406\u7684\u306a\u30b5\u30a4\u30ba\u3067\u6e2c\u5b9a\u3057\u305f\u5834\u5408\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u53ef\u8aad\u6027\u306b\u306f\u9650\u754c\u304c\u3042\u308a\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u8a08\u3059\u308b\u969b\u306b\u306f\u3001\u7269\u7406\u7684\u306a\u30b5\u30a4\u30ba\u3068\u89e3\u50cf\u5ea6\uff08\u3057\u305f\u304c\u3063\u3066DPI\uff09\u306e\u4e21\u65b9\u3092\u8003\u616e\u306b\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["By default, JUCE scales its coordinate system based on the pixel density of the screen. This means that shapes and text drawn on a high density screen should appear roughly the same physical size as they do on standard density screens. In JUCE, you can access information about a particular display via the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classDesktop",title:"Describes and controls aspects of the computer's desktop.",children:"\u30c7\u30b9\u30af\u30c8\u30c3\u30d7"}),' class. Here you can find the available displays and which one is marked as the "main display" (especially if there are multiple displays).']}),"\n",(0,s.jsxs)(n.p,{children:["Unfortunately, the value that JUCE can access to obtain the display's DPI is only an approximation (since not all screen devices report this information properly). This means we can't measure the physical size of the user's screen accurately. But the information provided by the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classDesktop",title:"Describes and controls aspects of the computer's desktop.",children:"\u30c7\u30b9\u30af\u30c8\u30c3\u30d7"})," class should be good enough as a guide for scaling your user interface depending on the needs of your application."]}),"\n",(0,s.jsxs)(n.p,{children:["In each of the examples that follow we use a child component, called ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"}),", that is managed and resized by the parent component (",(0,s.jsx)(n.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"}),")."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"\u3053\u308c\u3089\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092macOS\u307e\u305f\u306fWindows\u3067\u30c6\u30b9\u30c8\u3059\u308b\u3068\u3001\u30e1\u30a4\u30f3\u30fb\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5e45\u3068\u9ad8\u3055\u3092\u52d5\u7684\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3042\u308b\u7a0b\u5ea6\u6a5f\u80fd\u3057\u307e\u3059\u304c\u3001\u30c6\u30b9\u30c8\u76ee\u7684\u4ee5\u5916\u3067\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u6a5f\u80fd\u3068\u3057\u3066\u610f\u56f3\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001\u30b5\u30a4\u30ba\u306e\u983b\u7e41\u306a\u5909\u66f4\u3092\u60f3\u5b9a\u3057\u3066\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8d77\u52d5\u6642\u3084\u3001\u30e6\u30fc\u30b6\u30fc\u304cAndroid\u30c7\u30d0\u30a4\u30b9\u3092\u56de\u8ee2\u3055\u305b\u305f\u6642\u306a\u3069\u306b\u30011\u56de\u3060\u3051\u8a2d\u5b9a\u3057\u307e\u3059\u3002"})}),"\n",(0,s.jsx)(n.h1,{id:"resizing-child-components-simple-resize",children:"Resizing child components (simple resize)"}),"\n",(0,s.jsxs)(n.p,{children:["Download the demo project for this section here: ",(0,s.jsx)(n.a,{href:"/tutorials/PIPs/AndroidScreenSizesTutorialSimpleResize.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,s.jsx)(n.a,{href:"/tutorials/ZIPs/AndroidScreenSizesTutorialSimpleResize.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u4f8b\u3067\u306f\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u3068\u30dc\u30bf\u30f3\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u542b\u3080\u5358\u7d14\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u5b50\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u306f\u3001\u305d\u308c\u305e\u308c\u753b\u9762\u306e\u9ad8\u3055\uff08\u7aef\u306e\u5c0f\u3055\u306a\u5883\u754c\u7dda\u3092\u9664\u304f\uff09\u306e\u5272\u5408\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3002\u6c34\u5e73\u65b9\u5411\u3067\u3082\u540c\u69d8\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u53ef\u80fd\u3067\u3059\u3002\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u3068\u30dc\u30bf\u30f3\u306f\u3001\u753b\u9762\u306e\u5e45\u5168\u4f53\u3092\u5360\u3081\u308b\u3060\u3051\u3067\u3059\uff08\u3053\u3053\u3067\u3082\u3001\u5c0f\u3055\u306a\u30dc\u30fc\u30c0\u30fc\u3092\u9664\u304d\u307e\u3059\uff09\u3002\u753b\u9762\u304c\u7e26\u5411\u304d\u3067\u3001\u30b5\u30a4\u30ba\u304c\u6570\u767e\u30d4\u30af\u30bb\u30eb\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_android_screen_sizes_screenshot1.png",caption:"Simple resizing of child components: Portrait"}),"\n",(0,s.jsx)(n.p,{children:"\u6a2a\u5411\u304d\u306e\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_android_screen_sizes_screenshot2.png",caption:"Simple resizing of child components: Landscape"}),"\n",(0,s.jsx)(n.h2,{id:"arrays-of-components",children:"Arrays of components"}),"\n",(0,s.jsxs)(n.p,{children:["To store the buttons and sliders in the ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," class we use the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classOwnedArray",title:"An array designed for holding objects.",children:"\u6240\u6709\u914d\u5217"})," template class (which means that these child components will be deleted automatically in the ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," destructor). First, in the ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," constructor, we build an array of ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classColour",title:"Represents a colour, also including a transparency value.",children:"\u30ab\u30e9\u30fc"})," objects. These are used to set the colours of the buttons, the slider thumbs, and the slider tracks:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"        ResizingComp()\n        {\n            juce::Arraycolours { juce::Colour (0xffb3c3Da), juce::Colour (0xff5973b8), juce::Colour (0xffd65667), juce::Colour (0xffd99154)\u3001\n                                                juce::Colour (0xffe5ad6c), juce::Colour (0xffecc664), juce::Colour (0xffefe369), juce::Colour (0xffdddB74) }\uff1b\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"\u3053\u308c\u3089\u306f\u5076\u7136\u306b\u3082JUCE\u306e\u30ed\u30b4\u306e\u8272\u3067\u3042\u308b\uff01"})}),"\n",(0,s.jsxs)(n.p,{children:["We then use a ",(0,s.jsx)(n.code,{children:"for()"})," loop to allocate and configure the multiple buttons:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'for (auto i = 0; i < 6; ++i)\n            {\n                auto* button = buttons.add (new juce::TextButton (juce::String ("Button ") + juce::String (i + 1)))\uff1b\n                addAndMakeVisible (button)\uff1b\n \n                button->setColour (juce::TextButton::buttonColourId\u3001\n                                   colours.getUnchecked (i % colors.size()))\uff1b\n            }\n'})}),"\n",(0,s.jsx)(n.p,{children:"\u30b9\u30e9\u30a4\u30c0\u30fc\u3082\u540c\u3058\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\uff08\u305f\u3060\u3057\u3001\u9762\u767d\u3055\u3092\u4fdd\u3064\u305f\u3081\u306b\u3001\u8272\u306e\u914d\u5217\u3092\u4f7f\u3063\u3066\u8272\u306e\u9078\u629e\u3092\u6df7\u305c\u3066\u3044\u308b\uff09\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"for (auto i = 0; i < 6; ++i)\n            {\n                auto* slider = sliders.add (new juce::Slider())\uff1b\n                addAndMakeVisible (slider)\uff1b\n \n                slider->setColour (juce::Slider::thumbColourId\u3001\n                                   colours.getUnchecked ((buttons.size() + i) % colors.size()))\uff1b\n                slider->setColour (juce::Slider::backgroundColourId\u3001\n                                   colours.getUnchecked ((buttons.size() + i + 2) % colors.size()).withAlpha (0.4f))\uff1b\n                slider->setColour (juce::Slider::trackColourId\u3001\n                                   colors.getUnchecked ((buttons.size() + i + 2) % colors.size()))\uff1b\n                slider->setColour (juce::Slider::textBoxTextColourId, juce::Colours::black)\uff1b\n            }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"using-a-custom-slider-thumb-size",children:"Using a custom slider thumb size"}),"\n",(0,s.jsxs)(n.p,{children:["In order to be more usable with a touchscreen interface the slider thumb has been customised so that it is usually larger than the standard size. To do this we have added a subclass of the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classLookAndFeel__V4",title:"The latest JUCE look-and-feel style, as introduced in 2017.",children:"LookAndFeel_V4"})," and overridden the ",(0,s.jsx)(n.a,{href:"structSlider_1_1LookAndFeelMethods.html#a71905c89182698a67da8929077e768f8",children:"LookAndFeel::getSliderThumbRadius()"})," function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"class CustomLookAndFeel : public juce::LookAndFeel_V4\n        {\n        public\uff1a\n            int getSliderThumbRadius (juce::Slider& slider) override\n            {\n                return juce::jmin (slider.getWidth(), slider.getHeight()) / 2\uff1b\n            }\n        };\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We add an instance of this class as a member of our ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"        juce::OwnedArray buttons;\n        juce::OwnedArray\u30b9\u30e9\u30a4\u30c0\u30fc\n        CustomLookAndFeel lf\uff1b\n    };\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And at the end of our ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," constructor we set this as our look-and-feel for this component and all of its children."]}),"\n",(0,s.jsxs)(n.p,{children:["And in our ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," destructor we set this to nullptr."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"~\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n        {\n            setLookAndFeel (nullptr)\uff1b\n        }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"resizing-the-buttons-and-sliders",children:"Resizing the buttons and sliders"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"ResizingComp::resized()"})," function we iterate over the arrays of buttons and sliders and set their bounds:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void resized() override\n        {\n            auto space = 8\uff1b\n            auto widgetHeight = (getHeight() - space) / (buttons.size() + sliders.size()) - space\uff1b\n \n            for (auto* button : buttons)\n                button->setBounds (space, space + (widgetHeight + space) * buttons.indexOf (button)\u3001\n                                   getWidth() - space - space, widgetHeight)\uff1b\n \n            for (auto* slider : sliders)\n                slider->setBounds (space, space + (widgetHeight + space) * (sliders.indexOf (slider) + buttons.size())\u3001\n                                   getWidth() - space - space, widgetHeight)\uff1b\n        }\n"})}),"\n",(0,s.jsx)(n.p,{children:'\u3053\u3053\u3067\u306f\u3001\u5b9a\u6570\u5024(8)\u3092\u4f7f\u7528\u3057\u3066\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u5206\u96e2\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u5229\u7528\u53ef\u80fd\u306a\u9ad8\u3055\u3068 "\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8"\uff08\u30dc\u30bf\u30f3\u3068\u30b9\u30e9\u30a4\u30c0\u30fc\uff09\u306e\u6570\u306b\u57fa\u3065\u3044\u3066 "\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306e\u9ad8\u3055 "\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002'}),"\n",(0,s.jsx)(n.p,{children:"\u753b\u9762\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3059\u304e\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u3088\u3046\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u4f7f\u7528\u3067\u304d\u306a\u304f\u306a\u308a\u3001\u8aad\u3081\u306a\u304f\u306a\u308b\uff1a"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_android_screen_sizes_screenshot3.png",caption:"Simple resizing when the screen is too small"}),"\n",(0,s.jsx)(n.p,{children:"\u3068\u306f\u3044\u3048\u3001\u307b\u3068\u3093\u3069\u306e\u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u7aef\u672b\u3067\u306f\u305d\u308c\u306a\u308a\u306b\u898b\u3048\u308b\u306f\u305a\u3060\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u3084\u30dc\u30bf\u30f3\u306e\u6570\u3092\u5909\u3048\u308b\u3002"}),"\n",(0,s.jsx)(n.h1,{id:"resizing-the-main-component-using-a-transform",children:"Resizing the main component using a transform"}),"\n",(0,s.jsxs)(n.p,{children:["Download the demo project for this section here: ",(0,s.jsx)(n.a,{href:"/tutorials/PIPs/AndroidScreenSizesTutorialTransform.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,s.jsx)(n.a,{href:"/tutorials/ZIPs/AndroidScreenSizesTutorialTransform.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,s.jsxs)(n.p,{children:["This example uses an alternative to resizing the child components. Instead, the ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," component is set to a nominal size (480 by 640 pixels) and then the ",(0,s.jsx)(n.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," object applies an affine transform to scale this up or down to match the screen size. This is done while keeping the same aspect ratio (leaving whitespace to the side or above and below the sliders and buttons). The code for the ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," class is the same as for the ",(0,s.jsx)(n.a,{href:"#tutorial_android_screen_sizes_resizing_child_components",children:"\u30b7\u30f3\u30d7\u30eb\u30fb\u30ea\u30b5\u30a4\u30ba"})," example. But in the ",(0,s.jsx)(n.code,{children:"MainContentComponent::resized()"})," function we set the size of the ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," component then calculate the required transform:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    void resized() override\n    {\n        auto contentWidth  = 480;\n        auto contentHeight = 640;\n \n        auto scaleX = (float) getWidth()  / static_cast (contentWidth);\n        auto scaleY = (float) getHeight() / static_cast(contentHeight)\uff1b\n        auto scale = juce::jmin (scaleX, scaleY)\uff1b\n \n        resizingComp->setTransform (juce::AffineTransform::scale (scale, scale))\uff1b\n        resizingComp->centreWithSize (contentWidth, contentHeight)\uff1b\n    }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This code calculates the ratio between our nominal size and the actual size of the screen in software pixels. It then chooses the smallest of these ratios in order to maintain the aspect ratio, while keeping all of the content onscreen. We then create an instance of the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classAffineTransform",title:"Represents a 2D affine-transformation matrix.",children:"\u30a2\u30d5\u30a3\u30f3\u5909\u63db"})," class using the ",(0,s.jsx)(n.a,{href:"classAffineTransform.html#a43665170b0ec3ef0d1afef4053e77a24",title:"Returns a new transform which is a re-scale about the origin.",children:"AffineTransform::scale()"})," function and centre the scale transform around the centre of the screen. The transform is applied to the component using the Component::setTransform() function. The result is quite different from the ",(0,s.jsx)(n.a,{href:"#tutorial_android_screen_sizes_resizing_child_components",children:"\u30b7\u30f3\u30d7\u30eb\u30fb\u30ea\u30b5\u30a4\u30ba"})," method."]}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_android_screen_sizes_screenshot4.png",caption:"Scaling the whole UI using a transform showing both portrait and landscape orientations"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30e0\u3092\u9069\u7528\u3059\u308b\u3068\u3001\u30e6\u30fc\u30b6\u30fc\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u63cf\u753b\u304c\u5909\u63db\u3055\u308c\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30bf\u30c3\u30c1\uff08\u304a\u3088\u3073\u30de\u30a6\u30b9\uff09\u30a2\u30af\u30c6\u30a3\u30d3\u30c6\u30a3\u306e\u4f4d\u7f6e\u3082\u5909\u63db\u3055\u308c\u307e\u3059\u3002"})}),"\n",(0,s.jsx)(n.h1,{id:"designing-different-layouts-for-different-orientations",children:"Designing different layouts for different orientations"}),"\n",(0,s.jsxs)(n.p,{children:["Download the demo project for this section here: ",(0,s.jsx)(n.a,{href:"/tutorials/PIPs/AndroidScreenSizesTutorialLayoutsOrientation.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,s.jsx)(n.a,{href:"/tutorials/ZIPs/AndroidScreenSizesTutorialLayoutsOrientation.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,s.jsxs)(n.p,{children:["This example looks at one method of displaying a different layout depending on the orientation of the screen (or device). The ",(0,s.jsx)(n.a,{href:"classDesktop.html#a02ae21e312faf1715e8311f1f53e5e00",title:"In a tablet device which can be turned around, this returns the current orientation.",children:"Desktop::getCurrentOrientation()"})," function provides means of accessing the device orientation. In fact, there are four possible orientations:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u30a2\u30c3\u30d7\u30e9\u30a4\u30c8\uff08\u30dd\u30fc\u30c8\u30ec\u30fc\u30c8\uff09\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u9006\u3055\u307e\uff08\u30dd\u30fc\u30c8\u30ec\u30fc\u30c8\u3092180\u5ea6\u56de\u8ee2\u3055\u305b\u305f\u3082\u306e\uff09\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u30c7\u30d0\u30a4\u30b9\u3092\u6642\u8a08\u56de\u308a\u306b90\u5ea6\u56de\u8ee2\uff08\u6a2a\u5411\u304d\u306e1\u30d0\u30fc\u30b8\u30e7\u30f3\uff09\u3002"}),"\n",(0,s.jsx)(n.li,{children:"\u30c7\u30d0\u30a4\u30b9\u3092\u53cd\u6642\u8a08\u56de\u308a\u306b90\u5ea6\u56de\u8ee2\uff08\u6a2a\u5411\u304d\u306e\u5225\u30d0\u30fc\u30b8\u30e7\u30f3\uff09\u3002"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u7c21\u5358\u306e\u305f\u3081\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u7e26\u9577\u306e\u753b\u9762\u3092\u6a2a\u9577\u306e\u753b\u9762\u3068\u3057\u3066\u6271\u3044\u307e\u3059\uff08\u6a2a\u9577\u306e\u753b\u9762\u3092\u7e26\u9577\u306e\u753b\u9762\u3068\u3057\u3066\u6271\u3044\u307e\u3059\uff09\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["This example uses the same technique for scaling the user interface ",(0,s.jsx)(n.a,{href:"#tutorial_android_screen_sizes_resizing_main_component_transform",children:"\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30e0"})," that we saw earlier. The differences are that this ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," class uses a different layout depending on the orientation, and the ",(0,s.jsx)(n.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," class has two nominal sizes (one for landscape orientation and one for portrait orientation). The orientation is determined in the ",(0,s.jsx)(n.code,{children:"MainContentComponent::resized()"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void resized() override\n    {\n        auto isLandscape = getWidth() > getHeight()\uff1b\n        auto contentWidth = isLandscape ?640 : 480;\n        auto contentHeight = isLandscape ?480 : 640;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Then, in the ",(0,s.jsx)(n.code,{children:"ResizingComp::resized()"})," function we select from two resizing functions depending on the orientation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void resized() override\n        {\n            if (getHeight() > getWidth())\n                resizedPortrait()\uff1b\n            \u3055\u3082\u306a\u3051\u308c\u3070\n                resizedLandscape()\uff1b\n        }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30ba\u30dd\u30fc\u30c8\u30ec\u30a4\u30c8()"})," and ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30ba\u30e9\u30f3\u30c9\u30b9\u30b1\u30fc\u30d7()"})," functions then use different arithmetic to layout the buttons and sliders."]}),"\n",(0,s.jsx)(n.p,{children:"\u6a2a\u5411\u304d\u306e\u5834\u5408\u3001\u30dc\u30bf\u30f3\u3068\u30b9\u30e9\u30a4\u30c0\u30fc\u306f1\u5217\u3067\u306f\u306a\u304f2\u5217\u3067\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306b\u793a\u3055\u308c\u3066\u3044\u307e\u3059\uff1a"}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_android_screen_sizes_screenshot5.png",caption:"Using a different layout in landscape orientation"}),"\n",(0,s.jsxs)(n.p,{children:["Change the code to use the ",(0,s.jsx)(n.a,{href:"classDesktop.html#a02ae21e312faf1715e8311f1f53e5e00",title:"In a tablet device which can be turned around, this returns the current orientation.",children:"Desktop::getCurrentOrientation()"})," function to determine the screen orientation, rather than comparing the width and height of the screen."]}),"\n",(0,s.jsx)(n.h1,{id:"designing-different-layouts-for-different-screen-sizes",children:"Designing different layouts for different screen sizes"}),"\n",(0,s.jsxs)(n.p,{children:["Download the demo project for this section here: ",(0,s.jsx)(n.a,{href:"/tutorials/PIPs/AndroidScreenSizesTutorialLayoutsSize.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,s.jsx)(n.a,{href:"/tutorials/ZIPs/AndroidScreenSizesTutorialLayoutsSize.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,s.jsxs)(n.p,{children:["This final example uses different layouts for different screen orientations and screen sizes. This kind of technique might be especially useful if you want to use a totally different layout for screen orientations or even make a universal application for Android phones and tablets. The method employed here is to use the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," class to arrange pages of components if they won't fit onto a single page."]}),"\n",(0,s.jsxs)(n.p,{children:["The responsibility of the ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," class changes a little in this project compared to the three earlier projects. In particular, we don't add the buttons and sliders as direct child components. Notice the lack of calls to the Component::addAndMakeVisible() function in the following code for the constructor:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'        ResizingComp()\n        {\n            juce::Arraycolours { juce::Colour (0xffb3c3Da), juce::Colour (0xff5973b8), juce::Colour (0xffd65667), juce::Colour (0xffd99154)\u3001\n                                                juce::Colour (0xffe5ad6c), juce::Colour (0xffecc664), juce::Colour (0xffefe369), juce::Colour (0xffdddB74) }\uff1b\n \n            for (auto i = 0; i < 6; ++i)\n            {\n                auto* button = buttons.add (new juce::TextButton (juce::String ("Button ") + juce::String (i + 1)))\uff1b\n \n                button->setColour (juce::TextButton::buttonColourId\u3001\n                                   colours.getUnchecked (i % colors.size()))\uff1b\n            }\n \n            for (auto i = 0; i < 6; ++i)\n            {\n                auto* slider = sliders.add (new juce::Slider())\uff1b\n \n                slider->setColour (juce::Slider::thumbColourId\u3001\n                                   colours.getUnchecked ((buttons.size() + i) % colors.size()))\uff1b\n                slider->setColour (juce::Slider::backgroundColourId\u3001\n                                   colours.getUnchecked ((buttons.size() + i + 2) % colors.size()).withAlpha (0.4f))\uff1b\n                slider->setColour (juce::Slider::trackColourId\u3001\n                                   colors.getUnchecked ((buttons.size() + i + 2) % colors.size()))\uff1b\n                slider->setColour (juce::Slider::textBoxTextColourId, juce::Colours::black)\uff1b\n            }\n \n            setLookAndFeel (&lf)\uff1b\n        }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," class manages the lifetime of the buttons and sliders but in terms of component hierarchy they are added to one or more instances of another component class called ",(0,s.jsx)(n.code,{children:"\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30db\u30eb\u30c0\u30fc"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"laying-out-the-components",children:"Laying out the components"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30db\u30eb\u30c0\u30fc"})," class holds an array of ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classComponent",title:"The base class for all JUCE user-interface objects.",children:"\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," pointers and lays the components out in one or two columns depending on the orientation. (The technique for achieving this layout was covered earlier when looking at different ",(0,s.jsx)(n.a,{href:"#tutorial_android_screen_sizes_different_layouts_orientation",children:"\u753b\u9762\u306e\u5411\u304d"}),".) There is a single function\u2014(",(0,s.jsx)(n.code,{children:"ComponentHolder::addComp()"}),"\u2014for adding a component that adds it to the internal array and calls Component::addAndMakeVisible():"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void addComp (Component* comp)\n            {\n                comps.add (comp)\uff1b\n                addAndMakeVisible (comp)\uff1b\n            }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The layout functions\u2014",(0,s.jsx)(n.code,{children:"ResizingComp::resizedPortrait()"})," and ",(0,s.jsx)(n.code,{children:"ResizingComp::resizedLandscape()"}),"\u2014should look familiar. Although these need to be slightly different since we no longer have separate arrays of sliders and buttons:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void resizedPortrait()\n            {\n                auto space = 8\uff1b\n                auto widgetHeight = (getHeight() - space) / comps.size() - space\uff1b\n \n                for (auto* comp : comps)\n                    comp->setBounds (space, space + (widgetHeight + space) * comps.indexOf (comp)\u3001\n                                     getWidth() - space - space, widgetHeight)\uff1b\n            }\n \n            void resizedLandscape()\n            {\n                auto space = 8\uff1b\n                auto halfComps = comps.size() / 2\uff1b\n                auto widgetHeight = (getHeight() - space) / halfComps - space\uff1b\n \n                for (auto* comp : comps)\n                {\n                    auto index = comps.indexOf (comp)\uff1b\n \n                    if (index < halfComps)\n                    {\n                        comp->setBounds (space, space + (widgetHeight + space) * index\u3001\n                                         getWidth() / 2 - space - space, widgetHeight)\uff1b\n                    }\n                    else\n                    {\n                        comp->setBounds (getWidth() / 2 + space, space + (widgetHeight + space) * (index - halfComps)\u3001\n                                         getWidth() / 2 - space - space, widgetHeight)\uff1b\n                    }\n                }\n            }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"choosing-single-or-multiple-pages",children:"Choosing single or multiple pages"}),"\n",(0,s.jsxs)(n.p,{children:["If the screen size is large, then only one of these ",(0,s.jsx)(n.code,{children:"\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30db\u30eb\u30c0\u30fc"})," components is created and all of the buttons and sliders are added to it. If the screen size is small then the ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," class uses a ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," object and adds two instances of the ",(0,s.jsx)(n.code,{children:"\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30db\u30eb\u30c0\u30fc"})," class to form the tabs of the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"}),". This decision to use a single page or multiple pages is managed by the ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," class in the ",(0,s.jsx)(n.code,{children:"ResizingComp::resized()"})," function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"void resized() override\n        {\n            if (holder.get() != nullptr)\n            {\n                removeChildComponent (holder.get())\uff1b\n                holder.reset()\uff1b\n            }\n \n            auto minimumDimension = juce::jmin (getWidth(), getHeight())\uff1b\n \n            if (minimumDimension >= 480)\n                layoutSinglePage()\uff1b\n            else\n                layoutTabs()\uff1b\n        }\n"})}),"\n",(0,s.jsxs)(n.p,{children:['Here you can see that we\'re saying a "large" screen is one that has one of its dimensions greater than or equal to 480 software pixels. Of course, you can choose a different value for your applications. The ',(0,s.jsx)(n.code,{children:"ResizingComp::layoutSinglePage()"})," function is straightforward:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"        void layoutSinglePage()\n        {\n            holder.reset (new ComponentHolder());\n \n            for (auto* button : buttons)\n                dynamic_cast (holder.get())->addComp (button);\n \n            for (auto* slider : sliders)\n                dynamic_cast(holder.get())->addComp (\u30b9\u30e9\u30a4\u30c0\u30fc)\uff1b\n \n            addAndMakeVisible (holder.get())\uff1b\n            holder->setBounds (getLocalBounds())\uff1b\n        }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here you can see that we add all of the buttons and sliders to the ",(0,s.jsx)(n.code,{children:"\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30db\u30eb\u30c0\u30fc"})," instance and add it as a child component of our ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," object. The ",(0,s.jsx)(n.code,{children:"ResizingComp::layoutTabs()"})," function is only a little more involved:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'        void layoutTabs()\n        {\n            auto orientation = getWidth() < getHeight() ? juce::TabbedButtonBar::TabsAtBottom\n                                                        : juce::TabbedButtonBar::TabsAtLeft;\n \n            holder.reset (new juce::TabbedComponent (orientation));         // [1]\n            addAndMakeVisible (holder.get());                               // [2]\n \n            auto* buttonTab = new ComponentHolder();                        // [3]\n            auto* sliderTab = new ComponentHolder();\n \n            dynamic_cast (holder.get())->addTab ("Buttons", juce::Colours::white, buttonTab, true); // [4]\n            dynamic_cast(holder.get())->addTab ("Sliders", juce::Colours::white, sliderTab, true)\uff1b\n \n            for (auto* button : buttons) // [5].\n                buttonTab->addComp (button)\uff1b\n \n            for (auto* slider : sliders) // [6] \u30b9\u30e9\u30a4\u30c0\u3092\u8ffd\u52a0\u3059\u308b\u3002\n                sliderTab->addComp (slider)\uff1b\n \n            holder->setBounds (getLocalBounds()); // [7].\n        }\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["[1]: We create the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," object and store it in our ",(0,s.jsx)(n.code,{children:"\u30db\u30fc\u30eb\u30c9"})," member using the orientation of the screen to position the tab buttons."]}),"\n",(0,s.jsxs)(n.li,{children:["[2]: We add the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," object as a child component."]}),"\n",(0,s.jsxs)(n.li,{children:["[3]: We create the ",(0,s.jsx)(n.code,{children:"\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30db\u30eb\u30c0\u30fc"})," objects."]}),"\n",(0,s.jsxs)(n.li,{children:["[4]: We add these as tabs to the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," object (the final ",(0,s.jsx)(n.code,{children:"\u771f\u306e"})," arguments tell the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," objects that they can delete the ",(0,s.jsx)(n.code,{children:"\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30db\u30eb\u30c0\u30fc"})," objects when they are no longer needed)."]}),"\n",(0,s.jsx)(n.li,{children:'[5]: We add the buttons to the "Buttons" tab.'}),"\n",(0,s.jsx)(n.li,{children:'[6]: And the sliders to the "Sliders" tab.'}),"\n",(0,s.jsxs)(n.li,{children:["[7]: We set the size of the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," object to fill the bounds of the ",(0,s.jsx)(n.code,{children:"\u30ea\u30b5\u30a4\u30b8\u30f3\u30b0\u30b3\u30f3\u30d7"})," object."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:['When the size of the screen is determined as "small" then the ',(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," is used as shown in the following screenshot."]}),"\n",(0,s.jsx)(i.A,{src:"https://docs.juce.com/master/tutorial_android_screen_sizes_screenshot6.png",caption:"The tabbed interface"}),"\n",(0,s.jsx)(n.p,{children:"\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u3084\u30dc\u30bf\u30f3\u306e\u6570\u3092\u5897\u3084\u3057\u3001\u5fc5\u8981\u3067\u3042\u308c\u3070\u3053\u308c\u3089\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30922\u3064\u4ee5\u4e0a\u306e\u30bf\u30d6\u306b\u5206\u6563\u3055\u305b\u308b\u5de5\u592b\u3092\u3059\u308b\u3002"}),"\n",(0,s.jsx)(n.h1,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001Android\u30c7\u30d0\u30a4\u30b9\u306e\u753b\u9762\u30b5\u30a4\u30ba\u3068\u5411\u304d\u306b\u95a2\u3059\u308b\u69d8\u3005\u306a\u554f\u984c\u3092\u691c\u8a0e\u3057\u307e\u3057\u305f\u3002\u7279\u306b"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u89aa\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u5bf8\u6cd5\u306b\u57fa\u3065\u3044\u3066\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u62e1\u5927\u7e2e\u5c0f\u3059\u308b\u57fa\u672c\u7684\u306a\u65b9\u6cd5\u3092\u793a\u3059\u3002"}),"\n",(0,s.jsxs)(n.li,{children:["Shown how to use the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classAffineTransform",title:"Represents a 2D affine-transformation matrix.",children:"\u30a2\u30d5\u30a3\u30f3\u5909\u63db"})," class to scale components."]}),"\n",(0,s.jsx)(n.li,{children:"\u30c7\u30d0\u30a4\u30b9\u306e\u5411\u304d\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8868\u793a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3002"}),"\n",(0,s.jsxs)(n.li,{children:["Shown how to use the ",(0,s.jsx)(n.a,{href:"https://docs.juce.com/master/classTabbedComponent",title:"A component with a TabbedButtonBar along one of its sides.",children:"\u30bf\u30d6\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," class to distribute a user interface across several pages."]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../tutorial_android_studio/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u3092\u59cb\u3081\u3088\u3046"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../tutorial_component_parents_children/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u89aa\u5b50\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../tutorial_flex_box_grid/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebFlexBox\u3068Grid\u3092\u4f7f\u3063\u305f\u30ec\u30b9\u30dd\u30f3\u30b7\u30d6GUI\u30ec\u30a4\u30a2\u30a6\u30c8"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},3449:(e,n,t)=>{t.d(n,{A:()=>o});var s=t(4848);function o(e){let{src:n,caption:t,alt:o,width:i,height:r}=e;return(0,s.jsxs)("figure",{children:[(0,s.jsx)("img",{src:n,alt:o||t,width:i,height:r}),(0,s.jsx)("figcaption",{children:(0,s.jsx)("b",{children:t})})]})}},6378:(e,n,t)=>{t.d(n,{A:()=>o});var s=t(4848);function o(e){let{path:n}=e;return(0,s.jsx)("p",{children:(0,s.jsx)("a",{href:"https://docs.juce.com/master/"+n,children:"\ud83d\udcda Source Page"})})}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);