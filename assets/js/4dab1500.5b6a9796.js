"use strict";(self.webpackChunkjuce_tutorial_ja=self.webpackChunkjuce_tutorial_ja||[]).push([[2276],{8657:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=n(4848),i=n(8453);const o={title:"Unlock your plugins through online registration",sidebar_position:7},r="Tutorial: Unlock your plugins through online registration",a={id:"utility-classes/tutorial_online_unlock_status",title:"Unlock your plugins through online registration",description:"Improve the security of your apps and plugins by locking their access until authorisation. Learn how to provide users with a mechanism to unlock your plugins through online registration of keys.",source:"@site/docs/utility-classes/tutorial_online_unlock_status.mdx",sourceDirName:"utility-classes",slug:"/utility-classes/tutorial_online_unlock_status",permalink:"/juce-tutorial-ja/utility-classes/tutorial_online_unlock_status",draft:!1,unlisted:!1,editUrl:"https://github.com/m1m0zzz/juce-tutorial-ja/tree/main/docs/utility-classes/tutorial_online_unlock_status.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Unlock your plugins through online registration",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"App analytics collection",permalink:"/juce-tutorial-ja/utility-classes/tutorial_analytics_collection"},next:{title:"Package your app or plugin for distribution",permalink:"/juce-tutorial-ja/utility-classes/tutorial_app_plugin_packaging"}},c={},l=[{value:"\u306f\u3058\u3081\u308b",id:"\u306f\u3058\u3081\u308b",level:2},{value:"RSA encryption",id:"rsa-encryption",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{CaptionImage:n,SourcePageLink:o}=t;return n||p("CaptionImage",!0),o||p("SourcePageLink",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o,{path:"tutorial_online_unlock_status"}),"\n",(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"tutorial-unlock-your-plugins-through-online-registration",children:"Tutorial: Unlock your plugins through online registration"})}),"\n",(0,s.jsx)(t.p,{children:"Improve the security of your apps and plugins by locking their access until authorisation. Learn how to provide users with a mechanism to unlock your plugins through online registration of keys."}),"\n",(0,s.jsx)(t.p,{children:"Level: Advanced"}),"\n",(0,s.jsx)(t.p,{children:"Platforms: Windows, macOS, Linux"}),"\n",(0,s.jsxs)(t.p,{children:["Classes: ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockStatus",title:"A base class for online unlocking systems.",children:"OnlineUnlockStatus"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockForm",title:"Acts as a GUI which asks the user for their details, and calls the appropriate methods on your Online...",children:"OnlineUnlockForm"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classKeyGeneration",title:"Contains static utilities for generating key-files that can be unlocked by the OnlineUnlockStatus cla...",children:"KeyGeneration"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classRSAKey",title:"RSA public/private key-pair encryption class.",children:"RSAKey"}),", ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classTracktionMarketplaceStatus",title:"An implementation of the OnlineUnlockStatus class which talks to the Tracktion Marketplace server.",children:"TracktionMarketplaceStatus"})]}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsx)(t.p,{children:"This tutorial assumes elementary knowledge of RSA cryptography, certificates, network protocols and PHP syntax."})}),"\n",(0,s.jsx)(t.h2,{id:"\u306f\u3058\u3081\u308b",children:"\u306f\u3058\u3081\u308b"}),"\n",(0,s.jsxs)(t.p,{children:["Download the demo project for this tutorial here: ",(0,s.jsx)(t.a,{href:"/tutorials/PIPs/OnlineUnlockStatusTutorial.zip",children:"PIP"})," | ",(0,s.jsx)(t.a,{href:"/tutorials/ZIPs/OnlineUnlockStatusTutorial.zip",children:"ZIP"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,s.jsxs)(t.p,{children:["If you need help with this step, see ",(0,s.jsx)(t.a,{href:"../tutorial_new_projucer_project/",children:"Tutorial: Projucer Part 1: Getting started with the Projucer"}),"."]}),"\n",(0,s.jsx)(t.h1,{id:"the-demo-project",children:"The demo project"}),"\n",(0,s.jsx)(t.p,{children:'The demo project shows a very simple UI with two buttons, one of them is used to unlock access to the other one through registration. When the "Unlock" button is pressed, a registration form will open in order for the user to insert credentials. At the moment, the registration process will fail until we start implementing the back end server.'}),"\n",(0,s.jsx)(n,{src:"https://docs.juce.com/master/tutorial_online_unlock_status_screenshot1.png",caption:"The locked application window"}),"\n",(0,s.jsx)(t.p,{children:"After successful implementation and authorisation of the application, you should see the following unlocked state of the app at the end of this tutorial."}),"\n",(0,s.jsx)(n,{src:"https://docs.juce.com/master/tutorial_online_unlock_status_screenshot2.png",caption:"The unlocked application window"}),"\n",(0,s.jsx)(t.h1,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(t.p,{children:"As a plugin manufacturer, it can sometimes be frustrating to have your plugins cracked by hackers or even circulated free of charge without your consent. Although it can be difficult to make your applications full-proof against such threats, there are means to make this process more tedious for hackers. Sometimes you may want to offer a trial period for users to try your product before deciding on purchasing it or alternatively restrict certain features for free tier users."}),"\n",(0,s.jsx)(t.p,{children:"Depending on the manufacturer, different methods are used to improve the security of plugins: some may use a third-party licensing solution such as PACE's iLok which requires a physical USB stick to carry the licenses or a proprietary system that authorises users by checking the credentials against a database on a remote web server."}),"\n",(0,s.jsx)(t.p,{children:"In this tutorial, we look at the second method to register plugins via web server authorisation. The advantage of this method is that it can function both online as well as offline and does not require a physical device for registration. However since the plugin is registered to the machine for a period of time, this technique is more vulnerable to hacking compared to PACE's solution that requires authorisation every time the plugin launches."}),"\n",(0,s.jsx)(t.p,{children:"So how does server authorisation work? If the machine is connected to the internet, we can perform what's called an online authorisation where the plugin sends the user credentials through a secure connection and probes the server for a license key. If the user has indeed been verified to have purchased the product, the server sends a key file back to the machine and the plugin can be unlocked. On the other hand if the machine is offline, the user can still download the key file from the web server via a different computer connected to the internet and the key file can then be copied and applied to the offline machine by loading it into the plugin."}),"\n",(0,s.jsx)(t.h2,{id:"rsa-encryption",children:"RSA encryption"}),"\n",(0,s.jsx)(t.p,{children:"Now let's talk a little bit about cryptography. How do we ensure that the information is not tampered with during transmission between the two parties? We use a widely-used secure encryption algorithm called RSA to ensure this. RSA works on the basis that a pair of keys is created using prime numbers with one of them being public and the other one being private. The public key can be shared publicly and it is used to encrypt the message. The private key is kept private by the receiving party and it is used to decrypt the message."}),"\n",(0,s.jsx)(t.p,{children:"Due to the way RSA has been designed, only the private key owner can decrypt the message encrypted by the corresponding public key of the matching pair. This scenario can be described by the following diagram with Bob knowing the public key, Alice owning the private key and Eve a third-party trying to intercept the message:"}),"\n",(0,s.jsx)("p",{children:(0,s.jsx)("b",{children:"This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead."})}),"\n",(0,s.jsx)(t.p,{children:"In the above case, Eve cannot read the message from Bob as she does not have the private key to decrypt the message. She can still send an encrypted message to Alice by using the public key but this is no use to Eve who wants to intercept Bob's message. This is usually the most common use case of RSA where some party wants to send a secret message but this is not the way RSA is used in the plugin registration process."}),"\n",(0,s.jsx)(t.p,{children:"There is an alternative scenario to RSA used for plugin authentication where the private key is used to encrypt a message and the public key to decrypt it. This can be described by the following diagram with Bob being the machine on which the plugin is installed, Alice being the authenticating web server for registration and Eve a third-party trying to hack into the plugin:"}),"\n",(0,s.jsx)("p",{children:(0,s.jsx)("b",{children:"This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead."})}),"\n",(0,s.jsx)(t.p,{children:"In this case, anyone with the public key can decrypt the message encrypted with the private key by Alice including Bob and Eve. However, if Eve tries to send an encrypted message to Bob without the corresponding private key from the matching pair, Bob will be able to check the authenticity of the message by decrypting it with the public key. He can then verify that the result is indeed valid as the data will contain garbage and therefore Eve cannot impersonate Alice."}),"\n",(0,s.jsxs)(t.p,{children:["Similarly to this, plugin authentication can be performed simply by checking whether the message sent by the server is valid provided that the server only sends the response if the credentials are correct against the database. Thankfully all this encryption and decryption procedure is handled for us by the JUCE library by classes such as ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classKeyGeneration",title:"Contains static utilities for generating key-files that can be unlocked by the OnlineUnlockStatus cla...",children:"KeyGeneration"})," and ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classRSAKey",title:"RSA public/private key-pair encryption class.",children:"RSAKey"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Now that we understand how RSA encryption works, let's start implementing the registration mechanism into our demo project."}),"\n",(0,s.jsx)(t.h1,{id:"implementing-the-marketplace-status",children:"Implementing the marketplace status"}),"\n",(0,s.jsxs)(t.p,{children:["In order to facilitate communication between the client using the application on a machine and a registration server that authorises the application, the JUCE library provides a base class that acts as an interface called the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockStatus",title:"A base class for online unlocking systems.",children:"OnlineUnlockStatus"})," class. This class provides a foundation to manage the registration status for the current machine on which the application is installed."]}),"\n",(0,s.jsxs)(t.p,{children:["The first step towards implementing a store-specific marketplace is to inherit from the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockStatus",title:"A base class for online unlocking systems.",children:"OnlineUnlockStatus"})," class and an example of how to implement this subclass is described in the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classTracktionMarketplaceStatus",title:"An implementation of the OnlineUnlockStatus class which talks to the Tracktion Marketplace server.",children:"TracktionMarketplaceStatus"})," class. Since this implementation was designed specifically for the Tracktion marketplace, we need to create our own independent subclass but we will borrow the code that handles responses from the server as this can stay identical."]}),"\n",(0,s.jsxs)(t.p,{children:["Let's first take a look at the implementation of the ",(0,s.jsx)(t.code,{children:"TutorialMarketplaceStatus"})," class which derives from the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockStatus",title:"A base class for online unlocking systems.",children:"OnlineUnlockStatus"})," class. Notice that the ",(0,s.jsx)(t.code,{children:"readReplyFromWebserver()"})," and ",(0,s.jsx)(t.code,{children:"userCancelled()"})," functions were copied from the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classTracktionMarketplaceStatus",title:"An implementation of the OnlineUnlockStatus class which talks to the Tracktion Marketplace server.",children:"TracktionMarketplaceStatus"})," implementation for simplicity's sake."]}),"\n",(0,s.jsx)(t.p,{children:"Now the rest of the virtual functions from the base class need to be filled-in to complete our own marketplace implementation."}),"\n",(0,s.jsxs)(t.p,{children:["Insert a product ID for your application in the ",(0,s.jsx)(t.code,{children:"getProductID()"})," function and make sure this ID matches the product ID on the server later on:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'juce::String getProductID() override\n{\n    return "TestApp";\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The following ",(0,s.jsx)(t.code,{children:"doesProductIDMatch()"})," function should verify whether the ID sent by the server matches the product ID inserted in the previous step:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"bool doesProductIDMatch (const juce::String& returnedIDFromServer) override\n{\n    return getProductID() == returnedIDFromServer;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Next, insert the name of your website in the ",(0,s.jsx)(t.code,{children:"getWebsiteName()"})," function. This information will only be used to display the domain name to the user when contacting the server."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'juce::String getWebsiteName() override\n{\n    return "juce.com";\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:'The next function is important as this is the address that will be contacted when attempting authorisation of the app and should point to the marketplace server. For the purpose of this tutorial, we point to the "localhost" or "127.0.0.1" IP address as the test server will run locally on our machine. The page it points to ends with a PHP extension as the server will use the PHP language for simplicity\'s sake.'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'juce::URL getServerAuthenticationURL() override\n{\n    return juce::URL ("https://localhost:8443/auth.php");\n}\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"Notice that the protocol used to communicate to the server has to be HTTPS as the authentication process only works over a secure connection. The 8443 port reflects this choice and denotes the default SSL port."})}),"\n",(0,s.jsx)(t.p,{children:"When the registration process starts, the client app will request authentication with the credentials supplied by the user and the server will respond with an encrypted message. This message containing the key file to unlock the app can only be decrypted using the public RSA key that corresponds to the private RSA key used to encrypt the message on the server side."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"getPublicKey()"})," function must return this public key and will be filled later on in the key generation step of this tutorial. Prepare the function as follows and leave the field blank for the moment:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'juce::RSAKey getPublicKey() override\n{\n    return juce::RSAKey ("INSERT_PUBLIC_KEY_HERE");\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"TutorialMarketplaceStatus"})," class now has all the necessary information to communicate with the marketplace server and retrieve the keys."]}),"\n",(0,s.jsx)(t.h1,{id:"provide-a-registration-form",children:"Provide a registration form"}),"\n",(0,s.jsxs)(t.p,{children:["There are several ways to display a registration form for the user to fill in an app or plugin. We can either overlay a regular ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classComponent",title:"The base class for all JUCE user-interface objects.",children:"Component"})," on top of our interface or alternatively pop up a ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classDialogWindow",title:"A dialog-box style window.",children:"DialogWindow"})," on top of our main window. The latter option is highly discouraged when developing plugins as this can freeze a simple scanning routine when validating plugins and it can also cause problems if a DAW shuts the plugin down while the registration window is still active."]}),"\n",(0,s.jsxs)(t.p,{children:["Therefore in this section, we opt for the former option to ensure compatibility with both apps and plugins. In order to simplify the process of implementing a registration user interface, the JUCE library offers the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockForm",title:"Acts as a GUI which asks the user for their details, and calls the appropriate methods on your Online...",children:"OnlineUnlockForm"})," class that displays two fields for an email and a password and provides seamless implementation for registration in conjunction with the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockStatus",title:"A base class for online unlocking systems.",children:"OnlineUnlockStatus"})," class."]}),"\n",(0,s.jsxs)(t.p,{children:["Create a class named ",(0,s.jsx)(t.code,{children:"TutorialUnlockForm"})," and derive from ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockForm",title:"Acts as a GUI which asks the user for their details, and calls the appropriate methods on your Online...",children:"OnlineUnlockForm"})," as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'class TutorialUnlockForm    : public juce::OnlineUnlockForm\n{\npublic:\n    TutorialUnlockForm (TutorialMarketplaceStatus& status)\n        : OnlineUnlockForm (status, "Please provide your email and password.")\n    {}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Here we also pass a reference to our ",(0,s.jsx)(t.code,{children:"TutorialMarketplaceStatus"})," class implemented in the previous section and provide a descriptive message to instruct the user in the class constructor."]}),"\n",(0,s.jsxs)(t.p,{children:["In the ",(0,s.jsx)(t.code,{children:"MainContentComponent"}),", declare three private member variables repectively an instance of a ",(0,s.jsx)(t.code,{children:"TutorialMarketplaceStatus"})," and a ",(0,s.jsx)(t.code,{children:"TutorialUnlockForm"})," object as well as a boolean to store whether the application was unlocked."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"    TutorialMarketplaceStatus marketplaceStatus;\n    TutorialUnlockForm unlockForm;\n \n    bool isUnlocked = false;\n \n    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainContentComponent)\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Modify the constructor to initialise the ",(0,s.jsx)(t.code,{children:"TutorialUnlockForm"})," by passing the ",(0,s.jsx)(t.code,{children:"TutorialMarketplaceStatus"})," object and add the form as a child ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classComponent",title:"The base class for all JUCE user-interface objects.",children:"Component"})," as shown here:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"class MainContentComponent   : public juce::Component,\n                               private juce::Timer\n{\npublic:\n    //==============================================================================\n    MainContentComponent()\n        : unlockForm (marketplaceStatus)\n    {\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"        addChildComponent (unlockForm);\n \n        setSize (400, 250);\n        startTimer (100);\n    }\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Notice here that we also inherit from the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classTimer",title:"Makes repeated callbacks to a virtual method at a specified time interval.",children:"Timer"})," class and call the ",(0,s.jsx)(t.code,{children:"startTimer()"})," function which will be used later on to check whether the app is unlocked."]}),"\n",(0,s.jsxs)(t.p,{children:["In the ",(0,s.jsx)(t.code,{children:"resized()"})," method, set the size of the form to cover up most of the interface by calling the ",(0,s.jsx)(t.code,{children:"centreWithSize()"})," function like so:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"    void resized() override\n    {\n        unlockForm  .centreWithSize (300, 200);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"showForm()"}),' helper function will be called when the "Unlock" button is pressed by the user. Since the ',(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classComponent",title:"The base class for all JUCE user-interface objects.",children:"Component"})," was simply added with the ",(0,s.jsx)(t.code,{children:"addChildComponent()"})," function instead of ",(0,s.jsx)(t.code,{children:"addAndMakeVisible()"}),", the form is hidden by default thus simply call ",(0,s.jsx)(t.code,{children:"setVisible()"})," here to show the form:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"    void showForm()\n    {\n        unlockForm.setVisible (true);\n    }\n"})}),"\n",(0,s.jsxs)(t.p,{children:["When the registration process is cancelled or succeeds, the form needs to be dismissed and the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockForm",title:"Acts as a GUI which asks the user for their details, and calls the appropriate methods on your Online...",children:"OnlineUnlockForm"})," class automatically calls the ",(0,s.jsx)(t.code,{children:"dismiss()"})," callback to do this. In the ",(0,s.jsx)(t.code,{children:"TutorialUnlockForm"})," declaration, override this function by simply calling ",(0,s.jsx)(t.code,{children:"setVisible()"})," to hide the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classComponent",title:"The base class for all JUCE user-interface objects.",children:"Component"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"    void dismiss() override\n    {\n        setVisible (false);\n    }\n};\n"})}),"\n",(0,s.jsxs)(t.p,{children:["As seen previously in the constructor of the ",(0,s.jsx)(t.code,{children:"MainContentComponent"}),", a timer is launched to periodically check whether the application was successfully unlocked in the ",(0,s.jsx)(t.code,{children:"timerCallback()"})," function:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"    void timerCallback() override\n    {\n        if (! isUnlocked && marketplaceStatus.isUnlocked())\n        {\n            isUnlocked = true;\n            unlockApp();\n        }\n    }\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Here we check whether the app is still locked with the ",(0,s.jsx)(t.code,{children:"isUnlocked"})," local variable and if so, ask the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockStatus",title:"A base class for online unlocking systems.",children:"OnlineUnlockStatus"})," instance whether the app is still locked via the ",(0,s.jsx)(t.code,{children:"isUnlocked()"})," function. If the app has been authorised, we switch the local variable to prevent subsequent iterations and call the following ",(0,s.jsx)(t.code,{children:"unlockApp()"})," helper function:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'    void unlockApp()\n    {\n        secretButton.setEnabled (true);\n        unlockButton.setEnabled (false);\n \n        unlockLabel.setText ("Status: Unlocked", juce::dontSendNotification);\n        unlockLabel.setColour (juce::Label::textColourId, juce::Colours::green);\n    }\n'})}),"\n",(0,s.jsx)(t.p,{children:"This function simply enables the button to access the secret feature and disables the button to unlock the app while showing the new authorisation status."}),"\n",(0,s.jsxs)(t.p,{children:["Finally the ",(0,s.jsx)(t.code,{children:"checkFeature()"})," function is called when the user clicks on the secret feature button and simulates the behaviour of the unlocked application:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'    void checkFeature()\n    {\n        if (marketplaceStatus.isUnlocked())\n            DBG ("App unlocked!");\n        else\n            DBG ("Beware of hackers!");\n    }\n'})}),"\n",(0,s.jsxs)(t.p,{children:["This function is important as it provides another layer of security to our application. Notice here that the function checks again with the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockStatus",title:"A base class for online unlocking systems.",children:"OnlineUnlockStatus"})," instance whether the app is still unlocked. The reason behind this is because not only do hackers need to crack this function to unlock the app, they will need to replace all instances of this function in your application code in order to fully breach the restricted features of the app."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"It is therefore recommended to check for the authorisation status of your application in as many places as possible in the code to provide a more robust security mechanism."})}),"\n",(0,s.jsx)(t.p,{children:"We can now display the registration form if we run the application."}),"\n",(0,s.jsx)(n,{src:"https://docs.juce.com/master/tutorial_online_unlock_status_screenshot3.png",caption:"The registration form"}),"\n",(0,s.jsx)(t.p,{children:"However, if we try to register the app with an arbitrary email and password combination, we will see the following error message:"}),"\n",(0,s.jsx)(n,{src:"https://docs.juce.com/master/tutorial_online_unlock_status_screenshot4.png",caption:"Connection issue dialog"}),"\n",(0,s.jsx)(t.p,{children:"This is because the application cannot connect to the authentication server as the setup is covered in the next section of this tutorial."}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["The source code for this modified version of the code can be found in the ",(0,s.jsx)(t.code,{children:"OnlineUnlockStatusTutorial_02.h"})," file of the demo project."]})}),"\n",(0,s.jsx)(t.h1,{id:"setting-up-the-back-end-server",children:"Setting up the back end server"}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"This section covers the setup instructions for a local test server on macOS and Windows using PHP but feel free to use any type of back end server whether it be Java, Ruby or Python etc..."})}),"\n",(0,s.jsxs)(t.p,{children:["Since the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockStatus",title:"A base class for online unlocking systems.",children:"OnlineUnlockStatus"})," class handles replies from the server in the XML format, we have to supply an XML response using PHP. The application will send the credentials to the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classURL",title:"Represents a URL and has a bunch of useful functions to manipulate it.",children:"URL"})," supplied in the ",(0,s.jsx)(t.code,{children:"getServerAuthenticationURL()"})," function of our ",(0,s.jsx)(t.code,{children:"TutorialMarketplaceStatus"}),' implementation which was defined in the first section of the tutorial as "',(0,s.jsx)(t.a,{href:"https://localhost:8443/auth.php",children:"https://localhost:8443/auth.php"}),'".']}),"\n",(0,s.jsxs)(t.p,{children:["Hence, let's have a look at the ",(0,s.jsx)(t.code,{children:"auth.php"})," file supplied with the demo project in the ",(0,s.jsx)(t.code,{children:"Resources"})," folder and examine how the response was crafted in PHP:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'\';              // [2]\n    if($_POST["email"] === "test@example.com" and $_POST["pw"] === "test") // [3]\n        $response .= \'INSERT_KEY_HERE\';\n    else\n        $response .= \'\';\n \n    return $response;\n}\n \nheader("Content-type: text/xml; charset=utf-8");                        // [4]\necho sendResponse();\n?>\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["[1]: We first define a function called ",(0,s.jsx)(t.code,{children:"sendResponse()"})," that will be called later on to display the XML content."]}),"\n",(0,s.jsx)(t.li,{children:"[2]: Then we prepare an XML document by assigning the metadata header into a local PHP variable."}),"\n",(0,s.jsx)(t.li,{children:"[3]: Next, we check whether the credentials correspond to the test user by comparing with test email and password strings received via POST. If the credentials are matching, we append the success message along with an encrypted key file that we will insert in the next section. Otherwise, we append an error message explaining the reason why the authorisation failed."}),"\n",(0,s.jsxs)(t.li,{children:["[4]: Finally, we set the response header to indicate that the content is in the XML format and send the response with the ",(0,s.jsx)(t.code,{children:"echo"})," function."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["At this point, if we decide to run the server locally and try to contact the authorisation server from the app, we would receive a security warning telling us that the connection is not private or secure. For the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classOnlineUnlockStatus",title:"A base class for online unlocking systems.",children:"OnlineUnlockStatus"})," instance to send the credentials securely, we need to create a secure connection using SSL via the HTTPS protocol."]}),"\n",(0,s.jsx)(t.p,{children:"To do this locally for testing purposes, we can create a self-signed certificate and use tunneling to access the underlying unsecure HTTP protocol through HTTPS."}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsx)(t.p,{children:'Make sure that you have OpenSSL, PHP and "stunnel" installed on your computer to test the back end server. OpenSSL will be necessary to generate the self-signed certificate, PHP offers a built-in web server that you can run locally on your machine and "stunnel" allows you to tunnel a secure connection into it.'})}),"\n",(0,s.jsxs)(t.p,{children:["Navigate to the ",(0,s.jsx)(t.code,{children:"Resources"})," folder of the project and create a self-signed certificate by running the following command from the terminal:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"// Creates an RSA key and certificate pair.\n \n// macOS\nopenssl req -new -newkey rsa:4096 -x509 -nodes -sha256 -days 365 -keyout stunnel.key -out stunnel.cert\n \n// Windows\nC:\\path-to-openssl\\openssl req -new -newkey rsa:4096 -x509 -nodes -sha256 -days 365 -keyout stunnel.key -out stunnel.cert\n"})}),"\n",(0,s.jsx)(t.p,{children:'When prompted to provide information for the certificate, skip all the fields except for the common name or CN entry where you should enter "localhost".'}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"Make sure that the domain name is not misspelt as this would cause problems when connecting to the server."})}),"\n",(0,s.jsx)(t.p,{children:"This will create two files forming a pair of RSA 4096-bit key and certificate using the SHA-256 hash algorithm and an expiry date of one year. The X.509 standard denotes the self-signed policy we are interested in. To simplify things, we combine the generated key and certificate files into one PEM file like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"// Combines the key and certificate into a PEM file.\n \n// macOS\ncat stunnel.key stunnel.cert > stunnel.pem\n \n// Windows\ntype stunnel.key stunnel.cert > stunnel.pem\n"})}),"\n",(0,s.jsxs)(t.p,{children:["On macOS, double-click the PEM file in the ",(0,s.jsx)(t.code,{children:"Finder"})," to add the certificate to your keychain. This will open the ",(0,s.jsx)(t.code,{children:"Keychain Access"})," application located in the ",(0,s.jsx)(t.code,{children:"Applications/Utilities"})," folder. Double-click on the newly-added certificate in the list to open the detailed view and expand the ",(0,s.jsx)(t.strong,{children:"Trust"}),' view. Select the "Always Trust" option to allow the certificate to be trusted by the current user account of your mac as shown below:']}),"\n",(0,s.jsx)(n,{src:"https://docs.juce.com/master/tutorial_online_unlock_status_screenshot5.png",caption:"The self-signed certificate"}),"\n",(0,s.jsxs)(t.p,{children:["On Windows, open the ",(0,s.jsx)(t.code,{children:"Microsoft Management Console"}),' by typing "MMC" in the ',(0,s.jsx)(t.code,{children:"Run"})," prompt and navigate to ",(0,s.jsx)(t.strong,{children:"File > Add Snap-in..."}),' and select "Certificates". Click on ',(0,s.jsx)(t.strong,{children:"Add"})," to add certificates for the current user and click ",(0,s.jsx)(t.strong,{children:"OK"})," to finish."]}),"\n",(0,s.jsx)(n,{src:"https://docs.juce.com/master/tutorial_online_unlock_status_screenshot9.png",caption:"Adding the certificate snap-in"}),"\n",(0,s.jsxs)(t.p,{children:["Then import the self-signed certificate into ",(0,s.jsx)(t.strong,{children:"Trusted Root Certification Authorities > Certificates"})," by navigating to the corresponding folder in the left panel and selecting ",(0,s.jsx)(t.strong,{children:"Action > All Tasks > Import..."})," from the menu items. You will be guided through the steps to locate the certificate at which point you should select the file with the ",(0,s.jsx)(t.code,{children:".cert"})," extension as this is the format accepted by the MMC."]}),"\n",(0,s.jsx)(n,{src:"https://docs.juce.com/master/tutorial_online_unlock_status_screenshot10.png",caption:"Importing the certificate"}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsx)(t.p,{children:"Do not use a self-signed certificate or tunneling for real applications as this is not considered as secure as a CA-signed certificate. This method is only used for demonstrative purposes."})}),"\n",(0,s.jsxs)(t.p,{children:["Next, let's configure the tunneling protocol by opening the ",(0,s.jsx)(t.code,{children:"stunnel.conf"})," file supplied with the demo project in the ",(0,s.jsx)(t.code,{children:"Resources"})," folder:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"[https]\naccept = 8443\nconnect = 8080\ncert = stunnel.pem\nTIMEOUTclose = 0\n"})}),"\n",(0,s.jsx)(t.p,{children:"Here we define the incoming and outgoing ports to connect to and from as well as the certificate file created in the previous step to secure the link. The application will attempt to connect to port 8443 and the tunneling will link to port 8080 where the PHP server will be running."}),"\n",(0,s.jsxs)(t.p,{children:["We can finally launch the server by navigating to the ",(0,s.jsx)(t.code,{children:"Resources"})," directory and running the following command from the terminal:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"// Starts the built in PHP web server and tunnels a secure connection.\n \n// macOS\nphp -S localhost:8080 & stunnel stunnel.conf\n \n// Windows\nC:\\path-to-php\\php -S 127.0.0.1:8080 & C:\\path-to-stunnel\\stunnel stunnel.conf\n"})}),"\n",(0,s.jsxs)(t.p,{children:["This will launch the local server to port 8080 and tunnel the connection to port 8443 for the application to access securely. Open the authentication ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classURL",title:"Represents a URL and has a bunch of useful functions to manipulate it.",children:"URL"}),' "',(0,s.jsx)(t.a,{href:"https://localhost:8443/auth.php",children:"https://localhost:8443/auth.php"}),'" in your favourite browser to check that the server is running. You should see the error message declared in the ',(0,s.jsx)(t.code,{children:"auth.php"})," file in the form of an XML response."]}),"\n",(0,s.jsx)(t.p,{children:"If all works properly, launch the application and attempt authorisation by submitting an arbitrary email and password combination. The error message you receive should be different from the previous attempt and should match the message shown in the browser like so:"}),"\n",(0,s.jsx)(n,{src:"https://docs.juce.com/master/tutorial_online_unlock_status_screenshot6.png",caption:"Error message dialog"}),"\n",(0,s.jsx)(t.p,{children:"This means that the application was successful in contacting the server and handling the response however we still have to generate and send the correct key file to unlock the application."}),"\n",(0,s.jsx)(t.p,{children:'Stop the server by hitting "Ctrl+C" on the keyboard or run the following commands to stop the server and the tunneling:'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"// Stops any running PHP server processes and the HTTPS to HTTP tunneling.\n \n// macOS\nkillall php & killall stunnel\n \n// Windows\ntaskkill /f /im php.exe & taskkill /f /im stunnel.exe\n"})}),"\n",(0,s.jsx)(t.h1,{id:"generating-security-keys",children:"Generating security keys"}),"\n",(0,s.jsx)(t.p,{children:"Let's have a look at generating security keys as a final step."}),"\n",(0,s.jsxs)(t.p,{children:["You will find a helper Console application called ",(0,s.jsx)(t.code,{children:"KeyGenerator"})," in the ",(0,s.jsx)(t.code,{children:"Resources"})," folder of the project that will generate an RSA key pair to use for authenticating this application. You only have to generate keys once for every app or plugin as these can remain the same for the lifetime of the project (unless the private key is somehow compromised in which case a new pair has to be created)."]}),"\n",(0,s.jsxs)(t.p,{children:["If we take a look at the ",(0,s.jsx)(t.code,{children:"main()"})," function of the ",(0,s.jsx)(t.code,{children:"KeyGenerator"})," app, we can see that all it does is call the ",(0,s.jsx)(t.code,{children:"createKeyPair()"})," function from the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classRSAKey",title:"RSA public/private key-pair encryption class.",children:"RSAKey"})," class with a key size of 256 bits and prints the result on screen:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'    juce::RSAKey publicKey;\n    juce::RSAKey privateKey;\n \n    juce::RSAKey::createKeyPair (publicKey, privateKey, 256);\n \n    std::cout << "Public Key: "  << publicKey .toString() << std::endl\n              << "Private Key: " << privateKey.toString() << std::endl\n              << std::endl;\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Build the ",(0,s.jsx)(t.code,{children:"KeyGenerator"})," app and run the following command to retrieve the keys:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"// Run the program and copy the keys.\n \n// macOS\n./KeyGenerator\n \n// Windows\nKeyGenerator.exe\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Copy and paste the public key from the previous step into the ",(0,s.jsx)(t.code,{children:"getPublicKey()"})," function of the ",(0,s.jsx)(t.code,{children:"TutorialMarketplaceStatus"})," class:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'return juce::RSAKey ("INSERT_PUBLIC_KEY_HERE");\n'})}),"\n",(0,s.jsx)(t.p,{children:"This will allow the application to decrypt the message from the server provided the message is authentic and was encrypted using the matching private key."}),"\n",(0,s.jsx)(t.p,{children:"In order for the server to generate an authentic key file when requested from the app, it must own the private key generated in the previous step to encrypt the message. In a real production scenario, the key generation step must be done on the server programmatically but for the purpose of this tutorial, we will perform this step manually and copy paste the key file into the PHP script."}),"\n",(0,s.jsxs)(t.p,{children:["Navigate to the ",(0,s.jsx)(t.code,{children:"Resources"})," folder once again to find another helper Console application called ",(0,s.jsx)(t.code,{children:"Unlocker"}),". This will create the necessary key file to unlock the app by calling the ",(0,s.jsx)(t.code,{children:"generateKeyFile()"})," function from the ",(0,s.jsx)(t.a,{href:"https://docs.juce.com/master/classKeyGeneration",title:"Contains static utilities for generating key-files that can be unlocked by the OnlineUnlockStatus cla...",children:"KeyGeneration"})," class:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"    // args[0]: app-name\n    // args[1]: user-email\n    // args[2]: username\n    // args[3]: machine-numbers\n    // args[4]: private-key\n \n    std::cout << juce::KeyGeneration::generateKeyFile (args[0], args[1], args[2], args[3], juce::RSAKey (args[4])) << std::endl;\n"})}),"\n",(0,s.jsx)(t.p,{children:"The function takes as argument the app name, user email and username, the machine IDs authorised for use as well as the RSA private key to encrypt the message. You can find your corresponding machine ID when running the demo project by checking the debugger log when attempting registration."}),"\n",(0,s.jsxs)(t.p,{children:["Build the ",(0,s.jsx)(t.code,{children:"Unlocker"})," app and run the following command to retrieve the encrypted key file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"// Run the program and copy the key.\n \n// macOS\n./Unlocker TestApp test@example.com testuser INSERT_MACHINE_ID_HERE INSERT_PRIVATE_KEY_HERE\n \n// Windows\nUnlocker.exe TestApp test@example.com testuser INSERT_MACHINE_ID_HERE INSERT_PRIVATE_KEY_HERE\n"})}),"\n",(0,s.jsxs)(t.p,{children:['Copy and paste the key file that starts with the "#" character from the previous step into the ',(0,s.jsx)(t.code,{children:"sendResponse()"}),' function of the PHP script and include the "#" character while doing so:']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"$response .= 'INSERT_KEY_HERE';\n"})}),"\n",(0,s.jsx)(t.p,{children:"Launch the server then run the application to attempt authorisation by submitting the appropriate email and password combination as defined in the PHP script:"}),"\n",(0,s.jsx)(n,{src:"https://docs.juce.com/master/tutorial_online_unlock_status_screenshot7.png",caption:"Filling in the credentials"}),"\n",(0,s.jsx)(t.p,{children:"If all goes well, you should see the following success message and the application should unlock after the registration form dismisses itself:"}),"\n",(0,s.jsx)(n,{src:"https://docs.juce.com/master/tutorial_online_unlock_status_screenshot8.png",caption:"Registration success dialog"}),"\n",(0,s.jsx)(t.h1,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,s.jsx)(t.p,{children:"In this tutorial, we have learnt how to unlock plugins through online registration. In particular, we have:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Understood the principles of cryptography with RSA."}),"\n",(0,s.jsx)(t.li,{children:"Provided a UI for the user to unlock the app through a form."}),"\n",(0,s.jsx)(t.li,{children:"Generated security keys for the unlocking mechanism of the app."}),"\n",(0,s.jsx)(t.li,{children:"Built a simple secure local server to act as a back end."}),"\n",(0,s.jsx)(t.li,{children:"Unlocked features of the application depending on the registration status."}),"\n"]}),"\n",(0,s.jsx)(t.h1,{id:"\u95a2\u9023\u9805\u76ee",children:"\u95a2\u9023\u9805\u76ee"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../tutorial_app_plugin_packaging/",children:"Tutorial: Package your app or plugin for distribution"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../tutorial_analytics_collection/",children:"Tutorial: App analytics collection"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../tutorial_in_app_purchases/",children:"Tutorial: In-App Purchases on desktop and mobile devices"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"../tutorial_push_notifications/",children:"Tutorial: Push Notifications on desktop and mobile devices"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}function p(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);