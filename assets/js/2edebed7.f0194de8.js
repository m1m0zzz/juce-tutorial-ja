"use strict";(self.webpackChunkjuce_tutorial_ja=self.webpackChunkjuce_tutorial_ja||[]).push([[8901],{3044:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>h});var i=t(4848),a=t(8453),l=t(3449);t(6378);const r={title:"\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30fb\u30b7\u30f3\u30bb\u30b7\u30b9",sidebar_position:6},s="\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30b7\u30f3\u30bb\u30b7\u30b9",o={id:"synth/tutorial_wavetable_synth",title:"\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30fb\u30b7\u30f3\u30bb\u30b7\u30b9",description:"\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u306e\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306b\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u3092\u7d44\u307f\u8fbc\u307f\u307e\u3059\u3002\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3063\u3066\u30b5\u30a4\u30f3\u6ce2\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u306e\u72b6\u614b\u3092\u7ba1\u7406\u3057\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u51fa\u529b\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3082\u3046\u3002",source:"@site/docs/synth/tutorial_wavetable_synth.mdx",sourceDirName:"synth",slug:"/synth/tutorial_wavetable_synth",permalink:"/juce-tutorial-ja/synth/tutorial_wavetable_synth",draft:!1,unlisted:!1,editUrl:"https://github.com/m1m0zzz/juce-tutorial-ja/tree/main/docs/synth/tutorial_wavetable_synth.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30fb\u30b7\u30f3\u30bb\u30b7\u30b9",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"MIDI\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b",permalink:"/juce-tutorial-ja/synth/tutorial_synth_using_midi_input"},next:{title:"MIDI",permalink:"/juce-tutorial-ja/category/midi"}},c={},h=[{value:"\u306f\u3058\u3081\u308b",id:"\u306f\u3058\u3081\u308b",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30b7\u30f3\u30bb\u30b7\u30b9",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30b7\u30f3\u30bb\u30b7\u30b9"}),"\n",(0,i.jsx)(n.p,{children:"\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u306e\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306b\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u3092\u7d44\u307f\u8fbc\u307f\u307e\u3059\u3002\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3063\u3066\u30b5\u30a4\u30f3\u6ce2\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u306e\u72b6\u614b\u3092\u7ba1\u7406\u3057\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u51fa\u529b\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3082\u3046\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u30ec\u30d9\u30eb Intermediate"}),"\n",(0,i.jsx)(n.p,{children:"\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0 Windows, macOS, Linux"}),"\n",(0,i.jsxs)(n.p,{children:["\u30af\u30e9\u30b9\uff1a ",(0,i.jsx)(n.a,{href:"https://docs.juce.com/master/classAudioBuffer",title:"A multi-channel buffer containing floating point audio samples.",children:"\u30aa\u30fc\u30c7\u30a3\u30aa\u30d0\u30c3\u30d5\u30a1"}),", ",(0,i.jsx)(n.a,{href:"https://docs.juce.com/master/classAudioAppComponent",title:"A base class for writing audio apps that stream from the audio i/o devices.",children:"\u30aa\u30fc\u30c7\u30a3\u30aa\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"}),", ",(0,i.jsx)(n.a,{href:"https://docs.juce.com/master/classRandom",title:"A random number generator.",children:"\u30e9\u30f3\u30c0\u30e0"}),", ",(0,i.jsx)(n.a,{href:"https://docs.juce.com/master/structMathConstants",title:"Commonly used mathematical constants.",children:"\u6570\u5b66\u5b9a\u6570"})]}),"\n",(0,i.jsx)(n.h2,{id:"\u306f\u3058\u3081\u308b",children:"\u306f\u3058\u3081\u308b"}),"\n",(0,i.jsxs)(n.p,{children:["Download the demo project for this tutorial here: ",(0,i.jsx)(n.a,{href:"/tutorials/PIPs/WavetableSynthTutorial.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,i.jsx)(n.a,{href:"/tutorials/ZIPs/WavetableSynthTutorial.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,i.jsxs)(n.p,{children:["If you need help with this step, see ",(0,i.jsx)(n.a,{href:"../tutorial_new_projucer_project/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebProjucer\u30d1\u30fc\u30c81\uff1aProjucer\u3092\u59cb\u3081\u308b"}),"."]}),"\n",(0,i.jsx)(n.h1,{id:"the-demo-project",children:"The demo project"}),"\n",(0,i.jsx)(n.p,{children:"\u3053\u306e\u30c7\u30e2\u30fb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u30b5\u30a4\u30f3\u6ce2\u9ad8\u8abf\u6ce2\u306e\u30b9\u30bf\u30c3\u30af\u3092\u751f\u6210\u3057\u3001\u30b9\u30c6\u30ec\u30aa\u51fa\u529b\u3067\u51fa\u529b\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u30fb\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u306f\u3001\u5f93\u6765\u306e\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u306e\u5b9f\u88c5\u3068\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u3092\u5229\u7528\u3057\u305f\u5b9f\u88c5\u3092\u6bd4\u8f03\u3059\u308b\u3053\u3068\u3067\u3001CPU\u4f7f\u7528\u7387\u3092\u30e2\u30cb\u30bf\u30fc\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["In order to properly evaluate and compare the CPU usage of our different implementations, we are going to run our application in the ",(0,i.jsx)(n.strong,{children:"\u30ea\u30ea\u30fc\u30b9"})," configuration instead of the regular ",(0,i.jsx)(n.strong,{children:"\u30c7\u30d0\u30c3\u30b0"})," configuration used during testing and development. By building the project in ",(0,i.jsx)(n.strong,{children:"\u30ea\u30ea\u30fc\u30b9"})," mode the compiler will be able to optimise the code as much as possible by removing assertions and comments from the code and inlining functions for example."]}),"\n",(0,i.jsxs)(n.p,{children:["To change the build configuration in Xcode, first click on the deployment targets in the top left corner of the interface and navigate to ",(0,i.jsx)(n.strong,{children:"\u7de8\u96c6\u30b9\u30ad\u30fc\u30e0..."})," as shown below:"]}),"\n",(0,i.jsx)(l.A,{src:"https://docs.juce.com/master/tutorial_wavetable_synth_screenshot1.png",caption:"Editing the scheme"}),"\n",(0,i.jsxs)(n.p,{children:["In the pop-up window, select ",(0,i.jsx)(n.strong,{children:"\u30ea\u30ea\u30fc\u30b9"})," in the ",(0,i.jsx)(n.strong,{children:"\u30d3\u30eb\u30c9\u69cb\u6210"})," combo box as shown in the screenshot:"]}),"\n",(0,i.jsx)(l.A,{src:"https://docs.juce.com/master/tutorial_wavetable_synth_screenshot2.png",caption:"Changing the build configuration"}),"\n",(0,i.jsx)(n.p,{children:"\u3042\u306a\u305f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308b\u6700\u9069\u5316\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u3001CPU\u4f7f\u7528\u7387\u306f\u5927\u5e45\u306b\u6e1b\u5c11\u3059\u308b\u306f\u305a\u3067\u3059\u3002"}),"\n",(0,i.jsx)(n.h1,{id:"wavetables",children:"Wavetables"}),"\n",(0,i.jsx)(n.p,{children:"\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30fb\u30b7\u30f3\u30bb\u30b7\u30b9\u3068\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u5468\u671f\u6ce2\u5f62\u3092\u57cb\u3081\u8fbc\u3093\u3060\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u7528\u3057\u3001\u8a08\u7b97\u3055\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u3054\u3068\u306b\u540c\u3058\u6ce2\u5f62\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u306a\u304f\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u3092\u751f\u6210\u3059\u308b\u30b7\u30f3\u30bb\u30b7\u30b9\u624b\u6cd5\u3067\u3059\u3002\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u306f\u4efb\u610f\u306e\u5468\u671f\u6ce2\u5f62\u3067\u521d\u671f\u5316\u3055\u308c\u3001\u3053\u308c\u3089\u306e\u6ce2\u5f62\u306e\u5206\u89e3\u80fd\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u51fa\u529b\u3059\u308b\u6b63\u3057\u3044\u30b5\u30f3\u30d7\u30eb\u5024\u3092\u53d6\u5f97\u3059\u308b\u969b\u3001\u30c6\u30fc\u30d6\u30eb\u5185\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u3068\u30aa\u30fc\u30c7\u30a3\u30aa\u30fb\u30d0\u30c3\u30d5\u30a1\u30fb\u30d6\u30ed\u30c3\u30af\u5185\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u3001\u304a\u3088\u3073\u5bfe\u5fdc\u3059\u308b\u8981\u6c42\u5468\u6ce2\u6570\u304c\u4e00\u81f4\u3057\u306a\u3044\u5834\u5408\u306f\u30012\u3064\u306e\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30fb\u30b5\u30f3\u30d7\u30eb\u9593\u3092\u88dc\u9593\u3057\u3066\u5024\u3092\u898b\u3064\u3051\u307e\u3059\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u4f8b\u3068\u3057\u3066\u3001\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30b5\u30a4\u30f3\u6ce2\u3092\u691c\u7d22\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u307e\u305a\u3001\u4f8b\u3048\u3070128\u30b5\u30f3\u30d7\u30eb\u30fb\u30dd\u30a4\u30f3\u30c8\u306e\u5206\u89e3\u80fd\u3067\u3001\u30b5\u30a4\u30f3\u6ce2\u306e1\u30b5\u30a4\u30af\u30eb\u5206\u306e\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u30d0\u30c3\u30d5\u30a1\u30fb\u30d6\u30ed\u30c3\u30af\u306e\u5404\u30b5\u30f3\u30d7\u30eb\u306b\u3064\u3044\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u30fb\u30ec\u30fc\u30c8\u3001\u518d\u751f\u8981\u6c42\u5468\u6ce2\u6570\u3001\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u306e\u89e3\u50cf\u5ea6\u3001\u6ce2\u5f62\u306e\u73fe\u5728\u306e\u4f4d\u76f8\u307e\u305f\u306f\u89d2\u5ea6\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f7f\u3063\u3066\u3001\u6b63\u3057\u3044\u88dc\u9593\u30b5\u30f3\u30d7\u30eb\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3001\u6b63\u5f26\u6ce2\u306e\u30b5\u30f3\u30d7\u30eb\u5024\u3092\u8981\u6c42\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u306b\u5165\u308b\u524d\u306b\u3001\u7c21\u5358\u306a\u30b5\u30a4\u30f3\u6ce2\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u306e\u5b9f\u88c5\u304b\u3089\u59cb\u3081\u3088\u3046\u3002"}),"\n",(0,i.jsx)(n.h1,{id:"sine-wave-oscillator",children:"Sine Wave Oscillator"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This section is covered in more detail in ",(0,i.jsx)(n.a,{href:"../tutorial_sine_synth/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b5\u30a4\u30f3\u6ce2\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b"})," and if you need help with these steps please refer to that tutorial first."]})}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"\u30b5\u30a4\u30f3\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc"})," class, we keep track of two member variables that store the current angle or phase in the waveform cycle and the angle delta to increment between every cycle depending on the frequency and the sample rate:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u30af\u30e9\u30b9 SineOscillator\n{\npublic\uff1a\n    SineOscillator() {}.\n    //...\n \nprivate\uff1a\n    float currentAngle = 0.0f, angleDelta = 0.0f\uff1b\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"setFrequency()"})," function allows us to calculate the angle delta by first dividing the frequency by the sample rate and multiplying the result by 2pi, the length of a cycle in radians:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    void setFrequency (float frequency, float sampleRate)\n    {\n        auto cyclesPerSample = frequency / sampleRate;\n        angleDelta = cyclesPerSample * juce::MathConstants::twoPi\uff1b\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"getNextSample()"})," function gets called by the ",(0,i.jsx)(n.code,{children:"getNextAudioBlock()"})," function of the ",(0,i.jsx)(n.a,{href:"https://docs.juce.com/master/classAudioSource",title:"Base class for objects that can produce a continuous stream of audio.",children:"\u30aa\u30fc\u30c7\u30a3\u30aa\u30bd\u30fc\u30b9"})," on every sample in the buffer to retrieve the sample value from the oscillator. Here we calculate the sample value using the ",(0,i.jsx)(n.code,{children:"\u6a19\u6e96\u5024::sin()"})," function by passing the current angle as an argument and updating the current angle by calling the helper function ",(0,i.jsx)(n.code,{children:"updateAngle()"})," defined after:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u5f37\u5236\u30a4\u30f3\u30e9\u30a4\u30f3 float getNextSample() noexcept\n    {\n        auto currentSample = std::sin (currentAngle)\uff1b\n        updateAngle()\uff1b\n        currentSample \u3092\u8fd4\u3057\u307e\u3059\uff1b\n    }\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u89d2\u5ea6\u306f\u3001\u5468\u6ce2\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u969b\u306b\u4ee5\u524d\u306b\u8a08\u7b97\u3055\u308c\u305f\u89d2\u5ea6\u30c7\u30eb\u30bf\u3067\u73fe\u5728\u306e\u89d2\u5ea6\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3001\u89d2\u5ea6\u304c2pi\u3092\u8d85\u3048\u305f\u3068\u304d\u306b\u5024\u3092\u6298\u308a\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u66f4\u65b0\u3055\u308c\u308b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    forcedinline void updateAngle() noexcept\n    {\n        currentAngle += angleDelta;\n        if (currentAngle >= juce::MathConstants::twoPi)\n            currentAngle -= juce::MathConstants::twoPi\uff1b\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now let's switch to the implementation of our ",(0,i.jsx)(n.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," class."]}),"\n",(0,i.jsx)(n.p,{children:"\u3053\u3053\u306b\u793a\u3059\u3088\u3046\u306b\u3001\u51fa\u529b\u5168\u4f53\u306e\u30ec\u30d9\u30eb\u3068\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u306e\u914d\u5217\u3092\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30fb\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u3068\u3057\u3066\u7ba1\u7406\u3057\u3066\u3044\u308b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"class MainContentComponent   : public juce::AudioAppComponent,\n                               public juce::Timer\n{\n//...\n \nprivate:\n    //...\n \n    float level = 0.0f;\n    juce::OwnedArray\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\n    //...\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"prepareToPlay()"})," function, we have to initialise the oscillators and set their frequencies to play based on the sample rate as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"void prepareToPlay (int, double sampleRate) override\n    {\n        auto numberOfOscillators = 200; // [1].\n \n        for (auto i = 0; i < numberOfOscillators; ++i)\n        {\n            auto* oscillator = new SineOscillator(); // [2].\n \n            auto midiNote = juce::Random::getSystemRandom().nextDouble() * 36.0 + 48.0; // [3].\n            auto frequency = 440.0 * pow (2.0, (midiNote - 69.0) / 12.0); // [4].\n \n            oscillator->setFrequency ((float) frequency, (float) sampleRate); // [5].\n            oscillators.add (oscillator)\uff1b\n        }\n \n        level = 0.25f / (float) numberOfOscillators; // [6].\n    }\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[1]: First we define a large number of oscillators to evaluate the CPU load of such a number."}),"\n",(0,i.jsxs)(n.li,{children:["[2]: For each oscillator, we instantiate a new ",(0,i.jsx)(n.code,{children:"\u30b5\u30a4\u30f3\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc"})," object that generates a single sine wave voice."]}),"\n",(0,i.jsxs)(n.li,{children:["[3]: We also select a random midi note using the ",(0,i.jsx)(n.a,{href:"https://docs.juce.com/master/classRandom",title:"A random number generator.",children:"\u30e9\u30f3\u30c0\u30e0"})," class by shifting the lowest possible note by 4 octaves and defining a range of 3 octaves starting from that lowest note."]}),"\n",(0,i.jsx)(n.li,{children:"[4]: In order to calculate the frequency of that midi note, we use a simple mathematical formula to retrieve the scalar to multiply the frequency of A440 with. Since we know that the midi note number of A440 is 69, by subtracting the midi note by 69 we get the semitone distance from A440 that we can then plug into the following formula: 440 * 2 ^ (d / 12)"}),"\n",(0,i.jsxs)(n.li,{children:["[5]: Then, we set the frequency of the oscillator by passing the frequency and sample rate as arguments to the ",(0,i.jsx)(n.code,{children:"setFrequency()"})," function. We also add the oscillator to the array of oscillators."]}),"\n",(0,i.jsx)(n.li,{children:"[6]: Finally, we define the output level by dividing a quiet gain level by the number of oscillators to prevent clipping of the signal by summing such a large number of oscillator samples."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"getNextAudioBlock()"})," function we simply sum all the oscillator samples and write the result to the output buffers as shown below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"void getNextAudioBlock (const juce::AudioSourceChannelInfo& bufferToFill) override\n    {\n        auto* leftBuffer = bufferToFill.buffer->getWritePointer (0, bufferToFill.startSample); // [7].\n        auto* rightBuffer = bufferToFill.buffer->getWritePointer (1, bufferToFill.startSample)\uff1b\n \n        bufferToFill.clearActiveBufferRegion()\uff1b\n \n        for (auto oscillatorIndex = 0; oscillatorIndex < oscillators.size(); ++oscillatorIndex)\n        {\n            auto* oscillator = oscillators.getUnchecked (oscillatorIndex); // [8].\n \n            for (auto sample = 0; sample < bufferToFill.numSamples; ++sample)\n            {\n                auto levelSample = oscillator->getNextSample() * level; // [9].\n \n                leftBuffer[sample] += levelSample; // [10].\n                rightBuffer[sample] += levelSample\uff1b\n            }\n        }\n    \n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[7]: First, we retrieve the left and right channel pointers to write to the output buffers."}),"\n",(0,i.jsx)(n.li,{children:"[8]: For each oscillator in the array we retrieve a pointer to the oscillator instance."}),"\n",(0,i.jsx)(n.li,{children:"[9]: Then for each sample in the audio sample buffer we get the sine wave sample and trim the gain with the level variable."}),"\n",(0,i.jsx)(n.li,{children:"[10]: Finally we can add that sample value to the left and right channel samples and sum the signal with the other oscillators."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u4eca\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u6b63\u5f26\u6ce2\u3092\u7a4d\u307f\u91cd\u306d\u305f\u30e9\u30f3\u30c0\u30e0\u306a\u30ce\u30a4\u30ba\u304c\u805e\u3053\u3048\u308b\u306f\u305a\u3060\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u30e9\u30f3\u30c0\u30e0\u306aMIDI\u30ce\u30fc\u30c8\u3092\u751f\u6210\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u3042\u308b\u30b3\u30fc\u30c9\u306eMIDI\u30ce\u30fc\u30c8\u3092\u898b\u3064\u3051\u3001\u305d\u306e\u30b3\u30fc\u30c9\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306a\u30ce\u30fc\u30c8\u3092\u751f\u6210\u3059\u308b\u3002"}),"\n",(0,i.jsx)(n.h1,{id:"wavetable-oscillator",children:"Wavetable Oscillator"}),"\n",(0,i.jsx)(n.p,{children:"\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u306e\u5b9f\u88c5\u3092\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30fb\u30b7\u30f3\u30bb\u30b7\u30b9\u65b9\u5f0f\u306b\u5909\u3048\u3066\u307f\u3088\u3046\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," class, add an AudioSampleBuffer as a member variable that will hold the wavetable values of our single sine wave cycle [1]. We also define the wavetable resolution as a constant of 128 samples using the bit shift operator [2]:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"private:\n    juce::Label cpuUsageLabel;\n    juce::Label cpuUsageText;\n \n    const unsigned int tableSize = 1 << 7;      // [2]\n    float level = 0.0f;\n \n    juce::AudioSampleBuffer sineTable;          // [1]\n    juce::OwnedArray\u767a\u632f\u5668\uff1b\n \n    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainContentComponent)\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Define a new function called ",(0,i.jsx)(n.code,{children:"createWavetable()"})," that will be called in the ",(0,i.jsx)(n.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," constructor before we start the audio processing."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    void createWavetable()\n    {\n        sineTable.setSize (1, (int) tableSize);\n        auto* samples = sineTable.getWritePointer (0);                                   // [3]\n \n        auto angleDelta = juce::MathConstants::twoPi / (double) (tableSize - 1); // [4].\n        auto currentAngle = 0.0\uff1b\n \n        for (unsigned int i = 0; i < tableSize; ++i)\n        {\n            auto sample = std::sin (currentAngle); // [5].\n            samples[i] = (float) sample\uff1b\n            currentAngle += angleDelta\uff1b\n        }\n    }\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["[3]: In this function, initialise the AudioSampleBuffer by calling the ",(0,i.jsx)(n.code,{children:"setSize()"})," method by specifying that we only need one channel and the number of samples equal to the table size, in our case a resolution of 128. Then retrieve the write pointer for that single channel buffer."]}),"\n",(0,i.jsx)(n.li,{children:"[4]: Next, calculate the angle delta similarly to the previous section but this time using the table size and thus dividing the full 2pi cycle by 127."}),"\n",(0,i.jsxs)(n.li,{children:["[5]: Now for each point in our wavetable, retrieve the sine wave value using the ",(0,i.jsx)(n.code,{children:"\u6a19\u6e96\u5024::sin()"})," function, assign the value to the buffer sample and increment the current angle by the delta value."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Add this function call in the ",(0,i.jsx)(n.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," constructor as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'MainContentComponent()\n    {\n        cpuUsageLabel.setText ("CPU Usage", juce::dontSendNotification)\uff1b\n        cpuUsageText.setJustificationType (juce::Justification::right)\uff1b\n        addAndMakeVisible (cpuUsageLabel)\uff1b\n        addAndMakeVisible (cpuUsageText)\uff1b\n \n        createWavetable()\uff1b\n \n        setSize (400, 200)\uff1b\n        setAudioChannels (0, 2); // \u5165\u529b\u306a\u3057\u3001\u51fa\u529b2\u3064\n        startTimer (50)\uff1b\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u3053\u308c\u3067\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u306f\u3001\u6b63\u5f26\u6ce2\u306e\u5168\u30b5\u30a4\u30af\u30eb\u306e128\u30b5\u30f3\u30d7\u30eb\u3092\u542b\u3080\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["In the for() loop of the ",(0,i.jsx)(n.code,{children:"prepareToPlay()"})," function, change the below line to instantiate a ",(0,i.jsx)(n.code,{children:"\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc"})," object instead of a ",(0,i.jsx)(n.code,{children:"\u30b5\u30a4\u30f3\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc"})," object:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"for (auto i = 0; i < \u767a\u632f\u5668\u6570; ++i)\n        {\n            auto* oscillator = new WavetableOscillator (sineTable)\uff1b\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This constructor takes as an argument the wavetable to use for the sound generation and therefore, create a corresponding new ",(0,i.jsx)(n.code,{children:"\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc"})," class as shown below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u30af\u30e9\u30b9 WavetableOscillator\n{\npublic\uff1a\n    WavetableOscillator (const juce::AudioSampleBuffer& wavetableToUse)\n        : wavetable (wavetableToUse)\n    {\n        jassert (wavetable.getNumChannels() == 1)\uff1b\n    }\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"private\uff1a\n    const juce::AudioSampleBuffer& wavetable\uff1b\n    float currentIndex = 0.0f, tableDelta = 0.0f\uff1b\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u73fe\u5728\u306e\u89d2\u5ea6\u3068\u6ce2\u5f62\u30b5\u30a4\u30af\u30eb\u306e\u89d2\u5ea6\u30c7\u30eb\u30bf\u3092\u8a18\u9332\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u73fe\u5728\u306e\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30fb\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u306e\u89d2\u5ea6\u30c7\u30eb\u30bf\u3092\u683c\u7d0d\u3059\u308b2\u3064\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\u307e\u305f\u3001AudioSampleBuffer\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3001\u4f7f\u7528\u3059\u308b\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u53c2\u7167\u3092\u4fdd\u6301\u3059\u308b\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"setFrequency()"})," function of the ",(0,i.jsx)(n.code,{children:"\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc"})," class is fairly similar to the one implemented previously except that the angle delta is calculated using the size of the wavetable instead of the full cycle in radians of 2pi as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"void setFrequency (float frequency, float sampleRate)\n    {\n        auto tableSizeOverSampleRate = (float) wavetable.getNumSamples() / sampleRate\uff1b\n        tableDelta = frequency * tableSizeOverSampleRate\uff1b\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"getNextSample()"})," function is where the interpolation between the wavetable values occur in order to get the correct sample value."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u5f37\u5236\u30a4\u30f3\u30e9\u30a4\u30f3 float getNextSample() noexcept\n    {\n        auto tableSize = (unsigned int) wavetable.getNumSamples()\uff1b\n \n        auto index0 = (unsigned int) currentIndex; // [6].\n        auto index1 = index0 == (tableSize - 1) ?(unsigned int) 0 : index0 + 1\uff1b\n \n        auto frac = currentIndex - (float) index0; // [7].\n \n        auto* table = wavetable.getReadPointer (0); // [8].\n        auto value0 = table[index0]\uff1b\n        auto value1 = table[index1]\uff1b\n \n        auto currentSample = value0 + frac * (value1 - value0); // [9].\n \n        if ((currentIndex += tableDelta) > (float) tableSize)   // [10]\n            currentIndex -= (float) tableSize\uff1b\n \n        currentSample \u3092\u8fd4\u3059\uff1b\n    }\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[6]: First, temporarily store the two indices of the wavetable that surround the sample value that we are trying to retrieve. If the higher index goes beyond the size of the wavetable then we wrap the value to the start of the table."}),"\n",(0,i.jsx)(n.li,{children:"[7]: Next, calculate the interpolation value as a fraction between the two indices by subtracting the actual current sample by the truncated lower index. This should give us a value between 0 .. 1 that defines the fraction."}),"\n",(0,i.jsx)(n.li,{children:"[8]: Then get a pointer to the AudioSampleBuffer and read the values at the two indices and store these values temporarily."}),"\n",(0,i.jsx)(n.li,{children:"[9]: The interpolated sample value can then be retrieved by using the standard interpolation formula and the fraction value calculated previously."}),"\n",(0,i.jsx)(n.li,{children:"[10]: Finally, increment the angle delta of the table and wrap the value around if the value exceeds the table size."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u3053\u306e\u5b9f\u88c5\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u6642\u306b\u540c\u3058\u51fa\u529b\u97f3\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3060\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u767a\u632f\u5668\u306e\u6570\u3092\u5909\u66f4\u3057\u3001CPU\u4f7f\u7528\u7387\u306e\u5909\u5316\u3092\u89b3\u5bdf\u3059\u308b\u3002"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The source code for this modified version of the code can be found in the ",(0,i.jsx)(n.code,{children:"WavetableSynthTutorial_02.h"})," file of the demo project."]})}),"\n",(0,i.jsx)(n.h1,{id:"wrapping-the-wavetable",children:"Wrapping the Wavetable"}),"\n",(0,i.jsx)(n.p,{children:"\u5148\u307b\u3069\u306e\u30b3\u30fc\u30c9\u3092\u6ce8\u610f\u6df1\u304f\u898b\u3066\u3044\u305f\u3089\u3001\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u306e\u5024\u304c1\u3064\u8db3\u308a\u306a\u3044\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u6700\u5f8c\u306e\u5024\u304c\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3001\u305f\u307e\u305f\u307e\u540c\u3058\u5024\u3060\u3063\u305f\u6700\u521d\u306e\u5024\u306b\u6298\u308a\u8fd4\u3057\u3066\u3044\u308b\u306e\u3060\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc"})," constructor, assign the table size variable to hold the resolution of the wave table minus one and define that member variable appropriately as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u30af\u30e9\u30b9 WavetableOscillator\n{\npublic\uff1a\n    WavetableOscillator (const juce::AudioSampleBuffer& wavetableToUse)\n        : wavetable (wavetableToUse)\u3001\n          tableSize (wavetable.getNumSamples() - 1)\n    {\n        jassert (wavetable.getNumChannels() == 1)\uff1b\n    }\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"private\uff1a\n    const juce::AudioSampleBuffer& wavetable\uff1b\n    const int tableSize\uff1b\n    float currentIndex = 0.0f, tableDelta = 0.0f\uff1b\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"setFrequency()"})," function needs to be updated using this variable and notice that the angle delta of the table will be slightly smaller:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"void setFrequency (float frequency, float sampleRate)\n    {\n        auto tableSizeOverSampleRate = (float) tableSize / sampleRate\uff1b\n        tableDelta = frequency * tableSizeOverSampleRate\uff1b\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"getNextSample()"})," function remains fairly similar except that we don't need to wrap the higher index anymore because we will increase the size of the table in the next step:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u5f37\u5236\u30a4\u30f3\u30e9\u30a4\u30f3 float getNextSample() noexcept\n    {\n        auto index0 = (unsigned int) currentIndex\uff1b\n        auto index1 = index0 + 1\uff1b\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u3053\u3053\u3067\u306f\u3001\u4ee5\u524d\u3068\u306f\u7570\u306a\u308a\u3001\u89e3\u50cf\u5ea6\u3092\u5b9a\u7fa9\u3055\u308c\u305f\u5024\u306e1\u3064\u4e0a\u306b\u8a2d\u5b9a\u3057\u3001\u6700\u5f8c\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u540c\u3058\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u308b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"void createWavetable()\n    {\n        sineTable.setSize (1, (int) tableSize + 1)\uff1b\n        auto* samples = sineTable.getWritePointer (0)\uff1b\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"samples[tableSize] = samples[0]\uff1b\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This allows us to reduce the wrapping condition in the processing call and transfering the load to the ",(0,i.jsx)(n.code,{children:"createWavetable()"})," function that only gets called once at the start of the application."]}),"\n",(0,i.jsx)(n.p,{children:"\u7d50\u679c\u306f\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3068\u540c\u3058\u306b\u805e\u3053\u3048\u308b\u306f\u305a\u3060\u304c\u3001CPU\u4f7f\u7528\u7387\u304c\u308f\u305a\u304b\u306b\u6e1b\u5c11\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u76ee\u3057\u3066\u307b\u3057\u3044\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u3053\u306e\u30b3\u30fc\u30c9\u3092\u3055\u3089\u306b\u6700\u9069\u5316\u3059\u308b\u65b9\u6cd5\u306f\u3042\u308a\u307e\u3059\u304b\uff1fDSP\u3067\u306f\u3059\u3079\u3066\u306e\u7b97\u8853\u6f14\u7b97\u304c\u6027\u80fd\u306b\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u308b\u306e\u3067\u3001\u3067\u304d\u308b\u3060\u3051\u591a\u304f\u306e\u6f14\u7b97\u3092\u7701\u304f\u3088\u3046\u306b\u3059\u3079\u304d\u3067\u3059\u3002"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The source code for this modified version of the code can be found in the ",(0,i.jsx)(n.code,{children:"WavetableSynthTutorial_03.h"})," file of the demo project."]})}),"\n",(0,i.jsx)(n.h1,{id:"selecting-the-harmonics",children:"Selecting the Harmonics"}),"\n",(0,i.jsx)(n.p,{children:"\u30e9\u30f3\u30c0\u30e0\u306a\u30b5\u30a4\u30f3\u6ce2\u30b5\u30a6\u30f3\u30c9\u3092\u51fa\u529b\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u30cf\u30fc\u30e2\u30cb\u30af\u30b9\u3092\u660e\u793a\u7684\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u8abf\u548c\u306e\u3068\u308c\u305f\u30b5\u30a4\u30f3\u6ce2\u3092\u4f5c\u6210\u3057\u3066\u307f\u3088\u3046\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["Modify the ",(0,i.jsx)(n.code,{children:"createWavetable()"})," function to incorporate the harmonics in the wavetable samples of the sine wave as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    void createWavetable()\n    {\n        sineTable.setSize (1, (int) tableSize + 1);\n        sineTable.clear();\n \n        auto* samples = sineTable.getWritePointer (0);\n \n        int harmonics[] = { 1, 3, 5, 6, 7, 9, 13, 15 };\n        float harmonicWeights[] = { 0.5f, 0.1f, 0.05f, 0.125f, 0.09f, 0.005f, 0.002f, 0.001f };     // [1]\n \n        jassert (juce::numElementsInArray (harmonics) == juce::numElementsInArray (harmonicWeights));\n \n        for (auto harmonic = 0; harmonic < juce::numElementsInArray (harmonics); ++harmonic)\n        {\n            auto angleDelta = juce::MathConstants::twoPi / (double) (tableSize - 1) * harmonics[harmonic]; // [2].\n            auto currentAngle = 0.0\uff1b\n \n            for (unsigned int i = 0; i < tableSize; ++i)\n            {\n                auto sample = std::sin (currentAngle)\uff1b\n                samples[i] += (float) sample * harmonicWeights[harmonic]; // [3].\n                currentAngle += angleDelta\uff1b\n            }\n        }\n \n        samples[tableSize] = samples[0]\uff1b\n    }\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"[1]: Define two arrays that respectively describe the indices of the odd harmonics and its corresponding weights."}),"\n",(0,i.jsx)(n.li,{children:"[2]: For each harmonic, calculate the angle delta by multiplying the full 2pi cycle by the harmonic order and dividing by the table size. This essentially multiplies the frequency generated by the harmonic order."}),"\n",(0,i.jsx)(n.li,{children:"[3]: For each sample in the table, retrieve the sine value from the current angle, add the value to the existing buffer sample by trimming the gain with the corresponding harmonic weight and increment the current angle by the delta value."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"void prepareToPlay (int, double sampleRate) override\n    {\n        auto numberOfOscillators = 10\uff1b\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Finally, reduce the number of oscillators to 10 in the ",(0,i.jsx)(n.code,{children:"prepareToPlay()"})," function and listen to the result by running the application."]}),"\n",(0,i.jsx)(n.p,{children:"\u500d\u97f3\u3092\u5076\u6570\u7cfb\u5217\u306b\u5909\u66f4\u3057\u3066\u3001\u767a\u751f\u3059\u308b\u97f3\u306e\u97f3\u8272\u306e\u5909\u5316\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5947\u6570\u7cfb\u5217\u3068\u5076\u6570\u7cfb\u5217\u306f\u3069\u3046\u3067\u3057\u3087\u3046\uff1f"}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsx)(n.p,{children:"\u30aa\u30fc\u30c7\u30a3\u30aa\u4fe1\u53f7\u306b\u9ad8\u3044\u5468\u6ce2\u6570\u6210\u5206\u3092\u52a0\u3048\u308b\u306e\u3067\u3001\u30a8\u30a4\u30ea\u30a2\u30b7\u30f3\u30b0\u52b9\u679c\u306b\u6ce8\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff01\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u7bc4\u56f2\u5916\u3067\u3059\u304c\u3001\u30ca\u30a4\u30ad\u30b9\u30c8\u30fb\u30b7\u30e3\u30ce\u30f3\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u3068\u30a2\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3 \u30b0\u306b\u3064\u3044\u3066\u8aad\u3080\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002"}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The source code for this modified version of the code can be found in the ",(0,i.jsx)(n.code,{children:"WavetableSynthTutorial_04.h"})," file of the demo project."]})})]}),"\n",(0,i.jsx)(n.h1,{id:"notes",children:"Notes"}),"\n",(0,i.jsx)(n.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u30b5\u30a4\u30f3\u6ce2\u304b\u3089\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3057\u305f\u304c\u3001\u6700\u521d\u306e\u30b5\u30f3\u30d7\u30eb\u304c\u6700\u5f8c\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u3001\u57fa\u672c\u7684\u306b\u3069\u306e\u3088\u3046\u306a\u7a2e\u985e\u306e\u5468\u671f\u6ce2\u5f62\u3067\u3082\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["Modify the ",(0,i.jsx)(n.code,{children:"createWavetable()"})," function to generate and store different types of waveforms such as square, triangle or sawtooth waves."]}),"\n",(0,i.jsx)(n.h1,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,i.jsx)(n.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30fb\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u306e\u5b9f\u88c5\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u7279\u306b"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u6b63\u5f26\u6ce2\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u3092\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30fb\u30aa\u30b7\u30ec\u30fc\u30bf\u30fc\u306b\u5909\u63db\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6570\u767e\u306e\u767a\u632f\u5668\u3067CPU\u4f7f\u7528\u7387\u3092\u6700\u9069\u5316\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u540c\u3058\u767a\u632f\u5668\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u500d\u97f3\u3092\u30aa\u30fc\u30c7\u30a3\u30aa\u51fa\u529b\u306b\u66f8\u304d\u8fbc\u3080\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u30cf\u30fc\u30e2\u30cb\u30af\u30b9\u3068\u305d\u306e\u30a6\u30a7\u30a4\u30c8\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3067\u3001\u8abf\u548c\u306e\u3068\u308c\u305f\u30b5\u30a6\u30f3\u30c9\u3092\u4f5c\u308a\u51fa\u3057\u305f\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"\u95a2\u9023\u9805\u76ee",children:"\u95a2\u9023\u9805\u76ee"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../tutorial_simple_synth_noise/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30db\u30ef\u30a4\u30c8\u30ce\u30a4\u30ba\u30fb\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u3092\u4f5c\u308b"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../tutorial_sine_synth/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b5\u30a4\u30f3\u6ce2\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../tutorial_synth_db_level_control/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30c7\u30b7\u30d9\u30eb\u3092\u4f7f\u3063\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30ec\u30d9\u30eb\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../tutorial_synth_level_control/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u30ec\u30d9\u30eb\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../tutorial_synth_using_midi_input/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebMIDI\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../tutorial_looping_audio_sample_buffer/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebAudioSampleBuffer\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u305f\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30eb\u30fc\u30d7\u518d\u751f"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"../tutorial_looping_audio_sample_buffer_advanced/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebAudioSampleBuffer\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u305f\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30eb\u30fc\u30d7\uff08\u4e0a\u7d1a\u8005\u5411\u3051\uff09"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3449:(e,n,t)=>{t.d(n,{A:()=>a});var i=t(4848);function a(e){let{src:n,caption:t,alt:a,width:l,height:r}=e;return(0,i.jsxs)("figure",{children:[(0,i.jsx)("img",{src:n,alt:a||t,width:l,height:r}),(0,i.jsx)("figcaption",{children:(0,i.jsx)("b",{children:t})})]})}},6378:(e,n,t)=>{t.d(n,{A:()=>a});var i=t(4848);function a(e){let{path:n}=e;return(0,i.jsx)("p",{children:(0,i.jsx)("a",{href:"https://docs.juce.com/master/"+n,children:"\ud83d\udcda Source Page"})})}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const a={},l=i.createContext(a);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);