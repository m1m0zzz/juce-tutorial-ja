"use strict";(self.webpackChunkjuce_tutorial_ja=self.webpackChunkjuce_tutorial_ja||[]).push([[6284],{9857:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=t(4848),i=t(8453),a=t(3449);t(6378);const l={title:"\u30b5\u30a4\u30f3\u6ce2\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b",sidebar_position:4},s="\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b5\u30a4\u30f3\u6ce2\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b",o={id:"synth/tutorial_sine_synth",title:"\u30b5\u30a4\u30f3\u6ce2\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b",description:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u7c21\u5358\u306a\u30b5\u30a4\u30f3\u6ce2\u5408\u6210\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u6b63\u5f26\u6ce2\u767a\u632f\u5668\u306e\u72b6\u614b\u3092\u7ba1\u7406\u3057\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u51fa\u529b\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002",source:"@site/docs/synth/tutorial_sine_synth.mdx",sourceDirName:"synth",slug:"/synth/tutorial_sine_synth",permalink:"/juce-tutorial-ja/synth/tutorial_sine_synth",draft:!1,unlisted:!1,editUrl:"https://github.com/m1m0zzz/juce-tutorial-ja/tree/main/docs/synth/tutorial_sine_synth.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"\u30b5\u30a4\u30f3\u6ce2\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"\u30c7\u30b7\u30d9\u30eb\u3067\u30aa\u30fc\u30c7\u30a3\u30aa\u30ec\u30d9\u30eb\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb",permalink:"/juce-tutorial-ja/synth/tutorial_synth_db_level_control"},next:{title:"MIDI\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b",permalink:"/juce-tutorial-ja/synth/tutorial_synth_using_midi_input"}},h={},c=[{value:"\u306f\u3058\u3081\u308b",id:"\u306f\u3058\u3081\u308b",level:2},{value:"Maintaining our state",id:"maintaining-our-state",level:2},{value:"Using the slider value",id:"using-the-slider-value",level:2},{value:"Outputting the audio",id:"outputting-the-audio",level:2},{value:"The slider configuration",id:"the-slider-configuration",level:2},{value:"State members for smoothing",id:"state-members-for-smoothing",level:2},{value:"Updating the synthesis code",id:"updating-the-synthesis-code",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b5\u30a4\u30f3\u6ce2\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b5\u30a4\u30f3\u6ce2\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b"}),"\n",(0,r.jsx)(n.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u7c21\u5358\u306a\u30b5\u30a4\u30f3\u6ce2\u5408\u6210\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u6b63\u5f26\u6ce2\u767a\u632f\u5668\u306e\u72b6\u614b\u3092\u7ba1\u7406\u3057\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u51fa\u529b\u306b\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u3080\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u30ec\u30d9\u30eb\uff1a\u4e2d\u7d1a"}),"\n",(0,r.jsx)(n.p,{children:"\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\uff1aWindows, macOS, Linux"}),"\n",(0,r.jsxs)(n.p,{children:["\u30af\u30e9\u30b9\uff1a ",(0,r.jsx)(n.a,{href:"https://docs.juce.com/master/classAudioAppComponent",title:"A base class for writing audio apps that stream from the audio i/o devices.",children:"\u30aa\u30fc\u30c7\u30a3\u30aa\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"}),", ",(0,r.jsx)(n.a,{href:"https://docs.juce.com/master/classSlider",title:"A slider control for changing a value.",children:"\u30b9\u30e9\u30a4\u30c0\u30fc"}),", ",(0,r.jsx)(n.a,{href:"https://docs.juce.com/master/structMathConstants",title:"Commonly used mathematical constants.",children:"\u6570\u5b66\u5b9a\u6570"})]}),"\n",(0,r.jsx)(n.h2,{id:"\u306f\u3058\u3081\u308b",children:"\u306f\u3058\u3081\u308b"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This tutorial leads on from ",(0,r.jsx)(n.a,{href:"../tutorial_synth_level_control/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u30ec\u30d9\u30eb\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb"}),", which you should have read and understood first."]})}),"\n",(0,r.jsxs)(n.p,{children:["Download the demo project for this tutorial here: ",(0,r.jsx)(n.a,{href:"/tutorials/PIPs/SineSynthTutorial.zip",children:"\u30d4\u30c3\u30d7"})," | ",(0,r.jsx)(n.a,{href:"/tutorials/ZIPs/SineSynthTutorial.zip",children:"\u30b8\u30c3\u30d7"}),". Unzip the project and open the first header file in the Projucer."]}),"\n",(0,r.jsxs)(n.p,{children:["If you need help with this step, see ",(0,r.jsx)(n.a,{href:"../tutorial_new_projucer_project/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebProjucer\u30d1\u30fc\u30c81\uff1aProjucer\u3092\u59cb\u3081\u308b"}),"."]}),"\n",(0,r.jsx)(n.h1,{id:"the-demo-project",children:"The demo project"}),"\n",(0,r.jsx)(n.p,{children:"\u3053\u306e\u30c7\u30e2\u30fb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001Projucer\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u30fb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002\u6b63\u5f26\u6ce2\u306e\u5468\u6ce2\u6570\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u305f\u3081\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u304c1\u3064\u8868\u793a\u3055\u308c\u307e\u3059\u3002"}),"\n",(0,r.jsx)(n.h1,{id:"generating-a-sine-wave",children:"Generating a sine wave"}),"\n",(0,r.jsxs)(n.p,{children:["This tutorial synthesises a sine wave using the standard library function ",(0,r.jsx)(n.code,{children:"\u6a19\u6e96\u5024::sin()"}),". In order to use this we need to maintain a state for our sine wave generation by storing the current ",(0,r.jsx)(n.em,{children:"\u4f4d\u76f8\u89d2"}),' and the amount by which the phase angle needs to increment for each output sample. This size of this change per sample ("delta") is dependent on the sample rate of the output and the frequency of the sine wave we want to generate.']}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["Most synthesis applications and plug-ins are likely not to use the ",(0,r.jsx)(n.code,{children:"\u6a19\u6e96\u5024::sin()"})," function as it probably isn't the most efficient technique. Commonly a ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Table-lookup_synthesis",children:"\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb"})," would be used, see ",(0,r.jsx)(n.a,{href:"../tutorial_wavetable_synth/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30b7\u30f3\u30bb\u30b7\u30b9"}),". Wavetables also allow for waveshapes other than sine waves, too."]})}),"\n",(0,r.jsx)(n.h2,{id:"maintaining-our-state",children:"Maintaining our state"}),"\n",(0,r.jsxs)(n.p,{children:["In our ",(0,r.jsx)(n.code,{children:"\u30e1\u30a4\u30f3\u30b3\u30f3\u30c6\u30f3\u30c4\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8"})," class we store three ",(0,r.jsx)(n.code,{children:"\u30c0\u30d6\u30eb"})," members [1]:"]}),"\n",(0,r.jsxs)(n.p,{children:["We have a simple function that updates the ",(0,r.jsx)(n.code,{children:"\u89d2\u5ea6\u30c7\u30eb\u30bf"})," member:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"    void updateAngleDelta()\n    {\n        auto cyclesPerSample = frequencySlider.getValue() / currentSampleRate;         // [2]\n        angleDelta = cyclesPerSample * 2.0 * juce::MathConstants::pi; // [3\uff3d\n    }\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"[2]: First we calculate the number of cycles that will need to complete for each output sample."}),"\n",(0,r.jsx)(n.li,{children:"[3]: Then this is multiplied by the length of a whole sine wave cycle, which is 2pi radians."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Before this function can work correctly we need to know the output sample rate. This is because we need to know how frequently the samples are being generated, this is in order to know the amount of change that is needed per sample. We are passed the sample rate by the ",(0,r.jsx)(n.a,{href:"classAudioAppComponent.html#a70634aa3ffaf6e7ff0d233e5933a063d",title:"Tells the source to prepare for playing.",children:"AudioAppComponent::prepareToPlay()"})," callback function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"void prepareToPlay (int, double sampleRate) override\n    {\n        currentSampleRate = sampleRate\uff1b\n        updateAngleDelta()\uff1b\n    }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here we store a copy of the sample rate value and call our ",(0,r.jsx)(n.code,{children:"updateAngleDelta()"})," function initially."]}),"\n",(0,r.jsx)(n.h2,{id:"using-the-slider-value",children:"Using the slider value"}),"\n",(0,r.jsxs)(n.p,{children:["When the slider is moved while the app is running, we need to update the ",(0,r.jsx)(n.code,{children:"\u89d2\u5ea6\u30c7\u30eb\u30bf"})," member again:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"frequencySlider.onValueChange = [this].\n        {\n            if (currentSampleRate > 0.0)\n                updateAngleDelta()\uff1b\n        };\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here we check that the sample rate is valid, before calling the ",(0,r.jsx)(n.code,{children:"updateAngleDelta()"})," function again."]}),"\n",(0,r.jsx)(n.h2,{id:"outputting-the-audio",children:"Outputting the audio"}),"\n",(0,r.jsxs)(n.p,{children:["During the ",(0,r.jsx)(n.code,{children:"getNextAudioBlock()"})," callback we need to generate the actual sine wave and write it to the output:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"void getNextAudioBlock (const juce::AudioSourceChannelInfo& bufferToFill) override\n    {\n        auto level = 0.125f\uff1b\n        auto* leftBuffer = bufferToFill.buffer->getWritePointer (0, bufferToFill.startSample)\uff1b\n        auto* rightBuffer = bufferToFill.buffer->getWritePointer (1, bufferToFill.startSample)\uff1b\n \n        for (auto sample = 0; sample < bufferToFill.numSamples; ++sample)\n        {\n            auto currentSample = (float) std::sin (currentAngle)\uff1b\n            currentAngle += angleDelta\uff1b\n            leftBuffer[sample] = currentSample * level\uff1b\n            rightBuffer[sample] = currentSample * level\uff1b\n        }\n    }\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For each output sample we calculate the sine function for the current angle, then increment the angle for the next sample. Notice that we bring the level down to ",(0,r.jsx)(n.code,{children:"0.125"})," as a full scale sine wave will be very loud! We could (and perhaps should) ",(0,r.jsx)(n.em,{children:"\u30e9\u30c3\u30d7"})," the current angle value back to zero when it reaches 2pi. Since larger values still return a valid value we can actually avoid this calculation. We get something like that shown in the following image:"]}),"\n",(0,r.jsx)(a.A,{src:"https://docs.juce.com/master/tutorial_synth_sine_graph1.png",caption:"A full scale \xb11.0 sine wave showing the phase angle in radians."}),"\n",(0,r.jsx)(n.h2,{id:"the-slider-configuration",children:"The slider configuration"}),"\n",(0,r.jsxs)(n.p,{children:["You may have noticed that the slider value changes non-linearly (if not you should try this out now). These changes are, in fact, logarithmic. This gives us higher resolution for smaller values and lower resolution for larger values. When controlling a frequency value this is often appropriate (as musically, we hear equal changes in ratios between frequences rather than equal linear changes). This is configured by using the ",(0,r.jsx)(n.a,{href:"classSlider.html#a2d948c662c1f636810d3125d8b3f0d47",title:"Sets up a skew factor to alter the way values are distributed.",children:"\u30b9\u30e9\u30a4\u30c0\u30fc::setSkewFactorFromMidPoint()"})," function [4]. Our slider range is set to 50..5000 therefore setting the centre of the slider track to represent 500 would mean there is an equal musical interval between the slider minimum and the centre, and the centre and the slider maximum:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"MainContentComponent()\n    {\n        addAndMakeVisible (frequencySlider)\uff1b\n        frequencySlider.setRange (50.0, 5000.0)\uff1b\n        frequencySlider.setSkewFactorFromMidPoint (500.0); // [4].\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"\u30b9\u30ad\u30e5\u30fc\u4fc2\u6570"})," for the slider can be set directly using the ",(0,r.jsx)(n.a,{href:"classSlider.html#aba8fe3610e7198bd4c1f2804736bfbf2",title:"Sets up a skew factor to alter the way values are distributed.",children:"\u30b9\u30e9\u30a4\u30c0\u30fc::setSkewFactor()"})," function although it is often easier to think about what value you want at the mid-point."]}),"\n",(0,r.jsx)(n.p,{children:"Add another slider to the application to control the level of the sine wave. Take care to keep the level well below 1.0 \u2014 a maximum value of 0.25 should be fine."}),"\n",(0,r.jsx)(n.h1,{id:"smoothing-frequency-changes",children:"Smoothing frequency changes"}),"\n",(0,r.jsx)(n.p,{children:"\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u52d5\u304b\u3059\u3068\u3001\u7279\u306b\u9ad8\u3044\u5468\u6ce2\u6570\u5e2f\u57df\u3067\u3001\u8033\u306b\u805e\u3053\u3048\u308b\u3001\u304a\u305d\u3089\u304f\u306f\u4e0d\u8981\u306a\u30a2\u30fc\u30c1\u30d5\u30a1\u30af\u30c8\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u306b\u304a\u6c17\u3065\u304d\u3067\u3057\u3087\u3046\u3002\u3053\u308c\u306f\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u304c\u5b9f\u969b\u306b\u306f\u96e2\u6563\u7684\u306a\u30b9\u30c6\u30c3\u30d7\u3067\u5909\u5316\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u7d20\u65e9\u304f\u52d5\u304b\u3059\u3068\u3001\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u304b\u306a\u308a\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u52a0\u3048\u3066\u3001\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5468\u6ce2\u6570\u306f\u30aa\u30fc\u30c7\u30a3\u30aa\u30d6\u30ed\u30c3\u30af\u3054\u3068\u306b\u3057\u304b\u66f4\u65b0\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u3053\u308c\u3089\u306e\u5909\u5316\u306e\u6b63\u78ba\u306a\u52b9\u679c\u306f\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002"}),"\n",(0,r.jsx)(n.h2,{id:"state-members-for-smoothing",children:"State members for smoothing"}),"\n",(0,r.jsxs)(n.p,{children:["Let's add two members to our class, one to store the current frequency being used for synthesis, and another ",(0,r.jsx)(n.em,{children:"\u30bf\u30fc\u30b2\u30c3\u30c8"})," frequency that the user has requested by moving the slider. Then we can more slowly ramp between these values to remove the artefacts:"]}),"\n",(0,r.jsx)(n.p,{children:"We initialise these values at the same time [5]. We can also initialise the slider to the same value [6]:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"MainContentComponent()\n    {\n        addAndMakeVisible (frequencySlider)\uff1b\n        frequencySlider.setRange (50.0, 5000.0)\uff1b\n        frequencySlider.setSkewFactorFromMidPoint (500.0)\uff1b\n        frequencySlider.setValue (currentFrequency, juce::dontSendNotification); // [6].\n"})}),"\n",(0,r.jsx)(n.h2,{id:"updating-the-synthesis-code",children:"Updating the synthesis code"}),"\n",(0,r.jsxs)(n.p,{children:["The key to the way this algorithm works is to check whether the current and target values are the same or different. If they are the same, then we can simply use our original code as the ",(0,r.jsx)(n.code,{children:"\u89d2\u5ea6\u30c7\u30eb\u30bf"})," member doesn't need to change. If the current and target values are different, then we need to update the ",(0,r.jsx)(n.code,{children:"\u89d2\u5ea6\u30c7\u30eb\u30bf"})," member for each sample as we gradually move the current value closer to the target."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"\u3053\u306e\u4f8b\u3067\u306f\u3001\u51fa\u529b\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u3092\u30e9\u30f3\u30d7\u306e\u9577\u3055\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u304c\u975e\u5e38\u306b\u5c0f\u3055\u3044\u5834\u5408\u3001\u30a2\u30fc\u30c6\u30a3\u30d5\u30a1\u30af\u30c8\u304c\u805e\u3053\u3048\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"void getNextAudioBlock (const juce::AudioSourceChannelInfo& bufferToFill) override\n    {\n        auto level = 0.125f\uff1b\n        auto* leftBuffer = bufferToFill.buffer->getWritePointer (0, bufferToFill.startSample)\uff1b\n        auto* rightBuffer = bufferToFill.buffer->getWritePointer (1, bufferToFill.startSample)\uff1b\n \n        auto localTargetFrequency = targetFrequency\uff1b\n \n        if (! juce::approximatelyEqual (localTargetFrequency, currentFrequency)) // [7].\n        {\n            auto frequencyIncrement = (localTargetFrequency - currentFrequency) / bufferToFill.numSamples; // [8].\n \n            for (auto sample = 0; sample < bufferToFill.numSamples; ++sample)\n            {\n                auto currentSample = (float) std::sin (currentAngle)\uff1b\n                currentFrequency += frequencyIncrement; // [9].\n                updateAngleDelta(); // [10].\n                currentAngle += angleDelta\uff1b\n                leftBuffer[sample] = currentSample * level\uff1b\n                rightBuffer[sample] = currentSample * level\uff1b\n            }\n \n            currentFrequency = localTargetFrequency\uff1b\n        }\n        else // [11\uff3d\n        {\n            for (auto sample = 0; sample < bufferToFill.numSamples; ++sample)\n            {\n                auto currentSample = (float) std::sin (currentAngle)\uff1b\n                currentAngle += angleDelta\uff1b\n                leftBuffer[sample] = currentSample * level\uff1b\n                rightBuffer[sample] = currentSample * level\uff1b\n            }\n        }\n    }\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"[7]: Check if our target is different from the current value. Notice that we take a local copy of the target value, just in case the slider changes the value on the message thread while this function runs."}),"\n",(0,r.jsx)(n.li,{children:"[8]: Calculate the required increment per sample."}),"\n",(0,r.jsx)(n.li,{children:"[9]: Increment the current frequency."}),"\n",(0,r.jsxs)(n.li,{children:["[10]: Update the ",(0,r.jsx)(n.code,{children:"\u30c7\u30eb\u30bf\u89d2\u5ea6"})," member based on this new frequency."]}),"\n",(0,r.jsx)(n.li,{children:"[11]: Otherwise just use the original code."}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The format of this code uses a typically pattern for ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Digital_signal_processing",children:"\u30c7\u30b8\u30bf\u30eb\u4fe1\u53f7\u51e6\u7406"})," code. We avoid conditional statements in the inner ",(0,r.jsx)(n.code,{children:"for()"})," loop, if possible. Instead, having the condition tested outside the loop, and we use two different, but quite similar loops depending upon whether the parameter is changing."]})}),"\n",(0,r.jsxs)(n.p,{children:["Finally, we need to update our ",(0,r.jsx)(n.a,{href:"classSlider.html#a680d007f6a824a28a60aa05b4045e794",title:"You can assign a lambda to this callback object to have it called when the slider value is changed.",children:"\u30b9\u30e9\u30a4\u30c0\u30fc::onValueChange"})," helper object so that it just updates the target value:"]}),"\n",(0,r.jsx)(n.p,{children:"\u3053\u308c\u3067\u7d42\u308f\u308a\u3067\u3059\uff01\u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u52d5\u304d\u306b\u3088\u308b\u30a2\u30fc\u30c6\u30a3\u30d5\u30a1\u30af\u30c8\u304c\u53d6\u308a\u9664\u304b\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002"}),"\n",(0,r.jsx)(n.p,{children:"\u4ee5\u524d\u306e\u7df4\u7fd2\u3067\u8ffd\u52a0\u3057\u305f\u30ec\u30d9\u30eb\u30fb\u30b9\u30e9\u30a4\u30c0\u30fb\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306b\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002"}),"\n",(0,r.jsx)(n.h1,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Not wrapping the phase angle around 2pi may not be ideal in all circumstances. If using ",(0,r.jsx)(n.code,{children:"\u30d5\u30ed\u30fc\u30c8"})," rather than ",(0,r.jsx)(n.code,{children:"\u30c0\u30d6\u30eb"})," variables then there would be some innaccuracy to the calculations when the current angle value became very large. By not wrapping the phase at 2pi using the ",(0,r.jsx)(n.code,{children:"\u6a19\u6e96\u5024::sin()"})," function performs reasonably well compared to a simple wavetable technnique. See ",(0,r.jsx)(n.a,{href:"../tutorial_wavetable_synth/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30b7\u30f3\u30bb\u30b7\u30b9"})," for an exploration of this."]}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"\u6982\u8981",children:"\u6982\u8981"}),"\n",(0,r.jsx)(n.p,{children:"\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u30b5\u30a4\u30f3\u6ce2\u306e\u5408\u6210\u3068\u5236\u5fa1\u306e\u57fa\u672c\u7684\u306a\u65b9\u6cd5\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u3053\u3053\u3067\u306f"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u6b63\u5f26\u6ce2\u767a\u632f\u5668\u306e\u72b6\u614b\u3092\u7dad\u6301\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u4e0d\u53ef\u6b20\u306a\u5909\u6570\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u3053\u308c\u3089\u306e\u5909\u6570\u3092\u3069\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308c\u3070\u3001\u671b\u307e\u3057\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u304b\u3002"}),"\n",(0,r.jsx)(n.li,{children:"\u30aa\u30fc\u30c7\u30a3\u30aa\u306e\u30a2\u30fc\u30c1\u30d5\u30a1\u30af\u30c8\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u5909\u5316\u3092\u6ed1\u3089\u304b\u306b\u3059\u308b\u65b9\u6cd5\u3002"}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"\u95a2\u9023\u9805\u76ee",children:"\u95a2\u9023\u9805\u76ee"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../tutorial_slider_values/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30b9\u30e9\u30a4\u30c0\u30fc\u30af\u30e9\u30b9"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../tutorial_simple_synth_noise/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30db\u30ef\u30a4\u30c8\u30ce\u30a4\u30ba\u30fb\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u3092\u4f5c\u308b"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../tutorial_synth_db_level_control/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30c7\u30b7\u30d9\u30eb\u3092\u4f7f\u3063\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30ec\u30d9\u30eb\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../tutorial_synth_level_control/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30aa\u30fc\u30c7\u30a3\u30aa\u30ec\u30d9\u30eb\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../tutorial_synth_using_midi_input/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30ebMIDI\u30b7\u30f3\u30bb\u30b5\u30a4\u30b6\u30fc\u3092\u4f5c\u308b"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"../tutorial_wavetable_synth/",children:"\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30a6\u30a7\u30fc\u30d6\u30c6\u30fc\u30d6\u30eb\u30b7\u30f3\u30bb\u30b7\u30b9"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3449:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(4848);function i(e){let{src:n,caption:t,alt:i,width:a,height:l}=e;return(0,r.jsxs)("figure",{children:[(0,r.jsx)("img",{src:n,alt:i||t,width:a,height:l}),(0,r.jsx)("figcaption",{children:(0,r.jsx)("b",{children:t})})]})}},6378:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(4848);function i(e){let{path:n}=e;return(0,r.jsx)("p",{children:(0,r.jsx)("a",{href:`https://docs.juce.com/master/${n}.html`,children:"\ud83d\udcda Source Page"})})}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var r=t(6540);const i={},a=r.createContext(i);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);